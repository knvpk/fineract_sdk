/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FormDataContentDisposition } from '../models';
// @ts-ignore
import { GetOfficesResponse } from '../models';
// @ts-ignore
import { GetOfficesTemplateResponse } from '../models';
// @ts-ignore
import { PostOfficesRequest } from '../models';
// @ts-ignore
import { PostOfficesResponse } from '../models';
// @ts-ignore
import { PutOfficesOfficeIdRequest } from '../models';
// @ts-ignore
import { PutOfficesOfficeIdResponse } from '../models';
/**
 * OfficesApi - axios parameter creator
 * @export
 */
export const OfficesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mandatory Fields name, openingDate, parentId
         * @summary Create an Office
         * @param {PostOfficesRequest} postOfficesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffice: async (postOfficesRequest: PostOfficesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postOfficesRequest' is not null or undefined
            assertParamExists('createOffice', 'postOfficesRequest', postOfficesRequest)
            const localVarPath = `/offices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOfficesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficeTemplate: async (dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/offices/downloadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfficeTemplate: async (file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/offices/uploadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
            if (locale !== undefined) { 
                localVarFormParams.append('locale', locale as any);
            }
    
            if (dateFormat !== undefined) { 
                localVarFormParams.append('dateFormat', dateFormat as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  offices/1   offices/1?template=true   offices/1?fields=id,name,parentName
         * @summary Retrieve an Office
         * @param {number} officeId officeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveOffice: async (officeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'officeId' is not null or undefined
            assertParamExists('retreiveOffice', 'officeId', officeId)
            const localVarPath = `/offices/{officeId}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  offices/template
         * @summary Retrieve Office Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOfficeTemplate: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/offices/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  offices   offices?fields=id,name,openingDate
         * @summary List Offices
         * @param {boolean} [includeAllOffices] includeAllOffices
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOffices: async (includeAllOffices?: boolean, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/offices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (includeAllOffices !== undefined) {
                localVarQueryParameter['includeAllOffices'] = includeAllOffices;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Office
         * @param {number} officeId officeId
         * @param {PutOfficesOfficeIdRequest} putOfficesOfficeIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOffice: async (officeId: number, putOfficesOfficeIdRequest: PutOfficesOfficeIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'officeId' is not null or undefined
            assertParamExists('updateOffice', 'officeId', officeId)
            // verify required parameter 'putOfficesOfficeIdRequest' is not null or undefined
            assertParamExists('updateOffice', 'putOfficesOfficeIdRequest', putOfficesOfficeIdRequest)
            const localVarPath = `/offices/{officeId}`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putOfficesOfficeIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfficesApi - functional programming interface
 * @export
 */
export const OfficesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfficesApiAxiosParamCreator(configuration)
    return {
        /**
         * Mandatory Fields name, openingDate, parentId
         * @summary Create an Office
         * @param {PostOfficesRequest} postOfficesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOffice(postOfficesRequest: PostOfficesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostOfficesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOffice(postOfficesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfficeTemplate(dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfficeTemplate(dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOfficeTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOfficeTemplate(file, locale, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  offices/1   offices/1?template=true   offices/1?fields=id,name,parentName
         * @summary Retrieve an Office
         * @param {number} officeId officeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retreiveOffice(officeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOfficesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retreiveOffice(officeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  offices/template
         * @summary Retrieve Office Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOfficeTemplate(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOfficesTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOfficeTemplate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  offices   offices?fields=id,name,openingDate
         * @summary List Offices
         * @param {boolean} [includeAllOffices] includeAllOffices
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOffices(includeAllOffices?: boolean, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOfficesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOffices(includeAllOffices, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Office
         * @param {number} officeId officeId
         * @param {PutOfficesOfficeIdRequest} putOfficesOfficeIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOffice(officeId: number, putOfficesOfficeIdRequest: PutOfficesOfficeIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutOfficesOfficeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOffice(officeId, putOfficesOfficeIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfficesApi - factory interface
 * @export
 */
export const OfficesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfficesApiFp(configuration)
    return {
        /**
         * Mandatory Fields name, openingDate, parentId
         * @summary Create an Office
         * @param {PostOfficesRequest} postOfficesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffice(postOfficesRequest: PostOfficesRequest, options?: any): AxiosPromise<PostOfficesResponse> {
            return localVarFp.createOffice(postOfficesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficeTemplate(dateFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getOfficeTemplate(dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfficeTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): AxiosPromise<string> {
            return localVarFp.postOfficeTemplate(file, locale, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  offices/1   offices/1?template=true   offices/1?fields=id,name,parentName
         * @summary Retrieve an Office
         * @param {number} officeId officeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveOffice(officeId: number, options?: any): AxiosPromise<GetOfficesResponse> {
            return localVarFp.retreiveOffice(officeId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  offices/template
         * @summary Retrieve Office Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOfficeTemplate(options?: any): AxiosPromise<GetOfficesTemplateResponse> {
            return localVarFp.retrieveOfficeTemplate(options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  offices   offices?fields=id,name,openingDate
         * @summary List Offices
         * @param {boolean} [includeAllOffices] includeAllOffices
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOffices(includeAllOffices?: boolean, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<Array<GetOfficesResponse>> {
            return localVarFp.retrieveOffices(includeAllOffices, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Office
         * @param {number} officeId officeId
         * @param {PutOfficesOfficeIdRequest} putOfficesOfficeIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOffice(officeId: number, putOfficesOfficeIdRequest: PutOfficesOfficeIdRequest, options?: any): AxiosPromise<PutOfficesOfficeIdResponse> {
            return localVarFp.updateOffice(officeId, putOfficesOfficeIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfficesApi - object-oriented interface
 * @export
 * @class OfficesApi
 * @extends {BaseAPI}
 */
export class OfficesApi extends BaseAPI {
    /**
     * Mandatory Fields name, openingDate, parentId
     * @summary Create an Office
     * @param {PostOfficesRequest} postOfficesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApi
     */
    public createOffice(postOfficesRequest: PostOfficesRequest, options?: any) {
        return OfficesApiFp(this.configuration).createOffice(postOfficesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApi
     */
    public getOfficeTemplate(dateFormat?: string, options?: any) {
        return OfficesApiFp(this.configuration).getOfficeTemplate(dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormDataContentDisposition} [file] 
     * @param {string} [locale] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApi
     */
    public postOfficeTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any) {
        return OfficesApiFp(this.configuration).postOfficeTemplate(file, locale, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  offices/1   offices/1?template=true   offices/1?fields=id,name,parentName
     * @summary Retrieve an Office
     * @param {number} officeId officeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApi
     */
    public retreiveOffice(officeId: number, options?: any) {
        return OfficesApiFp(this.configuration).retreiveOffice(officeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  offices/template
     * @summary Retrieve Office Details Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApi
     */
    public retrieveOfficeTemplate(options?: any) {
        return OfficesApiFp(this.configuration).retrieveOfficeTemplate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  offices   offices?fields=id,name,openingDate
     * @summary List Offices
     * @param {boolean} [includeAllOffices] includeAllOffices
     * @param {string} [orderBy] orderBy
     * @param {string} [sortOrder] sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApi
     */
    public retrieveOffices(includeAllOffices?: boolean, orderBy?: string, sortOrder?: string, options?: any) {
        return OfficesApiFp(this.configuration).retrieveOffices(includeAllOffices, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Office
     * @param {number} officeId officeId
     * @param {PutOfficesOfficeIdRequest} putOfficesOfficeIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApi
     */
    public updateOffice(officeId: number, putOfficesOfficeIdRequest: PutOfficesOfficeIdRequest, options?: any) {
        return OfficesApiFp(this.configuration).updateOffice(officeId, putOfficesOfficeIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
