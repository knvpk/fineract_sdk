/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteFixedDepositProductsProductIdResponse } from '../models';
// @ts-ignore
import { GetFixedDepositProductsProductIdResponse } from '../models';
// @ts-ignore
import { GetFixedDepositProductsResponse } from '../models';
// @ts-ignore
import { PostFixedDepositProductsRequest } from '../models';
// @ts-ignore
import { PostFixedDepositProductsResponse } from '../models';
// @ts-ignore
import { PutFixedDepositProductsProductIdRequest } from '../models';
// @ts-ignore
import { PutFixedDepositProductsProductIdResponse } from '../models';
/**
 * FixedDepositProductApi - axios parameter creator
 * @export
 */
export const FixedDepositProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Fixed Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, accountingRule  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, , withHoldTax, taxGroupId   Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId
         * @summary Create a Fixed Deposit Product
         * @param {PostFixedDepositProductsRequest} postFixedDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create11: async (postFixedDepositProductsRequest: PostFixedDepositProductsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postFixedDepositProductsRequest' is not null or undefined
            assertParamExists('create11', 'postFixedDepositProductsRequest', postFixedDepositProductsRequest)
            const localVarPath = `/fixeddepositproducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postFixedDepositProductsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Fixed Deposit Product
         * @summary Delete a Fixed Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete15: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('delete15', 'productId', productId)
            const localVarPath = `/fixeddepositproducts/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Fixed Deposit Products  Example Requests:  fixeddepositproducts   fixeddepositproducts?fields=name
         * @summary List Fixed Deposit Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll30: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fixeddepositproducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Fixed Deposit Product  Example Requests:  fixeddepositproducts/1   fixeddepositproducts/1?template=true   fixeddepositproducts/1?fields=name,description
         * @summary Retrieve a Fixed Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne19: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('retrieveOne19', 'productId', productId)
            const localVarPath = `/fixeddepositproducts/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate14: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fixeddepositproducts/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Fixed Deposit Product
         * @summary Update a Fixed Deposit Product
         * @param {number} productId productId
         * @param {PutFixedDepositProductsProductIdRequest} putFixedDepositProductsProductIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update16: async (productId: number, putFixedDepositProductsProductIdRequest: PutFixedDepositProductsProductIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('update16', 'productId', productId)
            // verify required parameter 'putFixedDepositProductsProductIdRequest' is not null or undefined
            assertParamExists('update16', 'putFixedDepositProductsProductIdRequest', putFixedDepositProductsProductIdRequest)
            const localVarPath = `/fixeddepositproducts/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putFixedDepositProductsProductIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FixedDepositProductApi - functional programming interface
 * @export
 */
export const FixedDepositProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FixedDepositProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Fixed Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, accountingRule  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, , withHoldTax, taxGroupId   Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId
         * @summary Create a Fixed Deposit Product
         * @param {PostFixedDepositProductsRequest} postFixedDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create11(postFixedDepositProductsRequest: PostFixedDepositProductsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostFixedDepositProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create11(postFixedDepositProductsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Fixed Deposit Product
         * @summary Delete a Fixed Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete15(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFixedDepositProductsProductIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete15(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists Fixed Deposit Products  Example Requests:  fixeddepositproducts   fixeddepositproducts?fields=name
         * @summary List Fixed Deposit Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll30(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetFixedDepositProductsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll30(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Fixed Deposit Product  Example Requests:  fixeddepositproducts/1   fixeddepositproducts/1?template=true   fixeddepositproducts/1?fields=name,description
         * @summary Retrieve a Fixed Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne19(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFixedDepositProductsProductIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne19(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTemplate14(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTemplate14(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Fixed Deposit Product
         * @summary Update a Fixed Deposit Product
         * @param {number} productId productId
         * @param {PutFixedDepositProductsProductIdRequest} putFixedDepositProductsProductIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update16(productId: number, putFixedDepositProductsProductIdRequest: PutFixedDepositProductsProductIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutFixedDepositProductsProductIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update16(productId, putFixedDepositProductsProductIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FixedDepositProductApi - factory interface
 * @export
 */
export const FixedDepositProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FixedDepositProductApiFp(configuration)
    return {
        /**
         * Creates a Fixed Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, accountingRule  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, , withHoldTax, taxGroupId   Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId
         * @summary Create a Fixed Deposit Product
         * @param {PostFixedDepositProductsRequest} postFixedDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create11(postFixedDepositProductsRequest: PostFixedDepositProductsRequest, options?: any): AxiosPromise<PostFixedDepositProductsResponse> {
            return localVarFp.create11(postFixedDepositProductsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Fixed Deposit Product
         * @summary Delete a Fixed Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete15(productId: number, options?: any): AxiosPromise<DeleteFixedDepositProductsProductIdResponse> {
            return localVarFp.delete15(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Fixed Deposit Products  Example Requests:  fixeddepositproducts   fixeddepositproducts?fields=name
         * @summary List Fixed Deposit Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll30(options?: any): AxiosPromise<Array<GetFixedDepositProductsResponse>> {
            return localVarFp.retrieveAll30(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Fixed Deposit Product  Example Requests:  fixeddepositproducts/1   fixeddepositproducts/1?template=true   fixeddepositproducts/1?fields=name,description
         * @summary Retrieve a Fixed Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne19(productId: number, options?: any): AxiosPromise<GetFixedDepositProductsProductIdResponse> {
            return localVarFp.retrieveOne19(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate14(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveTemplate14(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Fixed Deposit Product
         * @summary Update a Fixed Deposit Product
         * @param {number} productId productId
         * @param {PutFixedDepositProductsProductIdRequest} putFixedDepositProductsProductIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update16(productId: number, putFixedDepositProductsProductIdRequest: PutFixedDepositProductsProductIdRequest, options?: any): AxiosPromise<PutFixedDepositProductsProductIdResponse> {
            return localVarFp.update16(productId, putFixedDepositProductsProductIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FixedDepositProductApi - object-oriented interface
 * @export
 * @class FixedDepositProductApi
 * @extends {BaseAPI}
 */
export class FixedDepositProductApi extends BaseAPI {
    /**
     * Creates a Fixed Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, accountingRule  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, , withHoldTax, taxGroupId   Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId
     * @summary Create a Fixed Deposit Product
     * @param {PostFixedDepositProductsRequest} postFixedDepositProductsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FixedDepositProductApi
     */
    public create11(postFixedDepositProductsRequest: PostFixedDepositProductsRequest, options?: any) {
        return FixedDepositProductApiFp(this.configuration).create11(postFixedDepositProductsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Fixed Deposit Product
     * @summary Delete a Fixed Deposit Product
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FixedDepositProductApi
     */
    public delete15(productId: number, options?: any) {
        return FixedDepositProductApiFp(this.configuration).delete15(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists Fixed Deposit Products  Example Requests:  fixeddepositproducts   fixeddepositproducts?fields=name
     * @summary List Fixed Deposit Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FixedDepositProductApi
     */
    public retrieveAll30(options?: any) {
        return FixedDepositProductApiFp(this.configuration).retrieveAll30(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Fixed Deposit Product  Example Requests:  fixeddepositproducts/1   fixeddepositproducts/1?template=true   fixeddepositproducts/1?fields=name,description
     * @summary Retrieve a Fixed Deposit Product
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FixedDepositProductApi
     */
    public retrieveOne19(productId: number, options?: any) {
        return FixedDepositProductApiFp(this.configuration).retrieveOne19(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FixedDepositProductApi
     */
    public retrieveTemplate14(options?: any) {
        return FixedDepositProductApiFp(this.configuration).retrieveTemplate14(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Fixed Deposit Product
     * @summary Update a Fixed Deposit Product
     * @param {number} productId productId
     * @param {PutFixedDepositProductsProductIdRequest} putFixedDepositProductsProductIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FixedDepositProductApi
     */
    public update16(productId: number, putFixedDepositProductsProductIdRequest: PutFixedDepositProductsProductIdRequest, options?: any) {
        return FixedDepositProductApiFp(this.configuration).update16(productId, putFixedDepositProductsProductIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
