/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetJobsJobIDJobRunHistoryResponse } from '../models';
// @ts-ignore
import { GetJobsResponse } from '../models';
// @ts-ignore
import { PutJobsJobIDRequest } from '../models';
/**
 * MIFOSXBATCHJOBSApi - axios parameter creator
 * @export
 */
export const MIFOSXBATCHJOBSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Manually Execute Specific Job.
         * @summary Run a Job
         * @param {number} jobId jobId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeJob: async (jobId: number, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('executeJob', 'jobId', jobId)
            const localVarPath = `/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of jobs.  Example Requests:  jobs
         * @summary Retrieve Scheduler Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll8: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  jobs/5/runhistory?offset=0&limit=200
         * @summary Retrieve Job Run History
         * @param {number} jobId jobId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHistory: async (jobId: number, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('retrieveHistory', 'jobId', jobId)
            const localVarPath = `/jobs/{jobId}/runhistory`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a Job.  Example Requests:  jobs/5
         * @summary Retrieve a Job
         * @param {number} jobId jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne5: async (jobId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('retrieveOne5', 'jobId', jobId)
            const localVarPath = `/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of a job.
         * @summary Update a Job
         * @param {number} jobId jobId
         * @param {PutJobsJobIDRequest} putJobsJobIDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobDetail: async (jobId: number, putJobsJobIDRequest: PutJobsJobIDRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('updateJobDetail', 'jobId', jobId)
            // verify required parameter 'putJobsJobIDRequest' is not null or undefined
            assertParamExists('updateJobDetail', 'putJobsJobIDRequest', putJobsJobIDRequest)
            const localVarPath = `/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putJobsJobIDRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MIFOSXBATCHJOBSApi - functional programming interface
 * @export
 */
export const MIFOSXBATCHJOBSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MIFOSXBATCHJOBSApiAxiosParamCreator(configuration)
    return {
        /**
         * Manually Execute Specific Job.
         * @summary Run a Job
         * @param {number} jobId jobId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeJob(jobId: number, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeJob(jobId, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the list of jobs.  Example Requests:  jobs
         * @summary Retrieve Scheduler Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll8(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetJobsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll8(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  jobs/5/runhistory?offset=0&limit=200
         * @summary Retrieve Job Run History
         * @param {number} jobId jobId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveHistory(jobId: number, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetJobsJobIDJobRunHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveHistory(jobId, offset, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a Job.  Example Requests:  jobs/5
         * @summary Retrieve a Job
         * @param {number} jobId jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne5(jobId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne5(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the details of a job.
         * @summary Update a Job
         * @param {number} jobId jobId
         * @param {PutJobsJobIDRequest} putJobsJobIDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJobDetail(jobId: number, putJobsJobIDRequest: PutJobsJobIDRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJobDetail(jobId, putJobsJobIDRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MIFOSXBATCHJOBSApi - factory interface
 * @export
 */
export const MIFOSXBATCHJOBSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MIFOSXBATCHJOBSApiFp(configuration)
    return {
        /**
         * Manually Execute Specific Job.
         * @summary Run a Job
         * @param {number} jobId jobId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeJob(jobId: number, command?: string, options?: any): AxiosPromise<void> {
            return localVarFp.executeJob(jobId, command, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of jobs.  Example Requests:  jobs
         * @summary Retrieve Scheduler Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll8(options?: any): AxiosPromise<Array<GetJobsResponse>> {
            return localVarFp.retrieveAll8(options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  jobs/5/runhistory?offset=0&limit=200
         * @summary Retrieve Job Run History
         * @param {number} jobId jobId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHistory(jobId: number, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<GetJobsJobIDJobRunHistoryResponse> {
            return localVarFp.retrieveHistory(jobId, offset, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a Job.  Example Requests:  jobs/5
         * @summary Retrieve a Job
         * @param {number} jobId jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne5(jobId: number, options?: any): AxiosPromise<GetJobsResponse> {
            return localVarFp.retrieveOne5(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of a job.
         * @summary Update a Job
         * @param {number} jobId jobId
         * @param {PutJobsJobIDRequest} putJobsJobIDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobDetail(jobId: number, putJobsJobIDRequest: PutJobsJobIDRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateJobDetail(jobId, putJobsJobIDRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MIFOSXBATCHJOBSApi - object-oriented interface
 * @export
 * @class MIFOSXBATCHJOBSApi
 * @extends {BaseAPI}
 */
export class MIFOSXBATCHJOBSApi extends BaseAPI {
    /**
     * Manually Execute Specific Job.
     * @summary Run a Job
     * @param {number} jobId jobId
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MIFOSXBATCHJOBSApi
     */
    public executeJob(jobId: number, command?: string, options?: any) {
        return MIFOSXBATCHJOBSApiFp(this.configuration).executeJob(jobId, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of jobs.  Example Requests:  jobs
     * @summary Retrieve Scheduler Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MIFOSXBATCHJOBSApi
     */
    public retrieveAll8(options?: any) {
        return MIFOSXBATCHJOBSApiFp(this.configuration).retrieveAll8(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  jobs/5/runhistory?offset=0&limit=200
     * @summary Retrieve Job Run History
     * @param {number} jobId jobId
     * @param {number} [offset] offset
     * @param {number} [limit] limit
     * @param {string} [orderBy] orderBy
     * @param {string} [sortOrder] sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MIFOSXBATCHJOBSApi
     */
    public retrieveHistory(jobId: number, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return MIFOSXBATCHJOBSApiFp(this.configuration).retrieveHistory(jobId, offset, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a Job.  Example Requests:  jobs/5
     * @summary Retrieve a Job
     * @param {number} jobId jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MIFOSXBATCHJOBSApi
     */
    public retrieveOne5(jobId: number, options?: any) {
        return MIFOSXBATCHJOBSApiFp(this.configuration).retrieveOne5(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of a job.
     * @summary Update a Job
     * @param {number} jobId jobId
     * @param {PutJobsJobIDRequest} putJobsJobIDRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MIFOSXBATCHJOBSApi
     */
    public updateJobDetail(jobId: number, putJobsJobIDRequest: PutJobsJobIDRequest, options?: any) {
        return MIFOSXBATCHJOBSApiFp(this.configuration).updateJobDetail(jobId, putJobsJobIDRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
