/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteTemplatesTemplateIdResponse } from '../models';
// @ts-ignore
import { GetTemplatesResponse } from '../models';
// @ts-ignore
import { GetTemplatesTemplateIdResponse } from '../models';
// @ts-ignore
import { GetTemplatesTemplateResponse } from '../models';
// @ts-ignore
import { PostTemplatesRequest } from '../models';
// @ts-ignore
import { PostTemplatesResponse } from '../models';
// @ts-ignore
import { PutTemplatesTemplateIdRequest } from '../models';
// @ts-ignore
import { PutTemplatesTemplateIdResponse } from '../models';
/**
 * UserGeneratedDocumentsApi - axios parameter creator
 * @export
 */
export const UserGeneratedDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new UGD.  Mandatory Fields name    Example Requests:  templates/1
         * @summary Add a UGD
         * @param {PostTemplatesRequest} postTemplatesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (postTemplatesRequest: PostTemplatesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTemplatesRequest' is not null or undefined
            assertParamExists('createTemplate', 'postTemplatesRequest', postTemplatesRequest)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTemplatesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a UGD
         * @param {number} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (templateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteTemplate', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateByTemplate: async (templateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getTemplateByTemplate', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}/template`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} templateId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeTemplate: async (templateId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('mergeTemplate', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  templates  It is also possible to get specific UGDs by entity and type:  templates?type=0&entity=0 [Entity: Id]      client: 0, loan: 1  [Type: Id]    Document: 0, E-Mail (not yet): 1,  SMS: 2
         * @summary Retrieve all UGDs
         * @param {number} [typeId] typeId
         * @param {number} [entityId] entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll40: async (typeId?: number, entityId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (typeId !== undefined) {
                localVarQueryParameter['typeId'] = typeId;
            }

            if (entityId !== undefined) {
                localVarQueryParameter['entityId'] = entityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  templates/1
         * @summary Retrieve a UGD
         * @param {number} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne28: async (templateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('retrieveOne28', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a UGD
         * @param {number} templateId templateId
         * @param {PutTemplatesTemplateIdRequest} putTemplatesTemplateIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTemplate: async (templateId: number, putTemplatesTemplateIdRequest: PutTemplatesTemplateIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('saveTemplate', 'templateId', templateId)
            // verify required parameter 'putTemplatesTemplateIdRequest' is not null or undefined
            assertParamExists('saveTemplate', 'putTemplatesTemplateIdRequest', putTemplatesTemplateIdRequest)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putTemplatesTemplateIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for UGDs. The UGD data returned consists of any or all of:  ARGUMENTS name String entity String type String text String optional mappers Mapper optional Example Request:  templates/template
         * @summary Retrieve UGD Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template20: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserGeneratedDocumentsApi - functional programming interface
 * @export
 */
export const UserGeneratedDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserGeneratedDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new UGD.  Mandatory Fields name    Example Requests:  templates/1
         * @summary Add a UGD
         * @param {PostTemplatesRequest} postTemplatesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(postTemplatesRequest: PostTemplatesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostTemplatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(postTemplatesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a UGD
         * @param {number} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(templateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteTemplatesTemplateIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplateByTemplate(templateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplateByTemplate(templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} templateId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeTemplate(templateId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergeTemplate(templateId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  templates  It is also possible to get specific UGDs by entity and type:  templates?type=0&entity=0 [Entity: Id]      client: 0, loan: 1  [Type: Id]    Document: 0, E-Mail (not yet): 1,  SMS: 2
         * @summary Retrieve all UGDs
         * @param {number} [typeId] typeId
         * @param {number} [entityId] entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll40(typeId?: number, entityId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTemplatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll40(typeId, entityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  templates/1
         * @summary Retrieve a UGD
         * @param {number} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne28(templateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTemplatesTemplateIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne28(templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a UGD
         * @param {number} templateId templateId
         * @param {PutTemplatesTemplateIdRequest} putTemplatesTemplateIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveTemplate(templateId: number, putTemplatesTemplateIdRequest: PutTemplatesTemplateIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutTemplatesTemplateIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveTemplate(templateId, putTemplatesTemplateIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for UGDs. The UGD data returned consists of any or all of:  ARGUMENTS name String entity String type String text String optional mappers Mapper optional Example Request:  templates/template
         * @summary Retrieve UGD Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async template20(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTemplatesTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.template20(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserGeneratedDocumentsApi - factory interface
 * @export
 */
export const UserGeneratedDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserGeneratedDocumentsApiFp(configuration)
    return {
        /**
         * Adds a new UGD.  Mandatory Fields name    Example Requests:  templates/1
         * @summary Add a UGD
         * @param {PostTemplatesRequest} postTemplatesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(postTemplatesRequest: PostTemplatesRequest, options?: any): AxiosPromise<PostTemplatesResponse> {
            return localVarFp.createTemplate(postTemplatesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a UGD
         * @param {number} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(templateId: number, options?: any): AxiosPromise<DeleteTemplatesTemplateIdResponse> {
            return localVarFp.deleteTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateByTemplate(templateId: number, options?: any): AxiosPromise<string> {
            return localVarFp.getTemplateByTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} templateId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeTemplate(templateId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.mergeTemplate(templateId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  templates  It is also possible to get specific UGDs by entity and type:  templates?type=0&entity=0 [Entity: Id]      client: 0, loan: 1  [Type: Id]    Document: 0, E-Mail (not yet): 1,  SMS: 2
         * @summary Retrieve all UGDs
         * @param {number} [typeId] typeId
         * @param {number} [entityId] entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll40(typeId?: number, entityId?: number, options?: any): AxiosPromise<GetTemplatesResponse> {
            return localVarFp.retrieveAll40(typeId, entityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  templates/1
         * @summary Retrieve a UGD
         * @param {number} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne28(templateId: number, options?: any): AxiosPromise<GetTemplatesTemplateIdResponse> {
            return localVarFp.retrieveOne28(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a UGD
         * @param {number} templateId templateId
         * @param {PutTemplatesTemplateIdRequest} putTemplatesTemplateIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTemplate(templateId: number, putTemplatesTemplateIdRequest: PutTemplatesTemplateIdRequest, options?: any): AxiosPromise<PutTemplatesTemplateIdResponse> {
            return localVarFp.saveTemplate(templateId, putTemplatesTemplateIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for UGDs. The UGD data returned consists of any or all of:  ARGUMENTS name String entity String type String text String optional mappers Mapper optional Example Request:  templates/template
         * @summary Retrieve UGD Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template20(options?: any): AxiosPromise<GetTemplatesTemplateResponse> {
            return localVarFp.template20(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserGeneratedDocumentsApi - object-oriented interface
 * @export
 * @class UserGeneratedDocumentsApi
 * @extends {BaseAPI}
 */
export class UserGeneratedDocumentsApi extends BaseAPI {
    /**
     * Adds a new UGD.  Mandatory Fields name    Example Requests:  templates/1
     * @summary Add a UGD
     * @param {PostTemplatesRequest} postTemplatesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public createTemplate(postTemplatesRequest: PostTemplatesRequest, options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).createTemplate(postTemplatesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a UGD
     * @param {number} templateId templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public deleteTemplate(templateId: number, options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).deleteTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public getTemplateByTemplate(templateId: number, options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).getTemplateByTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} templateId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public mergeTemplate(templateId: number, body?: string, options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).mergeTemplate(templateId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  templates  It is also possible to get specific UGDs by entity and type:  templates?type=0&entity=0 [Entity: Id]      client: 0, loan: 1  [Type: Id]    Document: 0, E-Mail (not yet): 1,  SMS: 2
     * @summary Retrieve all UGDs
     * @param {number} [typeId] typeId
     * @param {number} [entityId] entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public retrieveAll40(typeId?: number, entityId?: number, options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).retrieveAll40(typeId, entityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  templates/1
     * @summary Retrieve a UGD
     * @param {number} templateId templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public retrieveOne28(templateId: number, options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).retrieveOne28(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a UGD
     * @param {number} templateId templateId
     * @param {PutTemplatesTemplateIdRequest} putTemplatesTemplateIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public saveTemplate(templateId: number, putTemplatesTemplateIdRequest: PutTemplatesTemplateIdRequest, options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).saveTemplate(templateId, putTemplatesTemplateIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for UGDs. The UGD data returned consists of any or all of:  ARGUMENTS name String entity String type String text String optional mappers Mapper optional Example Request:  templates/template
     * @summary Retrieve UGD Details Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGeneratedDocumentsApi
     */
    public template20(options?: any) {
        return UserGeneratedDocumentsApiFp(this.configuration).template20(options).then((request) => request(this.axios, this.basePath));
    }
}
