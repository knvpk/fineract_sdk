/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteResourceTypeResourceIdNotesNoteIdResponse } from '../models';
// @ts-ignore
import { GetResourceTypeResourceIdNotesNoteIdResponse } from '../models';
// @ts-ignore
import { GetResourceTypeResourceIdNotesResponse } from '../models';
// @ts-ignore
import { PostResourceTypeResourceIdNotesRequest } from '../models';
// @ts-ignore
import { PostResourceTypeResourceIdNotesResponse } from '../models';
// @ts-ignore
import { PutResourceTypeResourceIdNotesNoteIdRequest } from '../models';
// @ts-ignore
import { PutResourceTypeResourceIdNotesNoteIdResponse } from '../models';
/**
 * NotesApi - axios parameter creator
 * @export
 */
export const NotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes
         * @summary Add a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {PostResourceTypeResourceIdNotesRequest} postResourceTypeResourceIdNotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewNote: async (resourceType: string, resourceId: number, postResourceTypeResourceIdNotesRequest: PostResourceTypeResourceIdNotesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('addNewNote', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('addNewNote', 'resourceId', resourceId)
            // verify required parameter 'postResourceTypeResourceIdNotesRequest' is not null or undefined
            assertParamExists('addNewNote', 'postResourceTypeResourceIdNotesRequest', postResourceTypeResourceIdNotesRequest)
            const localVarPath = `/{resourceType}/{resourceId}/notes`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postResourceTypeResourceIdNotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Resource Note
         * @summary Delete a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote: async (resourceType: string, resourceId: number, noteId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('deleteNote', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('deleteNote', 'resourceId', resourceId)
            // verify required parameter 'noteId' is not null or undefined
            assertParamExists('deleteNote', 'noteId', noteId)
            const localVarPath = `/{resourceType}/{resourceId}/notes/{noteId}`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields=note,createdOn,createdByUsername   groups/1/notes/20?fields=note,createdOn,createdByUsername
         * @summary Retrieve a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNote: async (resourceType: string, resourceId: number, noteId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('retrieveNote', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('retrieveNote', 'resourceId', resourceId)
            // verify required parameter 'noteId' is not null or undefined
            assertParamExists('retrieveNote', 'noteId', noteId)
            const localVarPath = `/{resourceType}/{resourceId}/notes/{noteId}`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Resource\'s Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields=note,createdOn,createdByUsername
         * @summary Retrieve a Resource\'s description
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNotesByResource: async (resourceType: string, resourceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('retrieveNotesByResource', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('retrieveNotesByResource', 'resourceId', resourceId)
            const localVarPath = `/{resourceType}/{resourceId}/notes`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Resource Note
         * @summary Update a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {PutResourceTypeResourceIdNotesNoteIdRequest} putResourceTypeResourceIdNotesNoteIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote: async (resourceType: string, resourceId: number, noteId: number, putResourceTypeResourceIdNotesNoteIdRequest: PutResourceTypeResourceIdNotesNoteIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('updateNote', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateNote', 'resourceId', resourceId)
            // verify required parameter 'noteId' is not null or undefined
            assertParamExists('updateNote', 'noteId', noteId)
            // verify required parameter 'putResourceTypeResourceIdNotesNoteIdRequest' is not null or undefined
            assertParamExists('updateNote', 'putResourceTypeResourceIdNotesNoteIdRequest', putResourceTypeResourceIdNotesNoteIdRequest)
            const localVarPath = `/{resourceType}/{resourceId}/notes/{noteId}`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putResourceTypeResourceIdNotesNoteIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotesApi - functional programming interface
 * @export
 */
export const NotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes
         * @summary Add a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {PostResourceTypeResourceIdNotesRequest} postResourceTypeResourceIdNotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewNote(resourceType: string, resourceId: number, postResourceTypeResourceIdNotesRequest: PostResourceTypeResourceIdNotesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostResourceTypeResourceIdNotesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewNote(resourceType, resourceId, postResourceTypeResourceIdNotesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Resource Note
         * @summary Delete a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNote(resourceType: string, resourceId: number, noteId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResourceTypeResourceIdNotesNoteIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNote(resourceType, resourceId, noteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields=note,createdOn,createdByUsername   groups/1/notes/20?fields=note,createdOn,createdByUsername
         * @summary Retrieve a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveNote(resourceType: string, resourceId: number, noteId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetResourceTypeResourceIdNotesNoteIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveNote(resourceType, resourceId, noteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Resource\'s Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields=note,createdOn,createdByUsername
         * @summary Retrieve a Resource\'s description
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveNotesByResource(resourceType: string, resourceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetResourceTypeResourceIdNotesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveNotesByResource(resourceType, resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Resource Note
         * @summary Update a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {PutResourceTypeResourceIdNotesNoteIdRequest} putResourceTypeResourceIdNotesNoteIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNote(resourceType: string, resourceId: number, noteId: number, putResourceTypeResourceIdNotesNoteIdRequest: PutResourceTypeResourceIdNotesNoteIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutResourceTypeResourceIdNotesNoteIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNote(resourceType, resourceId, noteId, putResourceTypeResourceIdNotesNoteIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotesApi - factory interface
 * @export
 */
export const NotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotesApiFp(configuration)
    return {
        /**
         * Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes
         * @summary Add a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {PostResourceTypeResourceIdNotesRequest} postResourceTypeResourceIdNotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewNote(resourceType: string, resourceId: number, postResourceTypeResourceIdNotesRequest: PostResourceTypeResourceIdNotesRequest, options?: any): AxiosPromise<PostResourceTypeResourceIdNotesResponse> {
            return localVarFp.addNewNote(resourceType, resourceId, postResourceTypeResourceIdNotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Resource Note
         * @summary Delete a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote(resourceType: string, resourceId: number, noteId: number, options?: any): AxiosPromise<DeleteResourceTypeResourceIdNotesNoteIdResponse> {
            return localVarFp.deleteNote(resourceType, resourceId, noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields=note,createdOn,createdByUsername   groups/1/notes/20?fields=note,createdOn,createdByUsername
         * @summary Retrieve a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNote(resourceType: string, resourceId: number, noteId: number, options?: any): AxiosPromise<GetResourceTypeResourceIdNotesNoteIdResponse> {
            return localVarFp.retrieveNote(resourceType, resourceId, noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Resource\'s Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields=note,createdOn,createdByUsername
         * @summary Retrieve a Resource\'s description
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveNotesByResource(resourceType: string, resourceId: number, options?: any): AxiosPromise<Array<GetResourceTypeResourceIdNotesResponse>> {
            return localVarFp.retrieveNotesByResource(resourceType, resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Resource Note
         * @summary Update a Resource Note
         * @param {string} resourceType resourceType
         * @param {number} resourceId resourceId
         * @param {number} noteId noteId
         * @param {PutResourceTypeResourceIdNotesNoteIdRequest} putResourceTypeResourceIdNotesNoteIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote(resourceType: string, resourceId: number, noteId: number, putResourceTypeResourceIdNotesNoteIdRequest: PutResourceTypeResourceIdNotesNoteIdRequest, options?: any): AxiosPromise<PutResourceTypeResourceIdNotesNoteIdResponse> {
            return localVarFp.updateNote(resourceType, resourceId, noteId, putResourceTypeResourceIdNotesNoteIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotesApi - object-oriented interface
 * @export
 * @class NotesApi
 * @extends {BaseAPI}
 */
export class NotesApi extends BaseAPI {
    /**
     * Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes
     * @summary Add a Resource Note
     * @param {string} resourceType resourceType
     * @param {number} resourceId resourceId
     * @param {PostResourceTypeResourceIdNotesRequest} postResourceTypeResourceIdNotesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public addNewNote(resourceType: string, resourceId: number, postResourceTypeResourceIdNotesRequest: PostResourceTypeResourceIdNotesRequest, options?: any) {
        return NotesApiFp(this.configuration).addNewNote(resourceType, resourceId, postResourceTypeResourceIdNotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Resource Note
     * @summary Delete a Resource Note
     * @param {string} resourceType resourceType
     * @param {number} resourceId resourceId
     * @param {number} noteId noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public deleteNote(resourceType: string, resourceId: number, noteId: number, options?: any) {
        return NotesApiFp(this.configuration).deleteNote(resourceType, resourceId, noteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields=note,createdOn,createdByUsername   groups/1/notes/20?fields=note,createdOn,createdByUsername
     * @summary Retrieve a Resource Note
     * @param {string} resourceType resourceType
     * @param {number} resourceId resourceId
     * @param {number} noteId noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public retrieveNote(resourceType: string, resourceId: number, noteId: number, options?: any) {
        return NotesApiFp(this.configuration).retrieveNote(resourceType, resourceId, noteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Resource\'s Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields=note,createdOn,createdByUsername
     * @summary Retrieve a Resource\'s description
     * @param {string} resourceType resourceType
     * @param {number} resourceId resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public retrieveNotesByResource(resourceType: string, resourceId: number, options?: any) {
        return NotesApiFp(this.configuration).retrieveNotesByResource(resourceType, resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Resource Note
     * @summary Update a Resource Note
     * @param {string} resourceType resourceType
     * @param {number} resourceId resourceId
     * @param {number} noteId noteId
     * @param {PutResourceTypeResourceIdNotesNoteIdRequest} putResourceTypeResourceIdNotesNoteIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public updateNote(resourceType: string, resourceId: number, noteId: number, putResourceTypeResourceIdNotesNoteIdRequest: PutResourceTypeResourceIdNotesNoteIdRequest, options?: any) {
        return NotesApiFp(this.configuration).updateNote(resourceType, resourceId, noteId, putResourceTypeResourceIdNotesNoteIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
