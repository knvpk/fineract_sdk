/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteLoansLoanIdCollateralsCollateralIdResponse } from '../models';
// @ts-ignore
import { GetLoansLoanIdCollateralsResponse } from '../models';
// @ts-ignore
import { GetLoansLoanIdCollateralsTemplateResponse } from '../models';
// @ts-ignore
import { PostLoansLoanIdCollateralsRequest } from '../models';
// @ts-ignore
import { PostLoansLoanIdCollateralsResponse } from '../models';
// @ts-ignore
import { PutLoansLoanIdCollateralsCollateralIdResponse } from '../models';
// @ts-ignore
import { PutLoansLoandIdCollateralsCollateralIdRequest } from '../models';
/**
 * LoanCollateralApi - axios parameter creator
 * @export
 */
export const LoanCollateralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Note: Currently, Collaterals may be added only before a Loan is approved
         * @summary Create a Collateral
         * @param {number} loanId loanId
         * @param {PostLoansLoanIdCollateralsRequest} postLoansLoanIdCollateralsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollateral: async (loanId: number, postLoansLoanIdCollateralsRequest: PostLoansLoanIdCollateralsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanId' is not null or undefined
            assertParamExists('createCollateral', 'loanId', loanId)
            // verify required parameter 'postLoansLoanIdCollateralsRequest' is not null or undefined
            assertParamExists('createCollateral', 'postLoansLoanIdCollateralsRequest', postLoansLoanIdCollateralsRequest)
            const localVarPath = `/loans/{loanId}/collaterals`
                .replace(`{${"loanId"}}`, encodeURIComponent(String(loanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLoansLoanIdCollateralsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: A collateral can only be removed from Loans that are not yet approved.
         * @summary Remove a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollateral: async (loanId: number, collateralId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanId' is not null or undefined
            assertParamExists('deleteCollateral', 'loanId', loanId)
            // verify required parameter 'collateralId' is not null or undefined
            assertParamExists('deleteCollateral', 'collateralId', collateralId)
            const localVarPath = `/loans/{loanId}/collaterals/{collateralId}`
                .replace(`{${"loanId"}}`, encodeURIComponent(String(loanId)))
                .replace(`{${"collateralId"}}`, encodeURIComponent(String(collateralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/collaterals/template
         * @summary Retrieve Collateral Details Template
         * @param {number} loanId loanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newCollateralTemplate: async (loanId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanId' is not null or undefined
            assertParamExists('newCollateralTemplate', 'loanId', loanId)
            const localVarPath = `/loans/{loanId}/collaterals/template`
                .replace(`{${"loanId"}}`, encodeURIComponent(String(loanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  loans/1/collaterals   loans/1/collaterals?fields=value,description
         * @summary List Loan Collaterals
         * @param {number} loanId loanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollateralDetails: async (loanId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanId' is not null or undefined
            assertParamExists('retrieveCollateralDetails', 'loanId', loanId)
            const localVarPath = `/loans/{loanId}/collaterals`
                .replace(`{${"loanId"}}`, encodeURIComponent(String(loanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  /loans/1/collaterals/1   /loans/1/collaterals/1?fields=description,description
         * @summary Retrieve a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollateralDetails1: async (loanId: number, collateralId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanId' is not null or undefined
            assertParamExists('retrieveCollateralDetails1', 'loanId', loanId)
            // verify required parameter 'collateralId' is not null or undefined
            assertParamExists('retrieveCollateralDetails1', 'collateralId', collateralId)
            const localVarPath = `/loans/{loanId}/collaterals/{collateralId}`
                .replace(`{${"loanId"}}`, encodeURIComponent(String(loanId)))
                .replace(`{${"collateralId"}}`, encodeURIComponent(String(collateralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {PutLoansLoandIdCollateralsCollateralIdRequest} putLoansLoandIdCollateralsCollateralIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollateral: async (loanId: number, collateralId: number, putLoansLoandIdCollateralsCollateralIdRequest: PutLoansLoandIdCollateralsCollateralIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanId' is not null or undefined
            assertParamExists('updateCollateral', 'loanId', loanId)
            // verify required parameter 'collateralId' is not null or undefined
            assertParamExists('updateCollateral', 'collateralId', collateralId)
            // verify required parameter 'putLoansLoandIdCollateralsCollateralIdRequest' is not null or undefined
            assertParamExists('updateCollateral', 'putLoansLoandIdCollateralsCollateralIdRequest', putLoansLoandIdCollateralsCollateralIdRequest)
            const localVarPath = `/loans/{loanId}/collaterals/{collateralId}`
                .replace(`{${"loanId"}}`, encodeURIComponent(String(loanId)))
                .replace(`{${"collateralId"}}`, encodeURIComponent(String(collateralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putLoansLoandIdCollateralsCollateralIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoanCollateralApi - functional programming interface
 * @export
 */
export const LoanCollateralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoanCollateralApiAxiosParamCreator(configuration)
    return {
        /**
         * Note: Currently, Collaterals may be added only before a Loan is approved
         * @summary Create a Collateral
         * @param {number} loanId loanId
         * @param {PostLoansLoanIdCollateralsRequest} postLoansLoanIdCollateralsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCollateral(loanId: number, postLoansLoanIdCollateralsRequest: PostLoansLoanIdCollateralsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostLoansLoanIdCollateralsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCollateral(loanId, postLoansLoanIdCollateralsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: A collateral can only be removed from Loans that are not yet approved.
         * @summary Remove a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollateral(loanId: number, collateralId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteLoansLoanIdCollateralsCollateralIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCollateral(loanId, collateralId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/collaterals/template
         * @summary Retrieve Collateral Details Template
         * @param {number} loanId loanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newCollateralTemplate(loanId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoansLoanIdCollateralsTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newCollateralTemplate(loanId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  loans/1/collaterals   loans/1/collaterals?fields=value,description
         * @summary List Loan Collaterals
         * @param {number} loanId loanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCollateralDetails(loanId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLoansLoanIdCollateralsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCollateralDetails(loanId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  /loans/1/collaterals/1   /loans/1/collaterals/1?fields=description,description
         * @summary Retrieve a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCollateralDetails1(loanId: number, collateralId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLoansLoanIdCollateralsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCollateralDetails1(loanId, collateralId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {PutLoansLoandIdCollateralsCollateralIdRequest} putLoansLoandIdCollateralsCollateralIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollateral(loanId: number, collateralId: number, putLoansLoandIdCollateralsCollateralIdRequest: PutLoansLoandIdCollateralsCollateralIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutLoansLoanIdCollateralsCollateralIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollateral(loanId, collateralId, putLoansLoandIdCollateralsCollateralIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoanCollateralApi - factory interface
 * @export
 */
export const LoanCollateralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoanCollateralApiFp(configuration)
    return {
        /**
         * Note: Currently, Collaterals may be added only before a Loan is approved
         * @summary Create a Collateral
         * @param {number} loanId loanId
         * @param {PostLoansLoanIdCollateralsRequest} postLoansLoanIdCollateralsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollateral(loanId: number, postLoansLoanIdCollateralsRequest: PostLoansLoanIdCollateralsRequest, options?: any): AxiosPromise<PostLoansLoanIdCollateralsResponse> {
            return localVarFp.createCollateral(loanId, postLoansLoanIdCollateralsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: A collateral can only be removed from Loans that are not yet approved.
         * @summary Remove a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollateral(loanId: number, collateralId: number, options?: any): AxiosPromise<DeleteLoansLoanIdCollateralsCollateralIdResponse> {
            return localVarFp.deleteCollateral(loanId, collateralId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/collaterals/template
         * @summary Retrieve Collateral Details Template
         * @param {number} loanId loanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newCollateralTemplate(loanId: number, options?: any): AxiosPromise<GetLoansLoanIdCollateralsTemplateResponse> {
            return localVarFp.newCollateralTemplate(loanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  loans/1/collaterals   loans/1/collaterals?fields=value,description
         * @summary List Loan Collaterals
         * @param {number} loanId loanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollateralDetails(loanId: number, options?: any): AxiosPromise<Array<GetLoansLoanIdCollateralsResponse>> {
            return localVarFp.retrieveCollateralDetails(loanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  /loans/1/collaterals/1   /loans/1/collaterals/1?fields=description,description
         * @summary Retrieve a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollateralDetails1(loanId: number, collateralId: number, options?: any): AxiosPromise<GetLoansLoanIdCollateralsResponse> {
            return localVarFp.retrieveCollateralDetails1(loanId, collateralId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Collateral
         * @param {number} loanId loanId
         * @param {number} collateralId collateralId
         * @param {PutLoansLoandIdCollateralsCollateralIdRequest} putLoansLoandIdCollateralsCollateralIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollateral(loanId: number, collateralId: number, putLoansLoandIdCollateralsCollateralIdRequest: PutLoansLoandIdCollateralsCollateralIdRequest, options?: any): AxiosPromise<PutLoansLoanIdCollateralsCollateralIdResponse> {
            return localVarFp.updateCollateral(loanId, collateralId, putLoansLoandIdCollateralsCollateralIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoanCollateralApi - object-oriented interface
 * @export
 * @class LoanCollateralApi
 * @extends {BaseAPI}
 */
export class LoanCollateralApi extends BaseAPI {
    /**
     * Note: Currently, Collaterals may be added only before a Loan is approved
     * @summary Create a Collateral
     * @param {number} loanId loanId
     * @param {PostLoansLoanIdCollateralsRequest} postLoansLoanIdCollateralsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoanCollateralApi
     */
    public createCollateral(loanId: number, postLoansLoanIdCollateralsRequest: PostLoansLoanIdCollateralsRequest, options?: any) {
        return LoanCollateralApiFp(this.configuration).createCollateral(loanId, postLoansLoanIdCollateralsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: A collateral can only be removed from Loans that are not yet approved.
     * @summary Remove a Collateral
     * @param {number} loanId loanId
     * @param {number} collateralId collateralId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoanCollateralApi
     */
    public deleteCollateral(loanId: number, collateralId: number, options?: any) {
        return LoanCollateralApiFp(this.configuration).deleteCollateral(loanId, collateralId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/collaterals/template
     * @summary Retrieve Collateral Details Template
     * @param {number} loanId loanId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoanCollateralApi
     */
    public newCollateralTemplate(loanId: number, options?: any) {
        return LoanCollateralApiFp(this.configuration).newCollateralTemplate(loanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  loans/1/collaterals   loans/1/collaterals?fields=value,description
     * @summary List Loan Collaterals
     * @param {number} loanId loanId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoanCollateralApi
     */
    public retrieveCollateralDetails(loanId: number, options?: any) {
        return LoanCollateralApiFp(this.configuration).retrieveCollateralDetails(loanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  /loans/1/collaterals/1   /loans/1/collaterals/1?fields=description,description
     * @summary Retrieve a Collateral
     * @param {number} loanId loanId
     * @param {number} collateralId collateralId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoanCollateralApi
     */
    public retrieveCollateralDetails1(loanId: number, collateralId: number, options?: any) {
        return LoanCollateralApiFp(this.configuration).retrieveCollateralDetails1(loanId, collateralId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Collateral
     * @param {number} loanId loanId
     * @param {number} collateralId collateralId
     * @param {PutLoansLoandIdCollateralsCollateralIdRequest} putLoansLoandIdCollateralsCollateralIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoanCollateralApi
     */
    public updateCollateral(loanId: number, collateralId: number, putLoansLoandIdCollateralsCollateralIdRequest: PutLoansLoandIdCollateralsCollateralIdRequest, options?: any) {
        return LoanCollateralApiFp(this.configuration).updateCollateral(loanId, collateralId, putLoansLoandIdCollateralsCollateralIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
