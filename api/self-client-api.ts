/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FormDataBodyPart } from '../models';
// @ts-ignore
import { GetSelfClientsClientIdAccountsResponse } from '../models';
// @ts-ignore
import { GetSelfClientsClientIdChargesChargeIdResponse } from '../models';
// @ts-ignore
import { GetSelfClientsClientIdChargesResponse } from '../models';
// @ts-ignore
import { GetSelfClientsClientIdResponse } from '../models';
// @ts-ignore
import { GetSelfClientsClientIdTransactionsResponse } from '../models';
// @ts-ignore
import { GetSelfClientsClientIdTransactionsTransactionIdResponse } from '../models';
// @ts-ignore
import { GetSelfClientsResponse } from '../models';
/**
 * SelfClientApi - axios parameter creator
 * @export
 */
export const SelfClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} clientId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClientImage2: async (clientId: number, contentLength?: number, file?: FormDataBodyPart, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('addNewClientImage2', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}/images`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (contentLength !== undefined && contentLength !== null) {
                localVarHeaderParameter['Content-Length'] = String(JSON.stringify(contentLength));
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientImage1: async (clientId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('deleteClientImage1', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}/images`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The list capability of clients can support pagination and sorting.  Example Requests:  self/clients  self/clients?fields=displayName,officeName  self/clients?offset=10&limit=50  self/clients?orderBy=displayName&sortOrder=DESC
         * @summary List Clients associated to the user
         * @param {string} [displayName] displayName
         * @param {string} [firstName] firstName
         * @param {string} [lastName] lastName
         * @param {number} [offset] offset
         * @param {string} [status] status
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll36: async (displayName?: string, firstName?: string, lastName?: string, offset?: number, status?: string, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/self/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The list capability of client charges supports pagination.  Example Requests:  self/clients/1/charges  self/clients/1/charges?offset=0&limit=5
         * @summary List Client Charges
         * @param {number} clientId clientId
         * @param {string} [chargeStatus] chargeStatus
         * @param {boolean} [pendingPayment] pendingPayment
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClientCharges1: async (clientId: number, chargeStatus?: string, pendingPayment?: boolean, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveAllClientCharges1', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}/charges`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (chargeStatus !== undefined) {
                localVarQueryParameter['chargeStatus'] = chargeStatus;
            }

            if (pendingPayment !== undefined) {
                localVarQueryParameter['pendingPayment'] = pendingPayment;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The list capability of client transaction can support pagination.  Example Requests:  self/clients/189/transactions  self/clients/189/transactions?offset=10&limit=50
         * @summary List Client Transactions
         * @param {number} clientId clientId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClientTransactions1: async (clientId: number, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveAllClientTransactions1', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}/transactions`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An example of how a loan portfolio summary can be provided. This is requested in a specific use case of the community application. It is quite reasonable to add resources like this to simplify User Interface development.  Example Requests:  self/clients/1/accounts   self/clients/1/accounts?fields=loanAccounts,savingsAccounts
         * @summary Retrieve client accounts overview
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAssociatedAccounts1: async (clientId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveAssociatedAccounts1', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}/accounts`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Client Charge  Example Requests:  self/clients/1/charges/1   self/clients/1/charges/1?fields=name,id
         * @summary Retrieve a Client Charge
         * @param {number} clientId clientId
         * @param {number} chargeId chargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveClientCharge1: async (clientId: number, chargeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveClientCharge1', 'clientId', clientId)
            // verify required parameter 'chargeId' is not null or undefined
            assertParamExists('retrieveClientCharge1', 'chargeId', chargeId)
            const localVarPath = `/self/clients/{clientId}/charges/{chargeId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"chargeId"}}`, encodeURIComponent(String(chargeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Client TransactionExample Requests:  self/clients/1/transactions/1   self/clients/1/transactions/1?fields=id,officeName
         * @summary Retrieve a Client Transaction
         * @param {number} clientId clientId
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveClientTransaction1: async (clientId: number, transactionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveClientTransaction1', 'clientId', clientId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('retrieveClientTransaction1', 'transactionId', transactionId)
            const localVarPath = `/self/clients/{clientId}/transactions/{transactionId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Optional arguments are identical to those of Get Image associated with an Entity (Binary file)  Example Requests:  self/clients/1/images
         * @summary Retrieve Client Image
         * @param {number} clientId clientId
         * @param {number} [maxWidth] 
         * @param {number} [maxHeight] 
         * @param {string} [output] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveImage1: async (clientId: number, maxWidth?: number, maxHeight?: number, output?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveImage1', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}/images`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveObligeeDetails1: async (clientId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveObligeeDetails1', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}/obligeedetails`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Client  Example Requests:  self/clients/1  self/clients/1?fields=id,displayName,officeName
         * @summary Retrieve a Client
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne26: async (clientId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveOne26', 'clientId', clientId)
            const localVarPath = `/self/clients/{clientId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SelfClientApi - functional programming interface
 * @export
 */
export const SelfClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SelfClientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} clientId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewClientImage2(clientId: number, contentLength?: number, file?: FormDataBodyPart, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewClientImage2(clientId, contentLength, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientImage1(clientId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientImage1(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The list capability of clients can support pagination and sorting.  Example Requests:  self/clients  self/clients?fields=displayName,officeName  self/clients?offset=10&limit=50  self/clients?orderBy=displayName&sortOrder=DESC
         * @summary List Clients associated to the user
         * @param {string} [displayName] displayName
         * @param {string} [firstName] firstName
         * @param {string} [lastName] lastName
         * @param {number} [offset] offset
         * @param {string} [status] status
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll36(displayName?: string, firstName?: string, lastName?: string, offset?: number, status?: string, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfClientsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll36(displayName, firstName, lastName, offset, status, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The list capability of client charges supports pagination.  Example Requests:  self/clients/1/charges  self/clients/1/charges?offset=0&limit=5
         * @summary List Client Charges
         * @param {number} clientId clientId
         * @param {string} [chargeStatus] chargeStatus
         * @param {boolean} [pendingPayment] pendingPayment
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllClientCharges1(clientId: number, chargeStatus?: string, pendingPayment?: boolean, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfClientsClientIdChargesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllClientCharges1(clientId, chargeStatus, pendingPayment, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The list capability of client transaction can support pagination.  Example Requests:  self/clients/189/transactions  self/clients/189/transactions?offset=10&limit=50
         * @summary List Client Transactions
         * @param {number} clientId clientId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllClientTransactions1(clientId: number, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfClientsClientIdTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllClientTransactions1(clientId, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An example of how a loan portfolio summary can be provided. This is requested in a specific use case of the community application. It is quite reasonable to add resources like this to simplify User Interface development.  Example Requests:  self/clients/1/accounts   self/clients/1/accounts?fields=loanAccounts,savingsAccounts
         * @summary Retrieve client accounts overview
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAssociatedAccounts1(clientId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfClientsClientIdAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAssociatedAccounts1(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Client Charge  Example Requests:  self/clients/1/charges/1   self/clients/1/charges/1?fields=name,id
         * @summary Retrieve a Client Charge
         * @param {number} clientId clientId
         * @param {number} chargeId chargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveClientCharge1(clientId: number, chargeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfClientsClientIdChargesChargeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveClientCharge1(clientId, chargeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Client TransactionExample Requests:  self/clients/1/transactions/1   self/clients/1/transactions/1?fields=id,officeName
         * @summary Retrieve a Client Transaction
         * @param {number} clientId clientId
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveClientTransaction1(clientId: number, transactionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfClientsClientIdTransactionsTransactionIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveClientTransaction1(clientId, transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Optional arguments are identical to those of Get Image associated with an Entity (Binary file)  Example Requests:  self/clients/1/images
         * @summary Retrieve Client Image
         * @param {number} clientId clientId
         * @param {number} [maxWidth] 
         * @param {number} [maxHeight] 
         * @param {string} [output] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveImage1(clientId: number, maxWidth?: number, maxHeight?: number, output?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveImage1(clientId, maxWidth, maxHeight, output, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveObligeeDetails1(clientId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveObligeeDetails1(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Client  Example Requests:  self/clients/1  self/clients/1?fields=id,displayName,officeName
         * @summary Retrieve a Client
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne26(clientId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfClientsClientIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne26(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SelfClientApi - factory interface
 * @export
 */
export const SelfClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SelfClientApiFp(configuration)
    return {
        /**
         * 
         * @param {number} clientId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClientImage2(clientId: number, contentLength?: number, file?: FormDataBodyPart, options?: any): AxiosPromise<string> {
            return localVarFp.addNewClientImage2(clientId, contentLength, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientImage1(clientId: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteClientImage1(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * The list capability of clients can support pagination and sorting.  Example Requests:  self/clients  self/clients?fields=displayName,officeName  self/clients?offset=10&limit=50  self/clients?orderBy=displayName&sortOrder=DESC
         * @summary List Clients associated to the user
         * @param {string} [displayName] displayName
         * @param {string} [firstName] firstName
         * @param {string} [lastName] lastName
         * @param {number} [offset] offset
         * @param {string} [status] status
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll36(displayName?: string, firstName?: string, lastName?: string, offset?: number, status?: string, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<GetSelfClientsResponse> {
            return localVarFp.retrieveAll36(displayName, firstName, lastName, offset, status, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * The list capability of client charges supports pagination.  Example Requests:  self/clients/1/charges  self/clients/1/charges?offset=0&limit=5
         * @summary List Client Charges
         * @param {number} clientId clientId
         * @param {string} [chargeStatus] chargeStatus
         * @param {boolean} [pendingPayment] pendingPayment
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClientCharges1(clientId: number, chargeStatus?: string, pendingPayment?: boolean, limit?: number, offset?: number, options?: any): AxiosPromise<GetSelfClientsClientIdChargesResponse> {
            return localVarFp.retrieveAllClientCharges1(clientId, chargeStatus, pendingPayment, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * The list capability of client transaction can support pagination.  Example Requests:  self/clients/189/transactions  self/clients/189/transactions?offset=10&limit=50
         * @summary List Client Transactions
         * @param {number} clientId clientId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClientTransactions1(clientId: number, offset?: number, limit?: number, options?: any): AxiosPromise<GetSelfClientsClientIdTransactionsResponse> {
            return localVarFp.retrieveAllClientTransactions1(clientId, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * An example of how a loan portfolio summary can be provided. This is requested in a specific use case of the community application. It is quite reasonable to add resources like this to simplify User Interface development.  Example Requests:  self/clients/1/accounts   self/clients/1/accounts?fields=loanAccounts,savingsAccounts
         * @summary Retrieve client accounts overview
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAssociatedAccounts1(clientId: number, options?: any): AxiosPromise<GetSelfClientsClientIdAccountsResponse> {
            return localVarFp.retrieveAssociatedAccounts1(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Client Charge  Example Requests:  self/clients/1/charges/1   self/clients/1/charges/1?fields=name,id
         * @summary Retrieve a Client Charge
         * @param {number} clientId clientId
         * @param {number} chargeId chargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveClientCharge1(clientId: number, chargeId: number, options?: any): AxiosPromise<GetSelfClientsClientIdChargesChargeIdResponse> {
            return localVarFp.retrieveClientCharge1(clientId, chargeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Client TransactionExample Requests:  self/clients/1/transactions/1   self/clients/1/transactions/1?fields=id,officeName
         * @summary Retrieve a Client Transaction
         * @param {number} clientId clientId
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveClientTransaction1(clientId: number, transactionId: number, options?: any): AxiosPromise<GetSelfClientsClientIdTransactionsTransactionIdResponse> {
            return localVarFp.retrieveClientTransaction1(clientId, transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Optional arguments are identical to those of Get Image associated with an Entity (Binary file)  Example Requests:  self/clients/1/images
         * @summary Retrieve Client Image
         * @param {number} clientId clientId
         * @param {number} [maxWidth] 
         * @param {number} [maxHeight] 
         * @param {string} [output] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveImage1(clientId: number, maxWidth?: number, maxHeight?: number, output?: string, options?: any): AxiosPromise<void> {
            return localVarFp.retrieveImage1(clientId, maxWidth, maxHeight, output, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveObligeeDetails1(clientId: number, options?: any): AxiosPromise<string> {
            return localVarFp.retrieveObligeeDetails1(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Client  Example Requests:  self/clients/1  self/clients/1?fields=id,displayName,officeName
         * @summary Retrieve a Client
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne26(clientId: number, options?: any): AxiosPromise<GetSelfClientsClientIdResponse> {
            return localVarFp.retrieveOne26(clientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SelfClientApi - object-oriented interface
 * @export
 * @class SelfClientApi
 * @extends {BaseAPI}
 */
export class SelfClientApi extends BaseAPI {
    /**
     * 
     * @param {number} clientId 
     * @param {number} [contentLength] 
     * @param {FormDataBodyPart} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public addNewClientImage2(clientId: number, contentLength?: number, file?: FormDataBodyPart, options?: any) {
        return SelfClientApiFp(this.configuration).addNewClientImage2(clientId, contentLength, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public deleteClientImage1(clientId: number, options?: any) {
        return SelfClientApiFp(this.configuration).deleteClientImage1(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The list capability of clients can support pagination and sorting.  Example Requests:  self/clients  self/clients?fields=displayName,officeName  self/clients?offset=10&limit=50  self/clients?orderBy=displayName&sortOrder=DESC
     * @summary List Clients associated to the user
     * @param {string} [displayName] displayName
     * @param {string} [firstName] firstName
     * @param {string} [lastName] lastName
     * @param {number} [offset] offset
     * @param {string} [status] status
     * @param {number} [limit] limit
     * @param {string} [orderBy] orderBy
     * @param {string} [sortOrder] sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveAll36(displayName?: string, firstName?: string, lastName?: string, offset?: number, status?: string, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveAll36(displayName, firstName, lastName, offset, status, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The list capability of client charges supports pagination.  Example Requests:  self/clients/1/charges  self/clients/1/charges?offset=0&limit=5
     * @summary List Client Charges
     * @param {number} clientId clientId
     * @param {string} [chargeStatus] chargeStatus
     * @param {boolean} [pendingPayment] pendingPayment
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveAllClientCharges1(clientId: number, chargeStatus?: string, pendingPayment?: boolean, limit?: number, offset?: number, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveAllClientCharges1(clientId, chargeStatus, pendingPayment, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The list capability of client transaction can support pagination.  Example Requests:  self/clients/189/transactions  self/clients/189/transactions?offset=10&limit=50
     * @summary List Client Transactions
     * @param {number} clientId clientId
     * @param {number} [offset] offset
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveAllClientTransactions1(clientId: number, offset?: number, limit?: number, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveAllClientTransactions1(clientId, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An example of how a loan portfolio summary can be provided. This is requested in a specific use case of the community application. It is quite reasonable to add resources like this to simplify User Interface development.  Example Requests:  self/clients/1/accounts   self/clients/1/accounts?fields=loanAccounts,savingsAccounts
     * @summary Retrieve client accounts overview
     * @param {number} clientId clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveAssociatedAccounts1(clientId: number, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveAssociatedAccounts1(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Client Charge  Example Requests:  self/clients/1/charges/1   self/clients/1/charges/1?fields=name,id
     * @summary Retrieve a Client Charge
     * @param {number} clientId clientId
     * @param {number} chargeId chargeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveClientCharge1(clientId: number, chargeId: number, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveClientCharge1(clientId, chargeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Client TransactionExample Requests:  self/clients/1/transactions/1   self/clients/1/transactions/1?fields=id,officeName
     * @summary Retrieve a Client Transaction
     * @param {number} clientId clientId
     * @param {number} transactionId transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveClientTransaction1(clientId: number, transactionId: number, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveClientTransaction1(clientId, transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Optional arguments are identical to those of Get Image associated with an Entity (Binary file)  Example Requests:  self/clients/1/images
     * @summary Retrieve Client Image
     * @param {number} clientId clientId
     * @param {number} [maxWidth] 
     * @param {number} [maxHeight] 
     * @param {string} [output] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveImage1(clientId: number, maxWidth?: number, maxHeight?: number, output?: string, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveImage1(clientId, maxWidth, maxHeight, output, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveObligeeDetails1(clientId: number, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveObligeeDetails1(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Client  Example Requests:  self/clients/1  self/clients/1?fields=id,displayName,officeName
     * @summary Retrieve a Client
     * @param {number} clientId clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfClientApi
     */
    public retrieveOne26(clientId: number, options?: any) {
        return SelfClientApiFp(this.configuration).retrieveOne26(clientId, options).then((request) => request(this.axios, this.basePath));
    }
}
