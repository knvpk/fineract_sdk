/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteProvisioningCriteriaResponse } from '../models';
// @ts-ignore
import { GetProvisioningCriteriaCriteriaIdResponse } from '../models';
// @ts-ignore
import { GetProvisioningCriteriaResponse } from '../models';
// @ts-ignore
import { PostProvisioningCriteriaRequest } from '../models';
// @ts-ignore
import { PostProvisioningCriteriaResponse } from '../models';
// @ts-ignore
import { PutProvisioningCriteriaRequest } from '../models';
// @ts-ignore
import { PutProvisioningCriteriaResponse } from '../models';
/**
 * ProvisioningCriteriaApi - axios parameter creator
 * @export
 */
export const ProvisioningCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Provisioning Criteria  Mandatory Fields:  criteriaName provisioningcriteria  Optional Fields:  loanProducts
         * @summary Create a new Provisioning Criteria
         * @param {PostProvisioningCriteriaRequest} postProvisioningCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvisioningCriteria: async (postProvisioningCriteriaRequest: PostProvisioningCriteriaRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postProvisioningCriteriaRequest' is not null or undefined
            assertParamExists('createProvisioningCriteria', 'postProvisioningCriteriaRequest', postProvisioningCriteriaRequest)
            const localVarPath = `/provisioningcriteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProvisioningCriteriaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes Provisioning Criteria
         * @summary Deletes Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvisioningCriteria: async (criteriaId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'criteriaId' is not null or undefined
            assertParamExists('deleteProvisioningCriteria', 'criteriaId', criteriaId)
            const localVarPath = `/provisioningcriteria/{criteriaId}`
                .replace(`{${"criteriaId"}}`, encodeURIComponent(String(criteriaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all created Provisioning Criterias
         * @summary Retrieves all created Provisioning Criterias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllProvisioningCriterias: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/provisioningcriteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Provisioning Criteria
         * @summary Retrieves a Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProvisioningCriteria: async (criteriaId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'criteriaId' is not null or undefined
            assertParamExists('retrieveProvisioningCriteria', 'criteriaId', criteriaId)
            const localVarPath = `/provisioningcriteria/{criteriaId}`
                .replace(`{${"criteriaId"}}`, encodeURIComponent(String(criteriaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate3: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/provisioningcriteria/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a new Provisioning Criteria  Optional Fields criteriaName, loanProducts, provisioningcriteria
         * @summary Updates a new Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {PutProvisioningCriteriaRequest} putProvisioningCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningCriteria: async (criteriaId: number, putProvisioningCriteriaRequest: PutProvisioningCriteriaRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'criteriaId' is not null or undefined
            assertParamExists('updateProvisioningCriteria', 'criteriaId', criteriaId)
            // verify required parameter 'putProvisioningCriteriaRequest' is not null or undefined
            assertParamExists('updateProvisioningCriteria', 'putProvisioningCriteriaRequest', putProvisioningCriteriaRequest)
            const localVarPath = `/provisioningcriteria/{criteriaId}`
                .replace(`{${"criteriaId"}}`, encodeURIComponent(String(criteriaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProvisioningCriteriaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningCriteriaApi - functional programming interface
 * @export
 */
export const ProvisioningCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new Provisioning Criteria  Mandatory Fields:  criteriaName provisioningcriteria  Optional Fields:  loanProducts
         * @summary Create a new Provisioning Criteria
         * @param {PostProvisioningCriteriaRequest} postProvisioningCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProvisioningCriteria(postProvisioningCriteriaRequest: PostProvisioningCriteriaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostProvisioningCriteriaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProvisioningCriteria(postProvisioningCriteriaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes Provisioning Criteria
         * @summary Deletes Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProvisioningCriteria(criteriaId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProvisioningCriteriaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProvisioningCriteria(criteriaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all created Provisioning Criterias
         * @summary Retrieves all created Provisioning Criterias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllProvisioningCriterias(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetProvisioningCriteriaResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllProvisioningCriterias(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Provisioning Criteria
         * @summary Retrieves a Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveProvisioningCriteria(criteriaId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProvisioningCriteriaCriteriaIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveProvisioningCriteria(criteriaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTemplate3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTemplate3(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a new Provisioning Criteria  Optional Fields criteriaName, loanProducts, provisioningcriteria
         * @summary Updates a new Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {PutProvisioningCriteriaRequest} putProvisioningCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProvisioningCriteria(criteriaId: number, putProvisioningCriteriaRequest: PutProvisioningCriteriaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutProvisioningCriteriaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProvisioningCriteria(criteriaId, putProvisioningCriteriaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningCriteriaApi - factory interface
 * @export
 */
export const ProvisioningCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningCriteriaApiFp(configuration)
    return {
        /**
         * Creates a new Provisioning Criteria  Mandatory Fields:  criteriaName provisioningcriteria  Optional Fields:  loanProducts
         * @summary Create a new Provisioning Criteria
         * @param {PostProvisioningCriteriaRequest} postProvisioningCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvisioningCriteria(postProvisioningCriteriaRequest: PostProvisioningCriteriaRequest, options?: any): AxiosPromise<PostProvisioningCriteriaResponse> {
            return localVarFp.createProvisioningCriteria(postProvisioningCriteriaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes Provisioning Criteria
         * @summary Deletes Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvisioningCriteria(criteriaId: number, options?: any): AxiosPromise<DeleteProvisioningCriteriaResponse> {
            return localVarFp.deleteProvisioningCriteria(criteriaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all created Provisioning Criterias
         * @summary Retrieves all created Provisioning Criterias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllProvisioningCriterias(options?: any): AxiosPromise<Array<GetProvisioningCriteriaResponse>> {
            return localVarFp.retrieveAllProvisioningCriterias(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Provisioning Criteria
         * @summary Retrieves a Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProvisioningCriteria(criteriaId: number, options?: any): AxiosPromise<GetProvisioningCriteriaCriteriaIdResponse> {
            return localVarFp.retrieveProvisioningCriteria(criteriaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate3(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveTemplate3(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a new Provisioning Criteria  Optional Fields criteriaName, loanProducts, provisioningcriteria
         * @summary Updates a new Provisioning Criteria
         * @param {number} criteriaId criteriaId
         * @param {PutProvisioningCriteriaRequest} putProvisioningCriteriaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningCriteria(criteriaId: number, putProvisioningCriteriaRequest: PutProvisioningCriteriaRequest, options?: any): AxiosPromise<PutProvisioningCriteriaResponse> {
            return localVarFp.updateProvisioningCriteria(criteriaId, putProvisioningCriteriaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisioningCriteriaApi - object-oriented interface
 * @export
 * @class ProvisioningCriteriaApi
 * @extends {BaseAPI}
 */
export class ProvisioningCriteriaApi extends BaseAPI {
    /**
     * Creates a new Provisioning Criteria  Mandatory Fields:  criteriaName provisioningcriteria  Optional Fields:  loanProducts
     * @summary Create a new Provisioning Criteria
     * @param {PostProvisioningCriteriaRequest} postProvisioningCriteriaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningCriteriaApi
     */
    public createProvisioningCriteria(postProvisioningCriteriaRequest: PostProvisioningCriteriaRequest, options?: any) {
        return ProvisioningCriteriaApiFp(this.configuration).createProvisioningCriteria(postProvisioningCriteriaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes Provisioning Criteria
     * @summary Deletes Provisioning Criteria
     * @param {number} criteriaId criteriaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningCriteriaApi
     */
    public deleteProvisioningCriteria(criteriaId: number, options?: any) {
        return ProvisioningCriteriaApiFp(this.configuration).deleteProvisioningCriteria(criteriaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all created Provisioning Criterias
     * @summary Retrieves all created Provisioning Criterias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningCriteriaApi
     */
    public retrieveAllProvisioningCriterias(options?: any) {
        return ProvisioningCriteriaApiFp(this.configuration).retrieveAllProvisioningCriterias(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Provisioning Criteria
     * @summary Retrieves a Provisioning Criteria
     * @param {number} criteriaId criteriaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningCriteriaApi
     */
    public retrieveProvisioningCriteria(criteriaId: number, options?: any) {
        return ProvisioningCriteriaApiFp(this.configuration).retrieveProvisioningCriteria(criteriaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningCriteriaApi
     */
    public retrieveTemplate3(options?: any) {
        return ProvisioningCriteriaApiFp(this.configuration).retrieveTemplate3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a new Provisioning Criteria  Optional Fields criteriaName, loanProducts, provisioningcriteria
     * @summary Updates a new Provisioning Criteria
     * @param {number} criteriaId criteriaId
     * @param {PutProvisioningCriteriaRequest} putProvisioningCriteriaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningCriteriaApi
     */
    public updateProvisioningCriteria(criteriaId: number, putProvisioningCriteriaRequest: PutProvisioningCriteriaRequest, options?: any) {
        return ProvisioningCriteriaApiFp(this.configuration).updateProvisioningCriteria(criteriaId, putProvisioningCriteriaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
