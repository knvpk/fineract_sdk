/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../models';
// @ts-ignore
import { GetSavingsAccountsSavingsAccountIdChargesResponse } from '../models';
// @ts-ignore
import { GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../models';
// @ts-ignore
import { GetSavingsAccountsSavingsAccountIdChargesTemplateResponse } from '../models';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesRequest } from '../models';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesResponse } from '../models';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest } from '../models';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../models';
// @ts-ignore
import { PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest } from '../models';
// @ts-ignore
import { PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../models';
/**
 * SavingsChargesApi - axios parameter creator
 * @export
 */
export const SavingsChargesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
         * @summary Create a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {PostSavingsAccountsSavingsAccountIdChargesRequest} postSavingsAccountsSavingsAccountIdChargesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSavingsAccountCharge: async (savingsAccountId: number, postSavingsAccountsSavingsAccountIdChargesRequest: PostSavingsAccountsSavingsAccountIdChargesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'savingsAccountId' is not null or undefined
            assertParamExists('addSavingsAccountCharge', 'savingsAccountId', savingsAccountId)
            // verify required parameter 'postSavingsAccountsSavingsAccountIdChargesRequest' is not null or undefined
            assertParamExists('addSavingsAccountCharge', 'postSavingsAccountsSavingsAccountIdChargesRequest', postSavingsAccountsSavingsAccountIdChargesRequest)
            const localVarPath = `/savingsaccounts/{savingsAccountId}/charges`
                .replace(`{${"savingsAccountId"}}`, encodeURIComponent(String(savingsAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSavingsAccountsSavingsAccountIdChargesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
         * @summary Delete a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavingsAccountCharge: async (savingsAccountId: number, savingsAccountChargeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'savingsAccountId' is not null or undefined
            assertParamExists('deleteSavingsAccountCharge', 'savingsAccountId', savingsAccountId)
            // verify required parameter 'savingsAccountChargeId' is not null or undefined
            assertParamExists('deleteSavingsAccountCharge', 'savingsAccountChargeId', savingsAccountChargeId)
            const localVarPath = `/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}`
                .replace(`{${"savingsAccountId"}}`, encodeURIComponent(String(savingsAccountId)))
                .replace(`{${"savingsAccountChargeId"}}`, encodeURIComponent(String(savingsAccountChargeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for \'Pay a Savings account Charge\'
         * @summary Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payOrWaiveSavingsAccountCharge: async (savingsAccountId: number, savingsAccountChargeId: number, postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'savingsAccountId' is not null or undefined
            assertParamExists('payOrWaiveSavingsAccountCharge', 'savingsAccountId', savingsAccountId)
            // verify required parameter 'savingsAccountChargeId' is not null or undefined
            assertParamExists('payOrWaiveSavingsAccountCharge', 'savingsAccountChargeId', savingsAccountChargeId)
            // verify required parameter 'postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest' is not null or undefined
            assertParamExists('payOrWaiveSavingsAccountCharge', 'postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest', postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest)
            const localVarPath = `/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}`
                .replace(`{${"savingsAccountId"}}`, encodeURIComponent(String(savingsAccountId)))
                .replace(`{${"savingsAccountChargeId"}}`, encodeURIComponent(String(savingsAccountChargeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus=all  savingsaccounts/1/charges?chargeStatus=inactive  savingsaccounts/1/charges?chargeStatus=active  savingsaccounts/1/charges?fields=name,amountOrPercentage
         * @summary List Savings Charges
         * @param {number} savingsAccountId savingsAccountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllSavingsAccountCharges: async (savingsAccountId: number, chargeStatus?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'savingsAccountId' is not null or undefined
            assertParamExists('retrieveAllSavingsAccountCharges', 'savingsAccountId', savingsAccountId)
            const localVarPath = `/savingsaccounts/{savingsAccountId}/charges`
                .replace(`{${"savingsAccountId"}}`, encodeURIComponent(String(savingsAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (chargeStatus !== undefined) {
                localVarQueryParameter['chargeStatus'] = chargeStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields=name,amountOrPercentage
         * @summary Retrieve a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccountCharge: async (savingsAccountId: number, savingsAccountChargeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'savingsAccountId' is not null or undefined
            assertParamExists('retrieveSavingsAccountCharge', 'savingsAccountId', savingsAccountId)
            // verify required parameter 'savingsAccountChargeId' is not null or undefined
            assertParamExists('retrieveSavingsAccountCharge', 'savingsAccountChargeId', savingsAccountChargeId)
            const localVarPath = `/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}`
                .replace(`{${"savingsAccountId"}}`, encodeURIComponent(String(savingsAccountId)))
                .replace(`{${"savingsAccountChargeId"}}`, encodeURIComponent(String(savingsAccountChargeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  savingsaccounts/1/charges/template
         * @summary Retrieve Savings Charges Template
         * @param {number} savingsAccountId savingsAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate17: async (savingsAccountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'savingsAccountId' is not null or undefined
            assertParamExists('retrieveTemplate17', 'savingsAccountId', savingsAccountId)
            const localVarPath = `/savingsaccounts/{savingsAccountId}/charges/template`
                .replace(`{${"savingsAccountId"}}`, encodeURIComponent(String(savingsAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
         * @summary Update a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavingsAccountCharge: async (savingsAccountId: number, savingsAccountChargeId: number, putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'savingsAccountId' is not null or undefined
            assertParamExists('updateSavingsAccountCharge', 'savingsAccountId', savingsAccountId)
            // verify required parameter 'savingsAccountChargeId' is not null or undefined
            assertParamExists('updateSavingsAccountCharge', 'savingsAccountChargeId', savingsAccountChargeId)
            // verify required parameter 'putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest' is not null or undefined
            assertParamExists('updateSavingsAccountCharge', 'putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest', putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest)
            const localVarPath = `/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}`
                .replace(`{${"savingsAccountId"}}`, encodeURIComponent(String(savingsAccountId)))
                .replace(`{${"savingsAccountChargeId"}}`, encodeURIComponent(String(savingsAccountChargeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SavingsChargesApi - functional programming interface
 * @export
 */
export const SavingsChargesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SavingsChargesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
         * @summary Create a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {PostSavingsAccountsSavingsAccountIdChargesRequest} postSavingsAccountsSavingsAccountIdChargesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSavingsAccountCharge(savingsAccountId: number, postSavingsAccountsSavingsAccountIdChargesRequest: PostSavingsAccountsSavingsAccountIdChargesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSavingsAccountsSavingsAccountIdChargesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSavingsAccountCharge(savingsAccountId, postSavingsAccountsSavingsAccountIdChargesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
         * @summary Delete a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for \'Pay a Savings account Charge\'
         * @summary Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payOrWaiveSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payOrWaiveSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus=all  savingsaccounts/1/charges?chargeStatus=inactive  savingsaccounts/1/charges?chargeStatus=active  savingsaccounts/1/charges?fields=name,amountOrPercentage
         * @summary List Savings Charges
         * @param {number} savingsAccountId savingsAccountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllSavingsAccountCharges(savingsAccountId: number, chargeStatus?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSavingsAccountsSavingsAccountIdChargesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllSavingsAccountCharges(savingsAccountId, chargeStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields=name,amountOrPercentage
         * @summary Retrieve a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  savingsaccounts/1/charges/template
         * @summary Retrieve Savings Charges Template
         * @param {number} savingsAccountId savingsAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTemplate17(savingsAccountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTemplate17(savingsAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
         * @summary Update a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SavingsChargesApi - factory interface
 * @export
 */
export const SavingsChargesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SavingsChargesApiFp(configuration)
    return {
        /**
         * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
         * @summary Create a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {PostSavingsAccountsSavingsAccountIdChargesRequest} postSavingsAccountsSavingsAccountIdChargesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSavingsAccountCharge(savingsAccountId: number, postSavingsAccountsSavingsAccountIdChargesRequest: PostSavingsAccountsSavingsAccountIdChargesRequest, options?: any): AxiosPromise<PostSavingsAccountsSavingsAccountIdChargesResponse> {
            return localVarFp.addSavingsAccountCharge(savingsAccountId, postSavingsAccountsSavingsAccountIdChargesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
         * @summary Delete a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, options?: any): AxiosPromise<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> {
            return localVarFp.deleteSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for \'Pay a Savings account Charge\'
         * @summary Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payOrWaiveSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, command?: string, options?: any): AxiosPromise<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> {
            return localVarFp.payOrWaiveSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, command, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus=all  savingsaccounts/1/charges?chargeStatus=inactive  savingsaccounts/1/charges?chargeStatus=active  savingsaccounts/1/charges?fields=name,amountOrPercentage
         * @summary List Savings Charges
         * @param {number} savingsAccountId savingsAccountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllSavingsAccountCharges(savingsAccountId: number, chargeStatus?: string, options?: any): AxiosPromise<Array<GetSavingsAccountsSavingsAccountIdChargesResponse>> {
            return localVarFp.retrieveAllSavingsAccountCharges(savingsAccountId, chargeStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields=name,amountOrPercentage
         * @summary Retrieve a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, options?: any): AxiosPromise<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> {
            return localVarFp.retrieveSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  savingsaccounts/1/charges/template
         * @summary Retrieve Savings Charges Template
         * @param {number} savingsAccountId savingsAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate17(savingsAccountId: number, options?: any): AxiosPromise<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse> {
            return localVarFp.retrieveTemplate17(savingsAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
         * @summary Update a Savings account Charge
         * @param {number} savingsAccountId savingsAccountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, options?: any): AxiosPromise<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> {
            return localVarFp.updateSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SavingsChargesApi - object-oriented interface
 * @export
 * @class SavingsChargesApi
 * @extends {BaseAPI}
 */
export class SavingsChargesApi extends BaseAPI {
    /**
     * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
     * @summary Create a Savings account Charge
     * @param {number} savingsAccountId savingsAccountId
     * @param {PostSavingsAccountsSavingsAccountIdChargesRequest} postSavingsAccountsSavingsAccountIdChargesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsChargesApi
     */
    public addSavingsAccountCharge(savingsAccountId: number, postSavingsAccountsSavingsAccountIdChargesRequest: PostSavingsAccountsSavingsAccountIdChargesRequest, options?: any) {
        return SavingsChargesApiFp(this.configuration).addSavingsAccountCharge(savingsAccountId, postSavingsAccountsSavingsAccountIdChargesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
     * @summary Delete a Savings account Charge
     * @param {number} savingsAccountId savingsAccountId
     * @param {number} savingsAccountChargeId savingsAccountChargeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsChargesApi
     */
    public deleteSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, options?: any) {
        return SavingsChargesApiFp(this.configuration).deleteSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for \'Pay a Savings account Charge\'
     * @summary Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge
     * @param {number} savingsAccountId savingsAccountId
     * @param {number} savingsAccountChargeId savingsAccountChargeId
     * @param {PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsChargesApi
     */
    public payOrWaiveSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, command?: string, options?: any) {
        return SavingsChargesApiFp(this.configuration).payOrWaiveSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus=all  savingsaccounts/1/charges?chargeStatus=inactive  savingsaccounts/1/charges?chargeStatus=active  savingsaccounts/1/charges?fields=name,amountOrPercentage
     * @summary List Savings Charges
     * @param {number} savingsAccountId savingsAccountId
     * @param {string} [chargeStatus] chargeStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsChargesApi
     */
    public retrieveAllSavingsAccountCharges(savingsAccountId: number, chargeStatus?: string, options?: any) {
        return SavingsChargesApiFp(this.configuration).retrieveAllSavingsAccountCharges(savingsAccountId, chargeStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields=name,amountOrPercentage
     * @summary Retrieve a Savings account Charge
     * @param {number} savingsAccountId savingsAccountId
     * @param {number} savingsAccountChargeId savingsAccountChargeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsChargesApi
     */
    public retrieveSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, options?: any) {
        return SavingsChargesApiFp(this.configuration).retrieveSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  savingsaccounts/1/charges/template
     * @summary Retrieve Savings Charges Template
     * @param {number} savingsAccountId savingsAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsChargesApi
     */
    public retrieveTemplate17(savingsAccountId: number, options?: any) {
        return SavingsChargesApiFp(this.configuration).retrieveTemplate17(savingsAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
     * @summary Update a Savings account Charge
     * @param {number} savingsAccountId savingsAccountId
     * @param {number} savingsAccountChargeId savingsAccountChargeId
     * @param {PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest} putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsChargesApi
     */
    public updateSavingsAccountCharge(savingsAccountId: number, savingsAccountChargeId: number, putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, options?: any) {
        return SavingsChargesApiFp(this.configuration).updateSavingsAccountCharge(savingsAccountId, savingsAccountChargeId, putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
