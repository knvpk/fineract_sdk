/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteGLAccountsRequest } from '../models';
// @ts-ignore
import { FormDataContentDisposition } from '../models';
// @ts-ignore
import { GetGLAccountsResponse } from '../models';
// @ts-ignore
import { GetGLAccountsTemplateResponse } from '../models';
// @ts-ignore
import { PostGLAccountsRequest } from '../models';
// @ts-ignore
import { PostGLAccountsResponse } from '../models';
// @ts-ignore
import { PutGLAccountsRequest } from '../models';
// @ts-ignore
import { PutGLAccountsResponse } from '../models';
/**
 * GeneralLedgerAccountApi - axios parameter creator
 * @export
 */
export const GeneralLedgerAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Note: You may optionally create Hierarchical Chart of Accounts by using the \"parentId\" property of an Account Mandatory Fields:  name, glCode, type, usage and manualEntriesAllowed
         * @summary Create a General Ledger Account
         * @param {PostGLAccountsRequest} [postGLAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGLAccount: async (postGLAccountsRequest?: PostGLAccountsRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/glaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGLAccountsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: Only the latest accounting closure associated with a branch may be deleted.
         * @summary Delete an accounting closure
         * @param {number} glAccountId glAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGLAccount: async (glAccountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'glAccountId' is not null or undefined
            assertParamExists('deleteGLAccount', 'glAccountId', glAccountId)
            const localVarPath = `/glaccounts/{glAccountId}`
                .replace(`{${"glAccountId"}}`, encodeURIComponent(String(glAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlAccountsTemplate: async (dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/glaccounts/downloadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGlAccountsTemplate: async (file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/glaccounts/uploadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
            if (locale !== undefined) { 
                localVarFormParams.append('locale', locale as any);
            }
    
            if (dateFormat !== undefined) { 
                localVarFormParams.append('dateFormat', dateFormat as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  glaccounts/1   glaccounts/1?template=true   glaccounts/1?fields=name,glCode   glaccounts/1?fetchRunningBalance=true
         * @summary Retrieve a General Ledger Account
         * @param {number} glAccountId glAccountId
         * @param {boolean} [fetchRunningBalance] fetchRunningBalance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveAccount: async (glAccountId: number, fetchRunningBalance?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'glAccountId' is not null or undefined
            assertParamExists('retreiveAccount', 'glAccountId', glAccountId)
            const localVarPath = `/glaccounts/{glAccountId}`
                .replace(`{${"glAccountId"}}`, encodeURIComponent(String(glAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (fetchRunningBalance !== undefined) {
                localVarQueryParameter['fetchRunningBalance'] = fetchRunningBalance;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ARGUMENTS type Integer optional manualEntriesAllowed boolean optional usage Integer optional disabled boolean optional parentId Long optional tagId Long optional Example Requests:  glaccounts   glaccounts?type=1&manualEntriesAllowed=true&usage=1&disabled=false  glaccounts?fetchRunningBalance=true
         * @summary List General Ledger Accounts
         * @param {number} [type] type
         * @param {string} [searchParam] searchParam
         * @param {number} [usage] usage
         * @param {boolean} [manualEntriesAllowed] manualEntriesAllowed
         * @param {boolean} [disabled] disabled
         * @param {boolean} [fetchRunningBalance] fetchRunningBalance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllAccounts: async (type?: number, searchParam?: string, usage?: number, manualEntriesAllowed?: boolean, disabled?: boolean, fetchRunningBalance?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/glaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (searchParam !== undefined) {
                localVarQueryParameter['searchParam'] = searchParam;
            }

            if (usage !== undefined) {
                localVarQueryParameter['usage'] = usage;
            }

            if (manualEntriesAllowed !== undefined) {
                localVarQueryParameter['manualEntriesAllowed'] = manualEntriesAllowed;
            }

            if (disabled !== undefined) {
                localVarQueryParameter['disabled'] = disabled;
            }

            if (fetchRunningBalance !== undefined) {
                localVarQueryParameter['fetchRunningBalance'] = fetchRunningBalance;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  glaccounts/template glaccounts/template?type=1  type is optional and integer value from 1 to 5.  1.Assets  2.Liabilities  3.Equity  4.Income  5.Expenses
         * @summary Retrieve GL Accounts Template
         * @param {number} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retriveTemplate: async (type?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/glaccounts/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Once an accounting closure is created, only the comments associated with it may be edited  
         * @summary Update an Accounting closure
         * @param {number} glAccountId glAccountId
         * @param {PutGLAccountsRequest} [putGLAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGLAccount: async (glAccountId: number, putGLAccountsRequest?: PutGLAccountsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'glAccountId' is not null or undefined
            assertParamExists('updateGLAccount', 'glAccountId', glAccountId)
            const localVarPath = `/glaccounts/{glAccountId}`
                .replace(`{${"glAccountId"}}`, encodeURIComponent(String(glAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putGLAccountsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralLedgerAccountApi - functional programming interface
 * @export
 */
export const GeneralLedgerAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralLedgerAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Note: You may optionally create Hierarchical Chart of Accounts by using the \"parentId\" property of an Account Mandatory Fields:  name, glCode, type, usage and manualEntriesAllowed
         * @summary Create a General Ledger Account
         * @param {PostGLAccountsRequest} [postGLAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGLAccount(postGLAccountsRequest?: PostGLAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostGLAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGLAccount(postGLAccountsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: Only the latest accounting closure associated with a branch may be deleted.
         * @summary Delete an accounting closure
         * @param {number} glAccountId glAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGLAccount(glAccountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGLAccountsRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGLAccount(glAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGlAccountsTemplate(dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlAccountsTemplate(dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGlAccountsTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGlAccountsTemplate(file, locale, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  glaccounts/1   glaccounts/1?template=true   glaccounts/1?fields=name,glCode   glaccounts/1?fetchRunningBalance=true
         * @summary Retrieve a General Ledger Account
         * @param {number} glAccountId glAccountId
         * @param {boolean} [fetchRunningBalance] fetchRunningBalance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retreiveAccount(glAccountId: number, fetchRunningBalance?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGLAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retreiveAccount(glAccountId, fetchRunningBalance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ARGUMENTS type Integer optional manualEntriesAllowed boolean optional usage Integer optional disabled boolean optional parentId Long optional tagId Long optional Example Requests:  glaccounts   glaccounts?type=1&manualEntriesAllowed=true&usage=1&disabled=false  glaccounts?fetchRunningBalance=true
         * @summary List General Ledger Accounts
         * @param {number} [type] type
         * @param {string} [searchParam] searchParam
         * @param {number} [usage] usage
         * @param {boolean} [manualEntriesAllowed] manualEntriesAllowed
         * @param {boolean} [disabled] disabled
         * @param {boolean} [fetchRunningBalance] fetchRunningBalance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllAccounts(type?: number, searchParam?: string, usage?: number, manualEntriesAllowed?: boolean, disabled?: boolean, fetchRunningBalance?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetGLAccountsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllAccounts(type, searchParam, usage, manualEntriesAllowed, disabled, fetchRunningBalance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  glaccounts/template glaccounts/template?type=1  type is optional and integer value from 1 to 5.  1.Assets  2.Liabilities  3.Equity  4.Income  5.Expenses
         * @summary Retrieve GL Accounts Template
         * @param {number} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retriveTemplate(type?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGLAccountsTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retriveTemplate(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Once an accounting closure is created, only the comments associated with it may be edited  
         * @summary Update an Accounting closure
         * @param {number} glAccountId glAccountId
         * @param {PutGLAccountsRequest} [putGLAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGLAccount(glAccountId: number, putGLAccountsRequest?: PutGLAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutGLAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGLAccount(glAccountId, putGLAccountsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralLedgerAccountApi - factory interface
 * @export
 */
export const GeneralLedgerAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralLedgerAccountApiFp(configuration)
    return {
        /**
         * Note: You may optionally create Hierarchical Chart of Accounts by using the \"parentId\" property of an Account Mandatory Fields:  name, glCode, type, usage and manualEntriesAllowed
         * @summary Create a General Ledger Account
         * @param {PostGLAccountsRequest} [postGLAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGLAccount(postGLAccountsRequest?: PostGLAccountsRequest, options?: any): AxiosPromise<PostGLAccountsResponse> {
            return localVarFp.createGLAccount(postGLAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: Only the latest accounting closure associated with a branch may be deleted.
         * @summary Delete an accounting closure
         * @param {number} glAccountId glAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGLAccount(glAccountId: number, options?: any): AxiosPromise<DeleteGLAccountsRequest> {
            return localVarFp.deleteGLAccount(glAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlAccountsTemplate(dateFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getGlAccountsTemplate(dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGlAccountsTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): AxiosPromise<string> {
            return localVarFp.postGlAccountsTemplate(file, locale, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  glaccounts/1   glaccounts/1?template=true   glaccounts/1?fields=name,glCode   glaccounts/1?fetchRunningBalance=true
         * @summary Retrieve a General Ledger Account
         * @param {number} glAccountId glAccountId
         * @param {boolean} [fetchRunningBalance] fetchRunningBalance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveAccount(glAccountId: number, fetchRunningBalance?: boolean, options?: any): AxiosPromise<GetGLAccountsResponse> {
            return localVarFp.retreiveAccount(glAccountId, fetchRunningBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * ARGUMENTS type Integer optional manualEntriesAllowed boolean optional usage Integer optional disabled boolean optional parentId Long optional tagId Long optional Example Requests:  glaccounts   glaccounts?type=1&manualEntriesAllowed=true&usage=1&disabled=false  glaccounts?fetchRunningBalance=true
         * @summary List General Ledger Accounts
         * @param {number} [type] type
         * @param {string} [searchParam] searchParam
         * @param {number} [usage] usage
         * @param {boolean} [manualEntriesAllowed] manualEntriesAllowed
         * @param {boolean} [disabled] disabled
         * @param {boolean} [fetchRunningBalance] fetchRunningBalance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllAccounts(type?: number, searchParam?: string, usage?: number, manualEntriesAllowed?: boolean, disabled?: boolean, fetchRunningBalance?: boolean, options?: any): AxiosPromise<Array<GetGLAccountsResponse>> {
            return localVarFp.retrieveAllAccounts(type, searchParam, usage, manualEntriesAllowed, disabled, fetchRunningBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  glaccounts/template glaccounts/template?type=1  type is optional and integer value from 1 to 5.  1.Assets  2.Liabilities  3.Equity  4.Income  5.Expenses
         * @summary Retrieve GL Accounts Template
         * @param {number} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retriveTemplate(type?: number, options?: any): AxiosPromise<GetGLAccountsTemplateResponse> {
            return localVarFp.retriveTemplate(type, options).then((request) => request(axios, basePath));
        },
        /**
         * Once an accounting closure is created, only the comments associated with it may be edited  
         * @summary Update an Accounting closure
         * @param {number} glAccountId glAccountId
         * @param {PutGLAccountsRequest} [putGLAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGLAccount(glAccountId: number, putGLAccountsRequest?: PutGLAccountsRequest, options?: any): AxiosPromise<PutGLAccountsResponse> {
            return localVarFp.updateGLAccount(glAccountId, putGLAccountsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralLedgerAccountApi - object-oriented interface
 * @export
 * @class GeneralLedgerAccountApi
 * @extends {BaseAPI}
 */
export class GeneralLedgerAccountApi extends BaseAPI {
    /**
     * Note: You may optionally create Hierarchical Chart of Accounts by using the \"parentId\" property of an Account Mandatory Fields:  name, glCode, type, usage and manualEntriesAllowed
     * @summary Create a General Ledger Account
     * @param {PostGLAccountsRequest} [postGLAccountsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public createGLAccount(postGLAccountsRequest?: PostGLAccountsRequest, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).createGLAccount(postGLAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: Only the latest accounting closure associated with a branch may be deleted.
     * @summary Delete an accounting closure
     * @param {number} glAccountId glAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public deleteGLAccount(glAccountId: number, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).deleteGLAccount(glAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public getGlAccountsTemplate(dateFormat?: string, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).getGlAccountsTemplate(dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormDataContentDisposition} [file] 
     * @param {string} [locale] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public postGlAccountsTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).postGlAccountsTemplate(file, locale, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  glaccounts/1   glaccounts/1?template=true   glaccounts/1?fields=name,glCode   glaccounts/1?fetchRunningBalance=true
     * @summary Retrieve a General Ledger Account
     * @param {number} glAccountId glAccountId
     * @param {boolean} [fetchRunningBalance] fetchRunningBalance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public retreiveAccount(glAccountId: number, fetchRunningBalance?: boolean, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).retreiveAccount(glAccountId, fetchRunningBalance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ARGUMENTS type Integer optional manualEntriesAllowed boolean optional usage Integer optional disabled boolean optional parentId Long optional tagId Long optional Example Requests:  glaccounts   glaccounts?type=1&manualEntriesAllowed=true&usage=1&disabled=false  glaccounts?fetchRunningBalance=true
     * @summary List General Ledger Accounts
     * @param {number} [type] type
     * @param {string} [searchParam] searchParam
     * @param {number} [usage] usage
     * @param {boolean} [manualEntriesAllowed] manualEntriesAllowed
     * @param {boolean} [disabled] disabled
     * @param {boolean} [fetchRunningBalance] fetchRunningBalance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public retrieveAllAccounts(type?: number, searchParam?: string, usage?: number, manualEntriesAllowed?: boolean, disabled?: boolean, fetchRunningBalance?: boolean, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).retrieveAllAccounts(type, searchParam, usage, manualEntriesAllowed, disabled, fetchRunningBalance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  glaccounts/template glaccounts/template?type=1  type is optional and integer value from 1 to 5.  1.Assets  2.Liabilities  3.Equity  4.Income  5.Expenses
     * @summary Retrieve GL Accounts Template
     * @param {number} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public retriveTemplate(type?: number, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).retriveTemplate(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Once an accounting closure is created, only the comments associated with it may be edited  
     * @summary Update an Accounting closure
     * @param {number} glAccountId glAccountId
     * @param {PutGLAccountsRequest} [putGLAccountsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerAccountApi
     */
    public updateGLAccount(glAccountId: number, putGLAccountsRequest?: PutGLAccountsRequest, options?: any) {
        return GeneralLedgerAccountApiFp(this.configuration).updateGLAccount(glAccountId, putGLAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
