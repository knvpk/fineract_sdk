/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetMakerCheckerResponse } from '../models';
// @ts-ignore
import { GetMakerCheckersSearchTemplateResponse } from '../models';
// @ts-ignore
import { PostMakerCheckersResponse } from '../models';
/**
 * MakerCheckerOr4EyeFunctionalityApi - axios parameter creator
 * @export
 */
export const MakerCheckerOr4EyeFunctionalityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve Maker Checker Entry | Reject Maker Checker Entry
         * @param {number} auditId auditId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveMakerCheckerEntry: async (auditId: number, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'auditId' is not null or undefined
            assertParamExists('approveMakerCheckerEntry', 'auditId', auditId)
            const localVarPath = `/makercheckers/{auditId}`
                .replace(`{${"auditId"}}`, encodeURIComponent(String(auditId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Maker Checker Entry
         * @param {number} auditId auditId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMakerCheckerEntry: async (auditId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'auditId' is not null or undefined
            assertParamExists('deleteMakerCheckerEntry', 'auditId', auditId)
            const localVarPath = `/makercheckers/{auditId}`
                .replace(`{${"auditId"}}`, encodeURIComponent(String(auditId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building a Checker Inbox UI. \"appUsers\" are data scoped to the office/branch the requestor is associated with. \"actionNames\" and \"entityNames\" returned are those that the requestor has Checker approval permissions for.  Example Requests:  makercheckers/searchtemplate makercheckers/searchtemplate?fields=entityNames
         * @summary Maker Checker Search Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAuditSearchTemplate1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/makercheckers/searchtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of entries that can be checked by the requestor that match the criteria supplied.  Example Requests:  makercheckers  makercheckers?fields=madeOnDate,maker,processingResult  makercheckers?makerDateTimeFrom=2013-03-25 08:00:00&makerDateTimeTo=2013-04-04 18:00:00  makercheckers?officeId=1  makercheckers?officeId=1&includeJson=true
         * @summary List Maker Checker Entries
         * @param {string} [actionName] actionName
         * @param {string} [entityName] entityName
         * @param {number} [resourceId] resourceId
         * @param {number} [makerId] makerId
         * @param {string} [makerDateTimeFrom] makerDateTimeFrom
         * @param {string} [makerDateTimeTo] makerDateTimeTo
         * @param {number} [officeId] officeId
         * @param {number} [groupId] groupId
         * @param {number} [clientId] clientId
         * @param {number} [loanid] loanid
         * @param {number} [savingsAccountId] savingsAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCommands: async (actionName?: string, entityName?: string, resourceId?: number, makerId?: number, makerDateTimeFrom?: string, makerDateTimeTo?: string, officeId?: number, groupId?: number, clientId?: number, loanid?: number, savingsAccountId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/makercheckers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (actionName !== undefined) {
                localVarQueryParameter['actionName'] = actionName;
            }

            if (entityName !== undefined) {
                localVarQueryParameter['entityName'] = entityName;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }

            if (makerId !== undefined) {
                localVarQueryParameter['makerId'] = makerId;
            }

            if (makerDateTimeFrom !== undefined) {
                localVarQueryParameter['makerDateTimeFrom'] = makerDateTimeFrom;
            }

            if (makerDateTimeTo !== undefined) {
                localVarQueryParameter['makerDateTimeTo'] = makerDateTimeTo;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (loanid !== undefined) {
                localVarQueryParameter['loanid'] = loanid;
            }

            if (savingsAccountId !== undefined) {
                localVarQueryParameter['savingsAccountId'] = savingsAccountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MakerCheckerOr4EyeFunctionalityApi - functional programming interface
 * @export
 */
export const MakerCheckerOr4EyeFunctionalityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MakerCheckerOr4EyeFunctionalityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approve Maker Checker Entry | Reject Maker Checker Entry
         * @param {number} auditId auditId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveMakerCheckerEntry(auditId: number, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostMakerCheckersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveMakerCheckerEntry(auditId, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Maker Checker Entry
         * @param {number} auditId auditId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMakerCheckerEntry(auditId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostMakerCheckersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMakerCheckerEntry(auditId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building a Checker Inbox UI. \"appUsers\" are data scoped to the office/branch the requestor is associated with. \"actionNames\" and \"entityNames\" returned are those that the requestor has Checker approval permissions for.  Example Requests:  makercheckers/searchtemplate makercheckers/searchtemplate?fields=entityNames
         * @summary Maker Checker Search Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAuditSearchTemplate1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMakerCheckersSearchTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAuditSearchTemplate1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of entries that can be checked by the requestor that match the criteria supplied.  Example Requests:  makercheckers  makercheckers?fields=madeOnDate,maker,processingResult  makercheckers?makerDateTimeFrom=2013-03-25 08:00:00&makerDateTimeTo=2013-04-04 18:00:00  makercheckers?officeId=1  makercheckers?officeId=1&includeJson=true
         * @summary List Maker Checker Entries
         * @param {string} [actionName] actionName
         * @param {string} [entityName] entityName
         * @param {number} [resourceId] resourceId
         * @param {number} [makerId] makerId
         * @param {string} [makerDateTimeFrom] makerDateTimeFrom
         * @param {string} [makerDateTimeTo] makerDateTimeTo
         * @param {number} [officeId] officeId
         * @param {number} [groupId] groupId
         * @param {number} [clientId] clientId
         * @param {number} [loanid] loanid
         * @param {number} [savingsAccountId] savingsAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCommands(actionName?: string, entityName?: string, resourceId?: number, makerId?: number, makerDateTimeFrom?: string, makerDateTimeTo?: string, officeId?: number, groupId?: number, clientId?: number, loanid?: number, savingsAccountId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMakerCheckerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCommands(actionName, entityName, resourceId, makerId, makerDateTimeFrom, makerDateTimeTo, officeId, groupId, clientId, loanid, savingsAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MakerCheckerOr4EyeFunctionalityApi - factory interface
 * @export
 */
export const MakerCheckerOr4EyeFunctionalityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MakerCheckerOr4EyeFunctionalityApiFp(configuration)
    return {
        /**
         * 
         * @summary Approve Maker Checker Entry | Reject Maker Checker Entry
         * @param {number} auditId auditId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveMakerCheckerEntry(auditId: number, command?: string, options?: any): AxiosPromise<PostMakerCheckersResponse> {
            return localVarFp.approveMakerCheckerEntry(auditId, command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Maker Checker Entry
         * @param {number} auditId auditId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMakerCheckerEntry(auditId: number, options?: any): AxiosPromise<PostMakerCheckersResponse> {
            return localVarFp.deleteMakerCheckerEntry(auditId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building a Checker Inbox UI. \"appUsers\" are data scoped to the office/branch the requestor is associated with. \"actionNames\" and \"entityNames\" returned are those that the requestor has Checker approval permissions for.  Example Requests:  makercheckers/searchtemplate makercheckers/searchtemplate?fields=entityNames
         * @summary Maker Checker Search Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAuditSearchTemplate1(options?: any): AxiosPromise<GetMakerCheckersSearchTemplateResponse> {
            return localVarFp.retrieveAuditSearchTemplate1(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of entries that can be checked by the requestor that match the criteria supplied.  Example Requests:  makercheckers  makercheckers?fields=madeOnDate,maker,processingResult  makercheckers?makerDateTimeFrom=2013-03-25 08:00:00&makerDateTimeTo=2013-04-04 18:00:00  makercheckers?officeId=1  makercheckers?officeId=1&includeJson=true
         * @summary List Maker Checker Entries
         * @param {string} [actionName] actionName
         * @param {string} [entityName] entityName
         * @param {number} [resourceId] resourceId
         * @param {number} [makerId] makerId
         * @param {string} [makerDateTimeFrom] makerDateTimeFrom
         * @param {string} [makerDateTimeTo] makerDateTimeTo
         * @param {number} [officeId] officeId
         * @param {number} [groupId] groupId
         * @param {number} [clientId] clientId
         * @param {number} [loanid] loanid
         * @param {number} [savingsAccountId] savingsAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCommands(actionName?: string, entityName?: string, resourceId?: number, makerId?: number, makerDateTimeFrom?: string, makerDateTimeTo?: string, officeId?: number, groupId?: number, clientId?: number, loanid?: number, savingsAccountId?: number, options?: any): AxiosPromise<Array<GetMakerCheckerResponse>> {
            return localVarFp.retrieveCommands(actionName, entityName, resourceId, makerId, makerDateTimeFrom, makerDateTimeTo, officeId, groupId, clientId, loanid, savingsAccountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MakerCheckerOr4EyeFunctionalityApi - object-oriented interface
 * @export
 * @class MakerCheckerOr4EyeFunctionalityApi
 * @extends {BaseAPI}
 */
export class MakerCheckerOr4EyeFunctionalityApi extends BaseAPI {
    /**
     * 
     * @summary Approve Maker Checker Entry | Reject Maker Checker Entry
     * @param {number} auditId auditId
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MakerCheckerOr4EyeFunctionalityApi
     */
    public approveMakerCheckerEntry(auditId: number, command?: string, options?: any) {
        return MakerCheckerOr4EyeFunctionalityApiFp(this.configuration).approveMakerCheckerEntry(auditId, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Maker Checker Entry
     * @param {number} auditId auditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MakerCheckerOr4EyeFunctionalityApi
     */
    public deleteMakerCheckerEntry(auditId: number, options?: any) {
        return MakerCheckerOr4EyeFunctionalityApiFp(this.configuration).deleteMakerCheckerEntry(auditId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building a Checker Inbox UI. \"appUsers\" are data scoped to the office/branch the requestor is associated with. \"actionNames\" and \"entityNames\" returned are those that the requestor has Checker approval permissions for.  Example Requests:  makercheckers/searchtemplate makercheckers/searchtemplate?fields=entityNames
     * @summary Maker Checker Search Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MakerCheckerOr4EyeFunctionalityApi
     */
    public retrieveAuditSearchTemplate1(options?: any) {
        return MakerCheckerOr4EyeFunctionalityApiFp(this.configuration).retrieveAuditSearchTemplate1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of entries that can be checked by the requestor that match the criteria supplied.  Example Requests:  makercheckers  makercheckers?fields=madeOnDate,maker,processingResult  makercheckers?makerDateTimeFrom=2013-03-25 08:00:00&makerDateTimeTo=2013-04-04 18:00:00  makercheckers?officeId=1  makercheckers?officeId=1&includeJson=true
     * @summary List Maker Checker Entries
     * @param {string} [actionName] actionName
     * @param {string} [entityName] entityName
     * @param {number} [resourceId] resourceId
     * @param {number} [makerId] makerId
     * @param {string} [makerDateTimeFrom] makerDateTimeFrom
     * @param {string} [makerDateTimeTo] makerDateTimeTo
     * @param {number} [officeId] officeId
     * @param {number} [groupId] groupId
     * @param {number} [clientId] clientId
     * @param {number} [loanid] loanid
     * @param {number} [savingsAccountId] savingsAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MakerCheckerOr4EyeFunctionalityApi
     */
    public retrieveCommands(actionName?: string, entityName?: string, resourceId?: number, makerId?: number, makerDateTimeFrom?: string, makerDateTimeTo?: string, officeId?: number, groupId?: number, clientId?: number, loanid?: number, savingsAccountId?: number, options?: any) {
        return MakerCheckerOr4EyeFunctionalityApiFp(this.configuration).retrieveCommands(actionName, entityName, resourceId, makerId, makerDateTimeFrom, makerDateTimeTo, officeId, groupId, clientId, loanid, savingsAccountId, options).then((request) => request(this.axios, this.basePath));
    }
}
