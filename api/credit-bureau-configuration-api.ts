/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * CreditBureauConfigurationApi - axios parameter creator
 * @export
 */
export const CreditBureauConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrganisationCreditBureau: async (organisationCreditBureauId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organisationCreditBureauId' is not null or undefined
            assertParamExists('addOrganisationCreditBureau', 'organisationCreditBureauId', organisationCreditBureauId)
            const localVarPath = `/CreditBureauConfiguration/organisationCreditBureau/{organisationCreditBureauId}`
                .replace(`{${"organisationCreditBureauId"}}`, encodeURIComponent(String(organisationCreditBureauId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} creditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreditBureauConfiguration: async (creditBureauId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBureauId' is not null or undefined
            assertParamExists('createCreditBureauConfiguration', 'creditBureauId', creditBureauId)
            const localVarPath = `/CreditBureauConfiguration/configuration/{creditBureauId}`
                .replace(`{${"creditBureauId"}}`, encodeURIComponent(String(creditBureauId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreditBureauLoanProductMapping: async (organisationCreditBureauId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organisationCreditBureauId' is not null or undefined
            assertParamExists('createCreditBureauLoanProductMapping', 'organisationCreditBureauId', organisationCreditBureauId)
            const localVarPath = `/CreditBureauConfiguration/mappings/{organisationCreditBureauId}`
                .replace(`{${"organisationCreditBureauId"}}`, encodeURIComponent(String(organisationCreditBureauId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLoanProducts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreditBureauConfiguration/loanProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} loanProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMappingByLoanProductId: async (loanProductId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanProductId' is not null or undefined
            assertParamExists('fetchMappingByLoanProductId', 'loanProductId', loanProductId)
            const localVarPath = `/CreditBureauConfiguration/loanProduct/{loanProductId}`
                .replace(`{${"loanProductId"}}`, encodeURIComponent(String(loanProductId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: async (organisationCreditBureauId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organisationCreditBureauId' is not null or undefined
            assertParamExists('getConfiguration', 'organisationCreditBureauId', organisationCreditBureauId)
            const localVarPath = `/CreditBureauConfiguration/config/{organisationCreditBureauId}`
                .replace(`{${"organisationCreditBureauId"}}`, encodeURIComponent(String(organisationCreditBureauId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditBureau: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreditBureauConfiguration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditBureauLoanProductMapping: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreditBureauConfiguration/mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisationCreditBureau: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreditBureauConfiguration/organisationCreditBureau`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreditBureau: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreditBureauConfiguration/organisationCreditBureau`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} configurationId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreditBureauConfiguration: async (configurationId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'configurationId' is not null or undefined
            assertParamExists('updateCreditBureauConfiguration', 'configurationId', configurationId)
            const localVarPath = `/CreditBureauConfiguration/configuration/{configurationId}`
                .replace(`{${"configurationId"}}`, encodeURIComponent(String(configurationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreditBureauLoanProductMapping: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreditBureauConfiguration/mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditBureauConfigurationApi - functional programming interface
 * @export
 */
export const CreditBureauConfigurationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditBureauConfigurationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrganisationCreditBureau(organisationCreditBureauId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrganisationCreditBureau(organisationCreditBureauId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} creditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCreditBureauConfiguration(creditBureauId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCreditBureauConfiguration(creditBureauId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCreditBureauLoanProductMapping(organisationCreditBureauId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCreditBureauLoanProductMapping(organisationCreditBureauId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLoanProducts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchLoanProducts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} loanProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMappingByLoanProductId(loanProductId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMappingByLoanProductId(loanProductId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfiguration(organisationCreditBureauId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfiguration(organisationCreditBureauId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreditBureau(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreditBureau(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreditBureauLoanProductMapping(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreditBureauLoanProductMapping(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganisationCreditBureau(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganisationCreditBureau(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCreditBureau(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCreditBureau(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} configurationId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCreditBureauConfiguration(configurationId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCreditBureauConfiguration(configurationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCreditBureauLoanProductMapping(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCreditBureauLoanProductMapping(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditBureauConfigurationApi - factory interface
 * @export
 */
export const CreditBureauConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditBureauConfigurationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrganisationCreditBureau(organisationCreditBureauId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.addOrganisationCreditBureau(organisationCreditBureauId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} creditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreditBureauConfiguration(creditBureauId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.createCreditBureauConfiguration(creditBureauId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreditBureauLoanProductMapping(organisationCreditBureauId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.createCreditBureauLoanProductMapping(organisationCreditBureauId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLoanProducts(options?: any): AxiosPromise<string> {
            return localVarFp.fetchLoanProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} loanProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMappingByLoanProductId(loanProductId: number, options?: any): AxiosPromise<string> {
            return localVarFp.fetchMappingByLoanProductId(loanProductId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organisationCreditBureauId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration(organisationCreditBureauId: number, options?: any): AxiosPromise<string> {
            return localVarFp.getConfiguration(organisationCreditBureauId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditBureau(options?: any): AxiosPromise<string> {
            return localVarFp.getCreditBureau(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditBureauLoanProductMapping(options?: any): AxiosPromise<string> {
            return localVarFp.getCreditBureauLoanProductMapping(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisationCreditBureau(options?: any): AxiosPromise<string> {
            return localVarFp.getOrganisationCreditBureau(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreditBureau(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateCreditBureau(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} configurationId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreditBureauConfiguration(configurationId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateCreditBureauConfiguration(configurationId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreditBureauLoanProductMapping(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateCreditBureauLoanProductMapping(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditBureauConfigurationApi - object-oriented interface
 * @export
 * @class CreditBureauConfigurationApi
 * @extends {BaseAPI}
 */
export class CreditBureauConfigurationApi extends BaseAPI {
    /**
     * 
     * @param {number} organisationCreditBureauId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public addOrganisationCreditBureau(organisationCreditBureauId: number, body?: string, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).addOrganisationCreditBureau(organisationCreditBureauId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} creditBureauId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public createCreditBureauConfiguration(creditBureauId: number, body?: string, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).createCreditBureauConfiguration(creditBureauId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} organisationCreditBureauId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public createCreditBureauLoanProductMapping(organisationCreditBureauId: number, body?: string, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).createCreditBureauLoanProductMapping(organisationCreditBureauId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public fetchLoanProducts(options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).fetchLoanProducts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} loanProductId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public fetchMappingByLoanProductId(loanProductId: number, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).fetchMappingByLoanProductId(loanProductId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} organisationCreditBureauId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public getConfiguration(organisationCreditBureauId: number, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).getConfiguration(organisationCreditBureauId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public getCreditBureau(options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).getCreditBureau(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public getCreditBureauLoanProductMapping(options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).getCreditBureauLoanProductMapping(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public getOrganisationCreditBureau(options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).getOrganisationCreditBureau(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public updateCreditBureau(body?: string, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).updateCreditBureau(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} configurationId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public updateCreditBureauConfiguration(configurationId: number, body?: string, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).updateCreditBureauConfiguration(configurationId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditBureauConfigurationApi
     */
    public updateCreditBureauLoanProductMapping(body?: string, options?: any) {
        return CreditBureauConfigurationApiFp(this.configuration).updateCreditBureauLoanProductMapping(body, options).then((request) => request(this.axios, this.basePath));
    }
}
