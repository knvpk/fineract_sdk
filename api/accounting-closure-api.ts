/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteGlClosuresResponse } from '../models';
// @ts-ignore
import { GetGlClosureResponse } from '../models';
// @ts-ignore
import { PostGlClosuresRequest } from '../models';
// @ts-ignore
import { PostGlClosuresResponse } from '../models';
// @ts-ignore
import { PutGlClosuresRequest } from '../models';
// @ts-ignore
import { PutGlClosuresResponse } from '../models';
/**
 * AccountingClosureApi - axios parameter creator
 * @export
 */
export const AccountingClosureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mandatory Fields officeId,closingDate
         * @summary Create an Accounting Closure
         * @param {PostGlClosuresRequest} postGlClosuresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGLClosure: async (postGlClosuresRequest: PostGlClosuresRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postGlClosuresRequest' is not null or undefined
            assertParamExists('createGLClosure', 'postGlClosuresRequest', postGlClosuresRequest)
            const localVarPath = `/glclosures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGlClosuresRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: Only the latest accounting closure associated with a branch may be deleted.
         * @summary Delete an accounting closure
         * @param {number} glClosureId glclosureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGLClosure: async (glClosureId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'glClosureId' is not null or undefined
            assertParamExists('deleteGLClosure', 'glClosureId', glClosureId)
            const localVarPath = `/glclosures/{glClosureId}`
                .replace(`{${"glClosureId"}}`, encodeURIComponent(String(glClosureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  glclosures/1   /glclosures/1?fields=officeName,closingDate
         * @summary Retrieve an Accounting Closure
         * @param {number} glClosureId glClosureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveClosure: async (glClosureId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'glClosureId' is not null or undefined
            assertParamExists('retreiveClosure', 'glClosureId', glClosureId)
            const localVarPath = `/glclosures/{glClosureId}`
                .replace(`{${"glClosureId"}}`, encodeURIComponent(String(glClosureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  glclosures
         * @summary List Accounting closures
         * @param {number} [officeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClosures: async (officeId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/glclosures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Once an accounting closure is created, only the comments associated with it may be edited
         * @summary Update an Accounting closure
         * @param {number} glClosureId glClosureId
         * @param {PutGlClosuresRequest} [putGlClosuresRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGLClosure: async (glClosureId: number, putGlClosuresRequest?: PutGlClosuresRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'glClosureId' is not null or undefined
            assertParamExists('updateGLClosure', 'glClosureId', glClosureId)
            const localVarPath = `/glclosures/{glClosureId}`
                .replace(`{${"glClosureId"}}`, encodeURIComponent(String(glClosureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putGlClosuresRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountingClosureApi - functional programming interface
 * @export
 */
export const AccountingClosureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountingClosureApiAxiosParamCreator(configuration)
    return {
        /**
         * Mandatory Fields officeId,closingDate
         * @summary Create an Accounting Closure
         * @param {PostGlClosuresRequest} postGlClosuresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGLClosure(postGlClosuresRequest: PostGlClosuresRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostGlClosuresResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGLClosure(postGlClosuresRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: Only the latest accounting closure associated with a branch may be deleted.
         * @summary Delete an accounting closure
         * @param {number} glClosureId glclosureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGLClosure(glClosureId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGlClosuresResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGLClosure(glClosureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  glclosures/1   /glclosures/1?fields=officeName,closingDate
         * @summary Retrieve an Accounting Closure
         * @param {number} glClosureId glClosureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retreiveClosure(glClosureId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGlClosureResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retreiveClosure(glClosureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  glclosures
         * @summary List Accounting closures
         * @param {number} [officeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllClosures(officeId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetGlClosureResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllClosures(officeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Once an accounting closure is created, only the comments associated with it may be edited
         * @summary Update an Accounting closure
         * @param {number} glClosureId glClosureId
         * @param {PutGlClosuresRequest} [putGlClosuresRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGLClosure(glClosureId: number, putGlClosuresRequest?: PutGlClosuresRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutGlClosuresResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGLClosure(glClosureId, putGlClosuresRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountingClosureApi - factory interface
 * @export
 */
export const AccountingClosureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountingClosureApiFp(configuration)
    return {
        /**
         * Mandatory Fields officeId,closingDate
         * @summary Create an Accounting Closure
         * @param {PostGlClosuresRequest} postGlClosuresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGLClosure(postGlClosuresRequest: PostGlClosuresRequest, options?: any): AxiosPromise<PostGlClosuresResponse> {
            return localVarFp.createGLClosure(postGlClosuresRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: Only the latest accounting closure associated with a branch may be deleted.
         * @summary Delete an accounting closure
         * @param {number} glClosureId glclosureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGLClosure(glClosureId: number, options?: any): AxiosPromise<DeleteGlClosuresResponse> {
            return localVarFp.deleteGLClosure(glClosureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  glclosures/1   /glclosures/1?fields=officeName,closingDate
         * @summary Retrieve an Accounting Closure
         * @param {number} glClosureId glClosureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveClosure(glClosureId: number, options?: any): AxiosPromise<GetGlClosureResponse> {
            return localVarFp.retreiveClosure(glClosureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  glclosures
         * @summary List Accounting closures
         * @param {number} [officeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClosures(officeId?: number, options?: any): AxiosPromise<Array<GetGlClosureResponse>> {
            return localVarFp.retrieveAllClosures(officeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Once an accounting closure is created, only the comments associated with it may be edited
         * @summary Update an Accounting closure
         * @param {number} glClosureId glClosureId
         * @param {PutGlClosuresRequest} [putGlClosuresRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGLClosure(glClosureId: number, putGlClosuresRequest?: PutGlClosuresRequest, options?: any): AxiosPromise<PutGlClosuresResponse> {
            return localVarFp.updateGLClosure(glClosureId, putGlClosuresRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountingClosureApi - object-oriented interface
 * @export
 * @class AccountingClosureApi
 * @extends {BaseAPI}
 */
export class AccountingClosureApi extends BaseAPI {
    /**
     * Mandatory Fields officeId,closingDate
     * @summary Create an Accounting Closure
     * @param {PostGlClosuresRequest} postGlClosuresRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingClosureApi
     */
    public createGLClosure(postGlClosuresRequest: PostGlClosuresRequest, options?: any) {
        return AccountingClosureApiFp(this.configuration).createGLClosure(postGlClosuresRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: Only the latest accounting closure associated with a branch may be deleted.
     * @summary Delete an accounting closure
     * @param {number} glClosureId glclosureId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingClosureApi
     */
    public deleteGLClosure(glClosureId: number, options?: any) {
        return AccountingClosureApiFp(this.configuration).deleteGLClosure(glClosureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  glclosures/1   /glclosures/1?fields=officeName,closingDate
     * @summary Retrieve an Accounting Closure
     * @param {number} glClosureId glClosureId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingClosureApi
     */
    public retreiveClosure(glClosureId: number, options?: any) {
        return AccountingClosureApiFp(this.configuration).retreiveClosure(glClosureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  glclosures
     * @summary List Accounting closures
     * @param {number} [officeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingClosureApi
     */
    public retrieveAllClosures(officeId?: number, options?: any) {
        return AccountingClosureApiFp(this.configuration).retrieveAllClosures(officeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Once an accounting closure is created, only the comments associated with it may be edited
     * @summary Update an Accounting closure
     * @param {number} glClosureId glClosureId
     * @param {PutGlClosuresRequest} [putGlClosuresRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingClosureApi
     */
    public updateGLClosure(glClosureId: number, putGlClosuresRequest?: PutGlClosuresRequest, options?: any) {
        return AccountingClosureApiFp(this.configuration).updateGLClosure(glClosureId, putGlClosuresRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
