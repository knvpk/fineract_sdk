/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteHolidaysHolidayIdResponse } from '../models';
// @ts-ignore
import { GetHolidaysResponse } from '../models';
// @ts-ignore
import { PostHolidaysHolidayIdResponse } from '../models';
// @ts-ignore
import { PostHolidaysRequest } from '../models';
// @ts-ignore
import { PostHolidaysResponse } from '../models';
// @ts-ignore
import { PutHolidaysHolidayIdRequest } from '../models';
// @ts-ignore
import { PutHolidaysHolidayIdResponse } from '../models';
/**
 * HolidaysApi - axios parameter creator
 * @export
 */
export const HolidaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mandatory Fields: name, description, fromDate, toDate, repaymentsRescheduledTo, offices
         * @summary Create a Holiday
         * @param {PostHolidaysRequest} postHolidaysRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewHoliday: async (postHolidaysRequest: PostHolidaysRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postHolidaysRequest' is not null or undefined
            assertParamExists('createNewHoliday', 'postHolidaysRequest', postHolidaysRequest)
            const localVarPath = `/holidays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postHolidaysRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows to delete a holiday. This is a soft delete the deleted holiday status is marked as deleted.
         * @summary Delete a Holiday
         * @param {number} holidayId holidayId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete7: async (holidayId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'holidayId' is not null or undefined
            assertParamExists('delete7', 'holidayId', holidayId)
            const localVarPath = `/holidays/{holidayId}`
                .replace(`{${"holidayId"}}`, encodeURIComponent(String(holidayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Always Holidays are created in pending state. This API allows to activate a holiday.  Only the active holidays are considered for rescheduling the loan repayment.
         * @summary Activate a Holiday
         * @param {number} holidayId holidayId
         * @param {object} body 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleCommands1: async (holidayId: number, body: object, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'holidayId' is not null or undefined
            assertParamExists('handleCommands1', 'holidayId', holidayId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('handleCommands1', 'body', body)
            const localVarPath = `/holidays/{holidayId}`
                .replace(`{${"holidayId"}}`, encodeURIComponent(String(holidayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  holidays?officeId=1
         * @summary List Holidays
         * @param {number} [officeId] officeId
         * @param {object} [fromDate] fromDate
         * @param {object} [toDate] toDate
         * @param {string} [locale] locale
         * @param {string} [dateFormat] dateFormat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllHolidays: async (officeId?: number, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/holidays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  holidays/1
         * @summary Retrieve a Holiday
         * @param {number} holidayId holidayId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne7: async (holidayId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'holidayId' is not null or undefined
            assertParamExists('retrieveOne7', 'holidayId', holidayId)
            const localVarPath = `/holidays/{holidayId}`
                .replace(`{${"holidayId"}}`, encodeURIComponent(String(holidayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRepaymentScheduleUpdationTyeOptions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/holidays/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If a holiday is in pending state (created and not activated) then all fields are allowed to modify. Once holidays become active only name and descriptions are allowed to modify.
         * @summary Update a Holiday
         * @param {number} holidayId holidayId
         * @param {PutHolidaysHolidayIdRequest} putHolidaysHolidayIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6: async (holidayId: number, putHolidaysHolidayIdRequest: PutHolidaysHolidayIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'holidayId' is not null or undefined
            assertParamExists('update6', 'holidayId', holidayId)
            // verify required parameter 'putHolidaysHolidayIdRequest' is not null or undefined
            assertParamExists('update6', 'putHolidaysHolidayIdRequest', putHolidaysHolidayIdRequest)
            const localVarPath = `/holidays/{holidayId}`
                .replace(`{${"holidayId"}}`, encodeURIComponent(String(holidayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putHolidaysHolidayIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HolidaysApi - functional programming interface
 * @export
 */
export const HolidaysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HolidaysApiAxiosParamCreator(configuration)
    return {
        /**
         * Mandatory Fields: name, description, fromDate, toDate, repaymentsRescheduledTo, offices
         * @summary Create a Holiday
         * @param {PostHolidaysRequest} postHolidaysRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewHoliday(postHolidaysRequest: PostHolidaysRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostHolidaysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewHoliday(postHolidaysRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows to delete a holiday. This is a soft delete the deleted holiday status is marked as deleted.
         * @summary Delete a Holiday
         * @param {number} holidayId holidayId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete7(holidayId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteHolidaysHolidayIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete7(holidayId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Always Holidays are created in pending state. This API allows to activate a holiday.  Only the active holidays are considered for rescheduling the loan repayment.
         * @summary Activate a Holiday
         * @param {number} holidayId holidayId
         * @param {object} body 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleCommands1(holidayId: number, body: object, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostHolidaysHolidayIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleCommands1(holidayId, body, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  holidays?officeId=1
         * @summary List Holidays
         * @param {number} [officeId] officeId
         * @param {object} [fromDate] fromDate
         * @param {object} [toDate] toDate
         * @param {string} [locale] locale
         * @param {string} [dateFormat] dateFormat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllHolidays(officeId?: number, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetHolidaysResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllHolidays(officeId, fromDate, toDate, locale, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  holidays/1
         * @summary Retrieve a Holiday
         * @param {number} holidayId holidayId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne7(holidayId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHolidaysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne7(holidayId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveRepaymentScheduleUpdationTyeOptions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRepaymentScheduleUpdationTyeOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If a holiday is in pending state (created and not activated) then all fields are allowed to modify. Once holidays become active only name and descriptions are allowed to modify.
         * @summary Update a Holiday
         * @param {number} holidayId holidayId
         * @param {PutHolidaysHolidayIdRequest} putHolidaysHolidayIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update6(holidayId: number, putHolidaysHolidayIdRequest: PutHolidaysHolidayIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutHolidaysHolidayIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update6(holidayId, putHolidaysHolidayIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HolidaysApi - factory interface
 * @export
 */
export const HolidaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HolidaysApiFp(configuration)
    return {
        /**
         * Mandatory Fields: name, description, fromDate, toDate, repaymentsRescheduledTo, offices
         * @summary Create a Holiday
         * @param {PostHolidaysRequest} postHolidaysRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewHoliday(postHolidaysRequest: PostHolidaysRequest, options?: any): AxiosPromise<PostHolidaysResponse> {
            return localVarFp.createNewHoliday(postHolidaysRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows to delete a holiday. This is a soft delete the deleted holiday status is marked as deleted.
         * @summary Delete a Holiday
         * @param {number} holidayId holidayId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete7(holidayId: number, options?: any): AxiosPromise<DeleteHolidaysHolidayIdResponse> {
            return localVarFp.delete7(holidayId, options).then((request) => request(axios, basePath));
        },
        /**
         * Always Holidays are created in pending state. This API allows to activate a holiday.  Only the active holidays are considered for rescheduling the loan repayment.
         * @summary Activate a Holiday
         * @param {number} holidayId holidayId
         * @param {object} body 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleCommands1(holidayId: number, body: object, command?: string, options?: any): AxiosPromise<PostHolidaysHolidayIdResponse> {
            return localVarFp.handleCommands1(holidayId, body, command, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  holidays?officeId=1
         * @summary List Holidays
         * @param {number} [officeId] officeId
         * @param {object} [fromDate] fromDate
         * @param {object} [toDate] toDate
         * @param {string} [locale] locale
         * @param {string} [dateFormat] dateFormat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllHolidays(officeId?: number, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options?: any): AxiosPromise<Array<GetHolidaysResponse>> {
            return localVarFp.retrieveAllHolidays(officeId, fromDate, toDate, locale, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  holidays/1
         * @summary Retrieve a Holiday
         * @param {number} holidayId holidayId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne7(holidayId: number, options?: any): AxiosPromise<GetHolidaysResponse> {
            return localVarFp.retrieveOne7(holidayId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRepaymentScheduleUpdationTyeOptions(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveRepaymentScheduleUpdationTyeOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * If a holiday is in pending state (created and not activated) then all fields are allowed to modify. Once holidays become active only name and descriptions are allowed to modify.
         * @summary Update a Holiday
         * @param {number} holidayId holidayId
         * @param {PutHolidaysHolidayIdRequest} putHolidaysHolidayIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6(holidayId: number, putHolidaysHolidayIdRequest: PutHolidaysHolidayIdRequest, options?: any): AxiosPromise<PutHolidaysHolidayIdResponse> {
            return localVarFp.update6(holidayId, putHolidaysHolidayIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HolidaysApi - object-oriented interface
 * @export
 * @class HolidaysApi
 * @extends {BaseAPI}
 */
export class HolidaysApi extends BaseAPI {
    /**
     * Mandatory Fields: name, description, fromDate, toDate, repaymentsRescheduledTo, offices
     * @summary Create a Holiday
     * @param {PostHolidaysRequest} postHolidaysRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidaysApi
     */
    public createNewHoliday(postHolidaysRequest: PostHolidaysRequest, options?: any) {
        return HolidaysApiFp(this.configuration).createNewHoliday(postHolidaysRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows to delete a holiday. This is a soft delete the deleted holiday status is marked as deleted.
     * @summary Delete a Holiday
     * @param {number} holidayId holidayId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidaysApi
     */
    public delete7(holidayId: number, options?: any) {
        return HolidaysApiFp(this.configuration).delete7(holidayId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Always Holidays are created in pending state. This API allows to activate a holiday.  Only the active holidays are considered for rescheduling the loan repayment.
     * @summary Activate a Holiday
     * @param {number} holidayId holidayId
     * @param {object} body 
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidaysApi
     */
    public handleCommands1(holidayId: number, body: object, command?: string, options?: any) {
        return HolidaysApiFp(this.configuration).handleCommands1(holidayId, body, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  holidays?officeId=1
     * @summary List Holidays
     * @param {number} [officeId] officeId
     * @param {object} [fromDate] fromDate
     * @param {object} [toDate] toDate
     * @param {string} [locale] locale
     * @param {string} [dateFormat] dateFormat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidaysApi
     */
    public retrieveAllHolidays(officeId?: number, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options?: any) {
        return HolidaysApiFp(this.configuration).retrieveAllHolidays(officeId, fromDate, toDate, locale, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  holidays/1
     * @summary Retrieve a Holiday
     * @param {number} holidayId holidayId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidaysApi
     */
    public retrieveOne7(holidayId: number, options?: any) {
        return HolidaysApiFp(this.configuration).retrieveOne7(holidayId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidaysApi
     */
    public retrieveRepaymentScheduleUpdationTyeOptions(options?: any) {
        return HolidaysApiFp(this.configuration).retrieveRepaymentScheduleUpdationTyeOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If a holiday is in pending state (created and not activated) then all fields are allowed to modify. Once holidays become active only name and descriptions are allowed to modify.
     * @summary Update a Holiday
     * @param {number} holidayId holidayId
     * @param {PutHolidaysHolidayIdRequest} putHolidaysHolidayIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidaysApi
     */
    public update6(holidayId: number, putHolidaysHolidayIdRequest: PutHolidaysHolidayIdRequest, options?: any) {
        return HolidaysApiFp(this.configuration).update6(holidayId, putHolidaysHolidayIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
