/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommandProcessingResult } from '../models';
// @ts-ignore
import { CommandWrapper } from '../models';
// @ts-ignore
import { FormDataBodyPart } from '../models';
// @ts-ignore
import { FormDataContentDisposition } from '../models';
// @ts-ignore
import { SmsCampaignData } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate: async (resourceId: number, command?: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('activate', 'resourceId', resourceId)
            const localVarPath = `/email/campaign/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [creditBureauId] creditBureauId
         * @param {FormDataContentDisposition} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCreditReport: async (creditBureauId?: number, file?: FormDataContentDisposition, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/creditBureauIntegration/addCreditReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (creditBureauId !== undefined) {
                localVarQueryParameter['creditBureauId'] = creditBureauId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClientImage1: async (entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entity' is not null or undefined
            assertParamExists('addNewClientImage1', 'entity', entity)
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('addNewClientImage1', 'entityId', entityId)
            const localVarPath = `/{entity}/{entityId}/images`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (contentLength !== undefined && contentLength !== null) {
                localVarHeaderParameter['Content-Length'] = String(JSON.stringify(contentLength));
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/campaign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mandatory Fields campaignName, campaignType, triggerType, providerId, runReportId, message  Mandatory Fields for Cash based on selected report id paramValue in json format
         * @summary Create a SMS Campaign
         * @param {CommandWrapper} commandWrapper 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign1: async (commandWrapper: CommandWrapper, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'commandWrapper' is not null or undefined
            assertParamExists('createCampaign1', 'commandWrapper', commandWrapper)
            const localVarPath = `/smscampaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commandWrapper, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (resourceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('delete1', 'resourceId', resourceId)
            const localVarPath = `/email/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: async (resourceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('delete2', 'resourceId', resourceId)
            const localVarPath = `/email/campaign/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: Only closed SMS Campaigns can be deleted
         * @summary Delete a SMS Campaign
         * @param {number} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3: async (campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('delete3', 'campaignId', campaignId)
            const localVarPath = `/smscampaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete8: async (transactionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('delete8', 'transactionId', transactionId)
            const localVarPath = `/officetransactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientImage: async (entity: string, entityId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entity' is not null or undefined
            assertParamExists('deleteClientImage', 'entity', entity)
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('deleteClientImage', 'entityId', entityId)
            const localVarPath = `/{entity}/{entityId}/images`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} creditBureauId creditBureauId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCreditReport: async (creditBureauId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBureauId' is not null or undefined
            assertParamExists('deleteCreditReport', 'creditBureauId', creditBureauId)
            const localVarPath = `/creditBureauIntegration/deleteCreditReport/{creditBureauId}`
                .replace(`{${"creditBureauId"}}`, encodeURIComponent(String(creditBureauId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreditReport: async (requestBody?: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/creditBureauIntegration/creditReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/echo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} creditBureauId creditBureauId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedCreditReport: async (creditBureauId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditBureauId' is not null or undefined
            assertParamExists('getSavedCreditReport', 'creditBureauId', creditBureauId)
            const localVarPath = `/creditBureauIntegration/creditReport/{creditBureauId}`
                .replace(`{${"creditBureauId"}}`, encodeURIComponent(String(creditBureauId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates | Deactivates | Reactivates
         * @summary SMS Campaign
         * @param {number} campaignId 
         * @param {string} [command] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleCommands: async (campaignId: number, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('handleCommands', 'campaignId', campaignId)
            const localVarPath = `/smscampaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newOfficeTransactionDetails: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/officetransactions/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preview: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/campaign/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preview1: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/smscampaigns/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll5: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll9: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/twofactor/configure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllCampaign: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/campaign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {number} [status] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {object} [fromDate] 
         * @param {object} [toDate] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllEmailByStatus: async (sqlSearch?: string, offset?: number, limit?: number, status?: number, orderBy?: string, sortOrder?: string, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/messageByStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (sqlSearch !== undefined) {
                localVarQueryParameter['sqlSearch'] = sqlSearch;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllEmails: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  smscampaigns
         * @summary List SMS Campaigns
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllEmails1: async (sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/smscampaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (sqlSearch !== undefined) {
                localVarQueryParameter['sqlSearch'] = sqlSearch;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  smscampaigns/1 
         * @summary Retrieve a SMS Campaign
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCampaign: async (resourceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('retrieveCampaign', 'resourceId', resourceId)
            const localVarPath = `/smscampaigns/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFailedEmail: async (sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/failedEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (sqlSearch !== undefined) {
                localVarQueryParameter['sqlSearch'] = sqlSearch;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [maxWidth] 
         * @param {number} [maxHeight] 
         * @param {string} [output] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveImage: async (entity: string, entityId: number, maxWidth?: number, maxHeight?: number, output?: string, accept?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entity' is not null or undefined
            assertParamExists('retrieveImage', 'entity', entity)
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('retrieveImage', 'entityId', entityId)
            const localVarPath = `/{entity}/{entityId}/images`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOfficeTransactions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/officetransactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne1: async (resourceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('retrieveOne1', 'resourceId', resourceId)
            const localVarPath = `/email/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOneCampaign: async (resourceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('retrieveOneCampaign', 'resourceId', resourceId)
            const localVarPath = `/email/campaign/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOneTemplate: async (resourceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('retrieveOneTemplate', 'resourceId', resourceId)
            const localVarPath = `/email/campaign/template/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePendingEmail: async (sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/pendingEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (sqlSearch !== undefined) {
                localVarQueryParameter['sqlSearch'] = sqlSearch;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSentEmail: async (sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/sentEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (sqlSearch !== undefined) {
                localVarQueryParameter['sqlSearch'] = sqlSearch;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [creditBureauId] creditBureauId
         * @param {string} [nationalId] nationalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCreditReport: async (creditBureauId?: number, nationalId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/creditBureauIntegration/saveCreditReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (creditBureauId !== undefined) {
                localVarQueryParameter['creditBureauId'] = creditBureauId;
            }

            if (nationalId !== undefined) {
                localVarQueryParameter['nationalId'] = nationalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/campaign/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  smscampaigns/1   smscampaigns/1?template=true   smscampaigns/template
         * @summary Retrieve a SMS Campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/smscampaigns/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMoneyFrom: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/officetransactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (resourceId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('update2', 'resourceId', resourceId)
            const localVarPath = `/email/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign: async (resourceId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateCampaign', 'resourceId', resourceId)
            const localVarPath = `/email/campaign/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Campaign
         * @param {number} campaignId 
         * @param {CommandWrapper} commandWrapper 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign1: async (campaignId: number, commandWrapper: CommandWrapper, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('updateCampaign1', 'campaignId', campaignId)
            // verify required parameter 'commandWrapper' is not null or undefined
            assertParamExists('updateCampaign1', 'commandWrapper', commandWrapper)
            const localVarPath = `/smscampaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commandWrapper, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientImage1: async (entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entity' is not null or undefined
            assertParamExists('updateClientImage1', 'entity', entity)
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('updateClientImage1', 'entityId', entityId)
            const localVarPath = `/{entity}/{entityId}/images`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (contentLength !== undefined && contentLength !== null) {
                localVarHeaderParameter['Content-Length'] = String(JSON.stringify(contentLength));
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration3: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/twofactor/configure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activate(resourceId: number, command?: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activate(resourceId, command, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [creditBureauId] creditBureauId
         * @param {FormDataContentDisposition} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCreditReport(creditBureauId?: number, file?: FormDataContentDisposition, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCreditReport(creditBureauId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewClientImage1(entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewClientImage1(entity, entityId, contentLength, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaign(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaign(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mandatory Fields campaignName, campaignType, triggerType, providerId, runReportId, message  Mandatory Fields for Cash based on selected report id paramValue in json format
         * @summary Create a SMS Campaign
         * @param {CommandWrapper} commandWrapper 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaign1(commandWrapper: CommandWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandProcessingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaign1(commandWrapper, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(resourceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete2(resourceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete2(resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: Only closed SMS Campaigns can be deleted
         * @summary Delete a SMS Campaign
         * @param {number} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandProcessingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete3(campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete8(transactionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete8(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientImage(entity: string, entityId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientImage(entity, entityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} creditBureauId creditBureauId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCreditReport(creditBureauId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCreditReport(creditBureauId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCreditReport(requestBody?: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCreditReport(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} creditBureauId creditBureauId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavedCreditReport(creditBureauId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavedCreditReport(creditBureauId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Activates | Deactivates | Reactivates
         * @summary SMS Campaign
         * @param {number} campaignId 
         * @param {string} [command] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleCommands(campaignId: number, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandProcessingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleCommands(campaignId, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newOfficeTransactionDetails(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newOfficeTransactionDetails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preview(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preview(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preview1(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preview1(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll5(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll5(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll9(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll9(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllCampaign(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllCampaign(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {number} [status] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {object} [fromDate] 
         * @param {object} [toDate] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllEmailByStatus(sqlSearch?: string, offset?: number, limit?: number, status?: number, orderBy?: string, sortOrder?: string, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllEmailByStatus(sqlSearch, offset, limit, status, orderBy, sortOrder, fromDate, toDate, locale, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllEmails(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllEmails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  smscampaigns
         * @summary List SMS Campaigns
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllEmails1(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmsCampaignData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllEmails1(sqlSearch, offset, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  smscampaigns/1 
         * @summary Retrieve a SMS Campaign
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCampaign(resourceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmsCampaignData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCampaign(resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveFailedEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveFailedEmail(sqlSearch, offset, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [maxWidth] 
         * @param {number} [maxHeight] 
         * @param {string} [output] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveImage(entity: string, entityId: number, maxWidth?: number, maxHeight?: number, output?: string, accept?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveImage(entity, entityId, maxWidth, maxHeight, output, accept, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOfficeTransactions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOfficeTransactions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne1(resourceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne1(resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOneCampaign(resourceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOneCampaign(resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOneTemplate(resourceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOneTemplate(resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievePendingEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievePendingEmail(sqlSearch, offset, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSentEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSentEmail(sqlSearch, offset, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [creditBureauId] creditBureauId
         * @param {string} [nationalId] nationalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveCreditReport(creditBureauId?: number, nationalId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveCreditReport(creditBureauId, nationalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async template1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.template1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  smscampaigns/1   smscampaigns/1?template=true   smscampaigns/template
         * @summary Retrieve a SMS Campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async template2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmsCampaignData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.template2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferMoneyFrom(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferMoneyFrom(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(resourceId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update2(resourceId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaign(resourceId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaign(resourceId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Campaign
         * @param {number} campaignId 
         * @param {CommandWrapper} commandWrapper 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaign1(campaignId: number, commandWrapper: CommandWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandProcessingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaign1(campaignId, commandWrapper, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientImage1(entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientImage1(entity, entityId, contentLength, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConfiguration(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfiguration(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConfiguration3(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfiguration3(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate(resourceId: number, command?: string, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.activate(resourceId, command, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [creditBureauId] creditBureauId
         * @param {FormDataContentDisposition} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCreditReport(creditBureauId?: number, file?: FormDataContentDisposition, options?: any): AxiosPromise<string> {
            return localVarFp.addCreditReport(creditBureauId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClientImage1(entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options?: any): AxiosPromise<string> {
            return localVarFp.addNewClientImage1(entity, entityId, contentLength, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.create1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.createCampaign(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Mandatory Fields campaignName, campaignType, triggerType, providerId, runReportId, message  Mandatory Fields for Cash based on selected report id paramValue in json format
         * @summary Create a SMS Campaign
         * @param {CommandWrapper} commandWrapper 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign1(commandWrapper: CommandWrapper, options?: any): AxiosPromise<CommandProcessingResult> {
            return localVarFp.createCampaign1(commandWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(resourceId: number, options?: any): AxiosPromise<string> {
            return localVarFp.delete1(resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2(resourceId: number, options?: any): AxiosPromise<string> {
            return localVarFp.delete2(resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: Only closed SMS Campaigns can be deleted
         * @summary Delete a SMS Campaign
         * @param {number} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3(campaignId: number, options?: any): AxiosPromise<CommandProcessingResult> {
            return localVarFp.delete3(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete8(transactionId: number, options?: any): AxiosPromise<string> {
            return localVarFp.delete8(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientImage(entity: string, entityId: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteClientImage(entity, entityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} creditBureauId creditBureauId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCreditReport(creditBureauId: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteCreditReport(creditBureauId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreditReport(requestBody?: { [key: string]: object; }, options?: any): AxiosPromise<string> {
            return localVarFp.fetchCreditReport(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: any): AxiosPromise<string> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} creditBureauId creditBureauId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedCreditReport(creditBureauId: number, options?: any): AxiosPromise<string> {
            return localVarFp.getSavedCreditReport(creditBureauId, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates | Deactivates | Reactivates
         * @summary SMS Campaign
         * @param {number} campaignId 
         * @param {string} [command] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleCommands(campaignId: number, command?: string, options?: any): AxiosPromise<CommandProcessingResult> {
            return localVarFp.handleCommands(campaignId, command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newOfficeTransactionDetails(options?: any): AxiosPromise<string> {
            return localVarFp.newOfficeTransactionDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preview(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.preview(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preview1(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.preview1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll5(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveAll5(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll9(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveAll9(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllCampaign(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveAllCampaign(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {number} [status] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {object} [fromDate] 
         * @param {object} [toDate] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllEmailByStatus(sqlSearch?: string, offset?: number, limit?: number, status?: number, orderBy?: string, sortOrder?: string, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options?: any): AxiosPromise<string> {
            return localVarFp.retrieveAllEmailByStatus(sqlSearch, offset, limit, status, orderBy, sortOrder, fromDate, toDate, locale, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllEmails(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveAllEmails(options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  smscampaigns
         * @summary List SMS Campaigns
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllEmails1(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<SmsCampaignData> {
            return localVarFp.retrieveAllEmails1(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  smscampaigns/1 
         * @summary Retrieve a SMS Campaign
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCampaign(resourceId: number, options?: any): AxiosPromise<SmsCampaignData> {
            return localVarFp.retrieveCampaign(resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFailedEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<string> {
            return localVarFp.retrieveFailedEmail(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [maxWidth] 
         * @param {number} [maxHeight] 
         * @param {string} [output] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveImage(entity: string, entityId: number, maxWidth?: number, maxHeight?: number, output?: string, accept?: string, options?: any): AxiosPromise<void> {
            return localVarFp.retrieveImage(entity, entityId, maxWidth, maxHeight, output, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOfficeTransactions(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveOfficeTransactions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne1(resourceId: number, options?: any): AxiosPromise<string> {
            return localVarFp.retrieveOne1(resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOneCampaign(resourceId: number, options?: any): AxiosPromise<string> {
            return localVarFp.retrieveOneCampaign(resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOneTemplate(resourceId: number, options?: any): AxiosPromise<string> {
            return localVarFp.retrieveOneTemplate(resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePendingEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<string> {
            return localVarFp.retrievePendingEmail(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sqlSearch] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [orderBy] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSentEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<string> {
            return localVarFp.retrieveSentEmail(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [creditBureauId] creditBureauId
         * @param {string} [nationalId] nationalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCreditReport(creditBureauId?: number, nationalId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.saveCreditReport(creditBureauId, nationalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template1(options?: any): AxiosPromise<string> {
            return localVarFp.template1(options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  smscampaigns/1   smscampaigns/1?template=true   smscampaigns/template
         * @summary Retrieve a SMS Campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template2(options?: any): AxiosPromise<SmsCampaignData> {
            return localVarFp.template2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMoneyFrom(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.transferMoneyFrom(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2(resourceId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.update2(resourceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} resourceId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign(resourceId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateCampaign(resourceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Campaign
         * @param {number} campaignId 
         * @param {CommandWrapper} commandWrapper 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign1(campaignId: number, commandWrapper: CommandWrapper, options?: any): AxiosPromise<CommandProcessingResult> {
            return localVarFp.updateCampaign1(campaignId, commandWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} entity 
         * @param {number} entityId 
         * @param {number} [contentLength] 
         * @param {FormDataBodyPart} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientImage1(entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options?: any): AxiosPromise<string> {
            return localVarFp.updateClientImage1(entity, entityId, contentLength, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateConfiguration(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration3(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateConfiguration3(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {number} resourceId 
     * @param {string} [command] 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public activate(resourceId: number, command?: string, body?: string, options?: any) {
        return DefaultApiFp(this.configuration).activate(resourceId, command, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [creditBureauId] creditBureauId
     * @param {FormDataContentDisposition} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCreditReport(creditBureauId?: number, file?: FormDataContentDisposition, options?: any) {
        return DefaultApiFp(this.configuration).addCreditReport(creditBureauId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} entity 
     * @param {number} entityId 
     * @param {number} [contentLength] 
     * @param {FormDataBodyPart} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addNewClientImage1(entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options?: any) {
        return DefaultApiFp(this.configuration).addNewClientImage1(entity, entityId, contentLength, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create1(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).create1(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCampaign(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).createCampaign(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mandatory Fields campaignName, campaignType, triggerType, providerId, runReportId, message  Mandatory Fields for Cash based on selected report id paramValue in json format
     * @summary Create a SMS Campaign
     * @param {CommandWrapper} commandWrapper 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCampaign1(commandWrapper: CommandWrapper, options?: any) {
        return DefaultApiFp(this.configuration).createCampaign1(commandWrapper, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delete1(resourceId: number, options?: any) {
        return DefaultApiFp(this.configuration).delete1(resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delete2(resourceId: number, options?: any) {
        return DefaultApiFp(this.configuration).delete2(resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: Only closed SMS Campaigns can be deleted
     * @summary Delete a SMS Campaign
     * @param {number} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delete3(campaignId: number, options?: any) {
        return DefaultApiFp(this.configuration).delete3(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delete8(transactionId: number, options?: any) {
        return DefaultApiFp(this.configuration).delete8(transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} entity 
     * @param {number} entityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteClientImage(entity: string, entityId: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteClientImage(entity, entityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} creditBureauId creditBureauId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCreditReport(creditBureauId: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteCreditReport(creditBureauId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchCreditReport(requestBody?: { [key: string]: object; }, options?: any) {
        return DefaultApiFp(this.configuration).fetchCreditReport(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public get(options?: any) {
        return DefaultApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} creditBureauId creditBureauId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSavedCreditReport(creditBureauId: number, options?: any) {
        return DefaultApiFp(this.configuration).getSavedCreditReport(creditBureauId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Activates | Deactivates | Reactivates
     * @summary SMS Campaign
     * @param {number} campaignId 
     * @param {string} [command] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public handleCommands(campaignId: number, command?: string, options?: any) {
        return DefaultApiFp(this.configuration).handleCommands(campaignId, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newOfficeTransactionDetails(options?: any) {
        return DefaultApiFp(this.configuration).newOfficeTransactionDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public preview(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).preview(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public preview1(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).preview1(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveAll5(options?: any) {
        return DefaultApiFp(this.configuration).retrieveAll5(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveAll9(options?: any) {
        return DefaultApiFp(this.configuration).retrieveAll9(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveAllCampaign(options?: any) {
        return DefaultApiFp(this.configuration).retrieveAllCampaign(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sqlSearch] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {number} [status] 
     * @param {string} [orderBy] 
     * @param {string} [sortOrder] 
     * @param {object} [fromDate] 
     * @param {object} [toDate] 
     * @param {string} [locale] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveAllEmailByStatus(sqlSearch?: string, offset?: number, limit?: number, status?: number, orderBy?: string, sortOrder?: string, fromDate?: object, toDate?: object, locale?: string, dateFormat?: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveAllEmailByStatus(sqlSearch, offset, limit, status, orderBy, sortOrder, fromDate, toDate, locale, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveAllEmails(options?: any) {
        return DefaultApiFp(this.configuration).retrieveAllEmails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  smscampaigns
     * @summary List SMS Campaigns
     * @param {string} [sqlSearch] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [orderBy] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveAllEmails1(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveAllEmails1(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  smscampaigns/1 
     * @summary Retrieve a SMS Campaign
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveCampaign(resourceId: number, options?: any) {
        return DefaultApiFp(this.configuration).retrieveCampaign(resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sqlSearch] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [orderBy] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveFailedEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveFailedEmail(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} entity 
     * @param {number} entityId 
     * @param {number} [maxWidth] 
     * @param {number} [maxHeight] 
     * @param {string} [output] 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveImage(entity: string, entityId: number, maxWidth?: number, maxHeight?: number, output?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveImage(entity, entityId, maxWidth, maxHeight, output, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveOfficeTransactions(options?: any) {
        return DefaultApiFp(this.configuration).retrieveOfficeTransactions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveOne1(resourceId: number, options?: any) {
        return DefaultApiFp(this.configuration).retrieveOne1(resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveOneCampaign(resourceId: number, options?: any) {
        return DefaultApiFp(this.configuration).retrieveOneCampaign(resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveOneTemplate(resourceId: number, options?: any) {
        return DefaultApiFp(this.configuration).retrieveOneTemplate(resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sqlSearch] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [orderBy] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrievePendingEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return DefaultApiFp(this.configuration).retrievePendingEmail(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sqlSearch] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [orderBy] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retrieveSentEmail(sqlSearch?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return DefaultApiFp(this.configuration).retrieveSentEmail(sqlSearch, offset, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [creditBureauId] creditBureauId
     * @param {string} [nationalId] nationalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveCreditReport(creditBureauId?: number, nationalId?: string, options?: any) {
        return DefaultApiFp(this.configuration).saveCreditReport(creditBureauId, nationalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public template1(options?: any) {
        return DefaultApiFp(this.configuration).template1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  smscampaigns/1   smscampaigns/1?template=true   smscampaigns/template
     * @summary Retrieve a SMS Campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public template2(options?: any) {
        return DefaultApiFp(this.configuration).template2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transferMoneyFrom(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).transferMoneyFrom(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} resourceId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public update2(resourceId: number, body?: string, options?: any) {
        return DefaultApiFp(this.configuration).update2(resourceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} resourceId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCampaign(resourceId: number, body?: string, options?: any) {
        return DefaultApiFp(this.configuration).updateCampaign(resourceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Campaign
     * @param {number} campaignId 
     * @param {CommandWrapper} commandWrapper 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCampaign1(campaignId: number, commandWrapper: CommandWrapper, options?: any) {
        return DefaultApiFp(this.configuration).updateCampaign1(campaignId, commandWrapper, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} entity 
     * @param {number} entityId 
     * @param {number} [contentLength] 
     * @param {FormDataBodyPart} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientImage1(entity: string, entityId: number, contentLength?: number, file?: FormDataBodyPart, options?: any) {
        return DefaultApiFp(this.configuration).updateClientImage1(entity, entityId, contentLength, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateConfiguration(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).updateConfiguration(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateConfiguration3(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).updateConfiguration3(body, options).then((request) => request(this.axios, this.basePath));
    }
}
