/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteCodesResponse } from '../models';
// @ts-ignore
import { GetCodesResponse } from '../models';
// @ts-ignore
import { PostCodesRequest } from '../models';
// @ts-ignore
import { PostCodesResponse } from '../models';
// @ts-ignore
import { PutCodesRequest } from '../models';
// @ts-ignore
import { PutCodesResponse } from '../models';
/**
 * CodesApi - axios parameter creator
 * @export
 */
export const CodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a code. Codes created through api are always \'user defined\' and so system defined is marked as false.
         * @summary Create a Code
         * @param {PostCodesRequest} postCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCode: async (postCodesRequest: PostCodesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCodesRequest' is not null or undefined
            assertParamExists('createCode', 'postCodesRequest', postCodesRequest)
            const localVarPath = `/codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCodesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a code if it is not system defined.
         * @summary Delete a Code
         * @param {number} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCode: async (codeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            assertParamExists('deleteCode', 'codeId', codeId)
            const localVarPath = `/codes/{codeId}`
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a Code.  Example Requests:  codes/1
         * @summary Retrieve a Code
         * @param {number} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCode: async (codeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            assertParamExists('retrieveCode', 'codeId', codeId)
            const localVarPath = `/codes/{codeId}`
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of codes.  Example Requests:  codes
         * @summary Retrieve Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCodes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of a code if it is not system defined.
         * @summary Update a Code
         * @param {number} codeId codeId
         * @param {PutCodesRequest} putCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCode: async (codeId: number, putCodesRequest: PutCodesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            assertParamExists('updateCode', 'codeId', codeId)
            // verify required parameter 'putCodesRequest' is not null or undefined
            assertParamExists('updateCode', 'putCodesRequest', putCodesRequest)
            const localVarPath = `/codes/{codeId}`
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putCodesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CodesApi - functional programming interface
 * @export
 */
export const CodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a code. Codes created through api are always \'user defined\' and so system defined is marked as false.
         * @summary Create a Code
         * @param {PostCodesRequest} postCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCode(postCodesRequest: PostCodesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCode(postCodesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a code if it is not system defined.
         * @summary Delete a Code
         * @param {number} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCode(codeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCode(codeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a Code.  Example Requests:  codes/1
         * @summary Retrieve a Code
         * @param {number} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCode(codeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCode(codeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the list of codes.  Example Requests:  codes
         * @summary Retrieve Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCodes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCodesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCodes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the details of a code if it is not system defined.
         * @summary Update a Code
         * @param {number} codeId codeId
         * @param {PutCodesRequest} putCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCode(codeId: number, putCodesRequest: PutCodesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCode(codeId, putCodesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CodesApi - factory interface
 * @export
 */
export const CodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CodesApiFp(configuration)
    return {
        /**
         * Creates a code. Codes created through api are always \'user defined\' and so system defined is marked as false.
         * @summary Create a Code
         * @param {PostCodesRequest} postCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCode(postCodesRequest: PostCodesRequest, options?: any): AxiosPromise<PostCodesResponse> {
            return localVarFp.createCode(postCodesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a code if it is not system defined.
         * @summary Delete a Code
         * @param {number} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCode(codeId: number, options?: any): AxiosPromise<DeleteCodesResponse> {
            return localVarFp.deleteCode(codeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a Code.  Example Requests:  codes/1
         * @summary Retrieve a Code
         * @param {number} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCode(codeId: number, options?: any): AxiosPromise<GetCodesResponse> {
            return localVarFp.retrieveCode(codeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of codes.  Example Requests:  codes
         * @summary Retrieve Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCodes(options?: any): AxiosPromise<Array<GetCodesResponse>> {
            return localVarFp.retrieveCodes(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of a code if it is not system defined.
         * @summary Update a Code
         * @param {number} codeId codeId
         * @param {PutCodesRequest} putCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCode(codeId: number, putCodesRequest: PutCodesRequest, options?: any): AxiosPromise<PutCodesResponse> {
            return localVarFp.updateCode(codeId, putCodesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CodesApi - object-oriented interface
 * @export
 * @class CodesApi
 * @extends {BaseAPI}
 */
export class CodesApi extends BaseAPI {
    /**
     * Creates a code. Codes created through api are always \'user defined\' and so system defined is marked as false.
     * @summary Create a Code
     * @param {PostCodesRequest} postCodesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodesApi
     */
    public createCode(postCodesRequest: PostCodesRequest, options?: any) {
        return CodesApiFp(this.configuration).createCode(postCodesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a code if it is not system defined.
     * @summary Delete a Code
     * @param {number} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodesApi
     */
    public deleteCode(codeId: number, options?: any) {
        return CodesApiFp(this.configuration).deleteCode(codeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a Code.  Example Requests:  codes/1
     * @summary Retrieve a Code
     * @param {number} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodesApi
     */
    public retrieveCode(codeId: number, options?: any) {
        return CodesApiFp(this.configuration).retrieveCode(codeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of codes.  Example Requests:  codes
     * @summary Retrieve Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodesApi
     */
    public retrieveCodes(options?: any) {
        return CodesApiFp(this.configuration).retrieveCodes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of a code if it is not system defined.
     * @summary Update a Code
     * @param {number} codeId codeId
     * @param {PutCodesRequest} putCodesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodesApi
     */
    public updateCode(codeId: number, putCodesRequest: PutCodesRequest, options?: any) {
        return CodesApiFp(this.configuration).updateCode(codeId, putCodesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
