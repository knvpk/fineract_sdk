/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteCentersCenterIdResponse } from '../models';
// @ts-ignore
import { FormDataContentDisposition } from '../models';
// @ts-ignore
import { GetCentersCenterIdAccountsResponse } from '../models';
// @ts-ignore
import { GetCentersCenterIdResponse } from '../models';
// @ts-ignore
import { GetCentersResponse } from '../models';
// @ts-ignore
import { GetCentersTemplateResponse } from '../models';
// @ts-ignore
import { PostCentersCenterIdRequest } from '../models';
// @ts-ignore
import { PostCentersCenterIdResponse } from '../models';
// @ts-ignore
import { PostCentersRequest } from '../models';
// @ts-ignore
import { PostCentersResponse } from '../models';
// @ts-ignore
import { PutCentersCenterIdRequest } from '../models';
// @ts-ignore
import { PutCentersCenterIdResponse } from '../models';
/**
 * CentersApi - axios parameter creator
 * @export
 */
export const CentersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activate a Center:  Centers can be created in a Pending state. This API exists to enable center activation. If the center happens to be already active, this API will result in an error.  Close a Center:  Centers can be closed if they don\'t have any non-closed groups or saving accounts. If the Center has any active groups or savings accounts, this API will result in an error.  Associate Groups:  This API allows associating existing groups to a center. The groups are listed from the office to which the center is associated. If group(s) is already associated with a center, this API will result in an error.  Disassociate Groups:  This API allows to disassociate groups from a center.  Generate Collection Sheet:  This Api retrieves repayment details of all jlg loans under a center as on a specified meeting date.  Save Collection Sheet:  This Api allows the loan officer to perform bulk repayments of JLG loans for a center on a given meeting date.  Showing Request/Response for Close a Center
         * @summary Activate a Center | Generate Collection Sheet | Save Collection Sheet | Close a Center | Associate Groups | Disassociate Groups
         * @param {number} centerId centerId
         * @param {PostCentersCenterIdRequest} postCentersCenterIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate2: async (centerId: number, postCentersCenterIdRequest: PostCentersCenterIdRequest, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'centerId' is not null or undefined
            assertParamExists('activate2', 'centerId', centerId)
            // verify required parameter 'postCentersCenterIdRequest' is not null or undefined
            assertParamExists('activate2', 'postCentersCenterIdRequest', postCentersCenterIdRequest)
            const localVarPath = `/centers/{centerId}`
                .replace(`{${"centerId"}}`, encodeURIComponent(String(centerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCentersCenterIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Center  Mandatory Fields: name, officeId, active, activationDate (if active=true)  Optional Fields: externalId, staffId, groupMembers
         * @summary Create a Center
         * @param {PostCentersRequest} postCentersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create7: async (postCentersRequest: PostCentersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCentersRequest' is not null or undefined
            assertParamExists('create7', 'postCentersRequest', postCentersRequest)
            const localVarPath = `/centers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCentersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Center can be deleted if it is in pending state and has no association - groups, loans or savings
         * @summary Delete a Center
         * @param {number} centerId centerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete10: async (centerId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'centerId' is not null or undefined
            assertParamExists('delete10', 'centerId', centerId)
            const localVarPath = `/centers/{centerId}`
                .replace(`{${"centerId"}}`, encodeURIComponent(String(centerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [staffId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCentersTemplate: async (officeId?: number, staffId?: number, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/centers/downloadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (staffId !== undefined) {
                localVarQueryParameter['staffId'] = staffId;
            }

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCentersTemplate: async (file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/centers/uploadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
            if (locale !== undefined) { 
                localVarFormParams.append('locale', locale as any);
            }
    
            if (dateFormat !== undefined) { 
                localVarFormParams.append('dateFormat', dateFormat as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The default implementation supports pagination and sorting with the default pagination size set to 200 records. The parameter limit with description -1 will return all entries.  Example Requests:    centers    centers?fields=name,officeName,joinedDate    centers?offset=10&limit=50    centers?orderBy=name&sortOrder=DESC
         * @summary List Centers
         * @param {number} [officeId] officeId
         * @param {number} [staffId] staffId
         * @param {string} [externalId] externalId
         * @param {string} [name] name
         * @param {string} [underHierarchy] underHierarchy
         * @param {boolean} [paged] paged
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {object} [meetingDate] meetingDate
         * @param {string} [dateFormat] dateFormat
         * @param {string} [locale] locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll23: async (officeId?: number, staffId?: number, externalId?: string, name?: string, underHierarchy?: string, paged?: boolean, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, meetingDate?: object, dateFormat?: string, locale?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/centers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (staffId !== undefined) {
                localVarQueryParameter['staffId'] = staffId;
            }

            if (externalId !== undefined) {
                localVarQueryParameter['externalId'] = externalId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (underHierarchy !== undefined) {
                localVarQueryParameter['underHierarchy'] = underHierarchy;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (meetingDate !== undefined) {
                localVarQueryParameter['meetingDate'] = meetingDate;
            }

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An example of how a savings summary for a Center can be provided. This is requested in a specific use case of the reference application.  It is quite reasonable to add resources like this to simplify User Interface development.    Example Requests:    centers/9/accounts
         * @summary Retrieve Center accounts overview
         * @param {number} centerId centerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGroupAccount: async (centerId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'centerId' is not null or undefined
            assertParamExists('retrieveGroupAccount', 'centerId', centerId)
            const localVarPath = `/centers/{centerId}/accounts`
                .replace(`{${"centerId"}}`, encodeURIComponent(String(centerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Center  Example Requests:    centers/1    centers/1?associations=groupMembers
         * @summary Retrieve a Center
         * @param {number} centerId centerId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne13: async (centerId: number, staffInSelectedOfficeOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'centerId' is not null or undefined
            assertParamExists('retrieveOne13', 'centerId', centerId)
            const localVarPath = `/centers/{centerId}`
                .replace(`{${"centerId"}}`, encodeURIComponent(String(centerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (staffInSelectedOfficeOnly !== undefined) {
                localVarQueryParameter['staffInSelectedOfficeOnly'] = staffInSelectedOfficeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Center Template  Example Requests:    centers/template    centers/template?officeId=2
         * @summary Retrieve a Center Template
         * @param {string} [command] command
         * @param {number} [officeId] officeId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate6: async (command?: string, officeId?: number, staffInSelectedOfficeOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/centers/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (staffInSelectedOfficeOnly !== undefined) {
                localVarQueryParameter['staffInSelectedOfficeOnly'] = staffInSelectedOfficeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Center
         * @summary Update a Center
         * @param {number} centerId centerId
         * @param {PutCentersCenterIdRequest} putCentersCenterIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update11: async (centerId: number, putCentersCenterIdRequest: PutCentersCenterIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'centerId' is not null or undefined
            assertParamExists('update11', 'centerId', centerId)
            // verify required parameter 'putCentersCenterIdRequest' is not null or undefined
            assertParamExists('update11', 'putCentersCenterIdRequest', putCentersCenterIdRequest)
            const localVarPath = `/centers/{centerId}`
                .replace(`{${"centerId"}}`, encodeURIComponent(String(centerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putCentersCenterIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CentersApi - functional programming interface
 * @export
 */
export const CentersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CentersApiAxiosParamCreator(configuration)
    return {
        /**
         * Activate a Center:  Centers can be created in a Pending state. This API exists to enable center activation. If the center happens to be already active, this API will result in an error.  Close a Center:  Centers can be closed if they don\'t have any non-closed groups or saving accounts. If the Center has any active groups or savings accounts, this API will result in an error.  Associate Groups:  This API allows associating existing groups to a center. The groups are listed from the office to which the center is associated. If group(s) is already associated with a center, this API will result in an error.  Disassociate Groups:  This API allows to disassociate groups from a center.  Generate Collection Sheet:  This Api retrieves repayment details of all jlg loans under a center as on a specified meeting date.  Save Collection Sheet:  This Api allows the loan officer to perform bulk repayments of JLG loans for a center on a given meeting date.  Showing Request/Response for Close a Center
         * @summary Activate a Center | Generate Collection Sheet | Save Collection Sheet | Close a Center | Associate Groups | Disassociate Groups
         * @param {number} centerId centerId
         * @param {PostCentersCenterIdRequest} postCentersCenterIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activate2(centerId: number, postCentersCenterIdRequest: PostCentersCenterIdRequest, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostCentersCenterIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activate2(centerId, postCentersCenterIdRequest, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Center  Mandatory Fields: name, officeId, active, activationDate (if active=true)  Optional Fields: externalId, staffId, groupMembers
         * @summary Create a Center
         * @param {PostCentersRequest} postCentersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create7(postCentersRequest: PostCentersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostCentersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create7(postCentersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A Center can be deleted if it is in pending state and has no association - groups, loans or savings
         * @summary Delete a Center
         * @param {number} centerId centerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete10(centerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCentersCenterIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete10(centerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [staffId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCentersTemplate(officeId?: number, staffId?: number, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCentersTemplate(officeId, staffId, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCentersTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCentersTemplate(file, locale, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The default implementation supports pagination and sorting with the default pagination size set to 200 records. The parameter limit with description -1 will return all entries.  Example Requests:    centers    centers?fields=name,officeName,joinedDate    centers?offset=10&limit=50    centers?orderBy=name&sortOrder=DESC
         * @summary List Centers
         * @param {number} [officeId] officeId
         * @param {number} [staffId] staffId
         * @param {string} [externalId] externalId
         * @param {string} [name] name
         * @param {string} [underHierarchy] underHierarchy
         * @param {boolean} [paged] paged
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {object} [meetingDate] meetingDate
         * @param {string} [dateFormat] dateFormat
         * @param {string} [locale] locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll23(officeId?: number, staffId?: number, externalId?: string, name?: string, underHierarchy?: string, paged?: boolean, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, meetingDate?: object, dateFormat?: string, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCentersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll23(officeId, staffId, externalId, name, underHierarchy, paged, offset, limit, orderBy, sortOrder, meetingDate, dateFormat, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An example of how a savings summary for a Center can be provided. This is requested in a specific use case of the reference application.  It is quite reasonable to add resources like this to simplify User Interface development.    Example Requests:    centers/9/accounts
         * @summary Retrieve Center accounts overview
         * @param {number} centerId centerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveGroupAccount(centerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCentersCenterIdAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveGroupAccount(centerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Center  Example Requests:    centers/1    centers/1?associations=groupMembers
         * @summary Retrieve a Center
         * @param {number} centerId centerId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne13(centerId: number, staffInSelectedOfficeOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCentersCenterIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne13(centerId, staffInSelectedOfficeOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Center Template  Example Requests:    centers/template    centers/template?officeId=2
         * @summary Retrieve a Center Template
         * @param {string} [command] command
         * @param {number} [officeId] officeId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTemplate6(command?: string, officeId?: number, staffInSelectedOfficeOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCentersTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTemplate6(command, officeId, staffInSelectedOfficeOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Center
         * @summary Update a Center
         * @param {number} centerId centerId
         * @param {PutCentersCenterIdRequest} putCentersCenterIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update11(centerId: number, putCentersCenterIdRequest: PutCentersCenterIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutCentersCenterIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update11(centerId, putCentersCenterIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CentersApi - factory interface
 * @export
 */
export const CentersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CentersApiFp(configuration)
    return {
        /**
         * Activate a Center:  Centers can be created in a Pending state. This API exists to enable center activation. If the center happens to be already active, this API will result in an error.  Close a Center:  Centers can be closed if they don\'t have any non-closed groups or saving accounts. If the Center has any active groups or savings accounts, this API will result in an error.  Associate Groups:  This API allows associating existing groups to a center. The groups are listed from the office to which the center is associated. If group(s) is already associated with a center, this API will result in an error.  Disassociate Groups:  This API allows to disassociate groups from a center.  Generate Collection Sheet:  This Api retrieves repayment details of all jlg loans under a center as on a specified meeting date.  Save Collection Sheet:  This Api allows the loan officer to perform bulk repayments of JLG loans for a center on a given meeting date.  Showing Request/Response for Close a Center
         * @summary Activate a Center | Generate Collection Sheet | Save Collection Sheet | Close a Center | Associate Groups | Disassociate Groups
         * @param {number} centerId centerId
         * @param {PostCentersCenterIdRequest} postCentersCenterIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activate2(centerId: number, postCentersCenterIdRequest: PostCentersCenterIdRequest, command?: string, options?: any): AxiosPromise<PostCentersCenterIdResponse> {
            return localVarFp.activate2(centerId, postCentersCenterIdRequest, command, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Center  Mandatory Fields: name, officeId, active, activationDate (if active=true)  Optional Fields: externalId, staffId, groupMembers
         * @summary Create a Center
         * @param {PostCentersRequest} postCentersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create7(postCentersRequest: PostCentersRequest, options?: any): AxiosPromise<PostCentersResponse> {
            return localVarFp.create7(postCentersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A Center can be deleted if it is in pending state and has no association - groups, loans or savings
         * @summary Delete a Center
         * @param {number} centerId centerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete10(centerId: number, options?: any): AxiosPromise<DeleteCentersCenterIdResponse> {
            return localVarFp.delete10(centerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [staffId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCentersTemplate(officeId?: number, staffId?: number, dateFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getCentersTemplate(officeId, staffId, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCentersTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): AxiosPromise<string> {
            return localVarFp.postCentersTemplate(file, locale, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * The default implementation supports pagination and sorting with the default pagination size set to 200 records. The parameter limit with description -1 will return all entries.  Example Requests:    centers    centers?fields=name,officeName,joinedDate    centers?offset=10&limit=50    centers?orderBy=name&sortOrder=DESC
         * @summary List Centers
         * @param {number} [officeId] officeId
         * @param {number} [staffId] staffId
         * @param {string} [externalId] externalId
         * @param {string} [name] name
         * @param {string} [underHierarchy] underHierarchy
         * @param {boolean} [paged] paged
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {object} [meetingDate] meetingDate
         * @param {string} [dateFormat] dateFormat
         * @param {string} [locale] locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll23(officeId?: number, staffId?: number, externalId?: string, name?: string, underHierarchy?: string, paged?: boolean, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, meetingDate?: object, dateFormat?: string, locale?: string, options?: any): AxiosPromise<GetCentersResponse> {
            return localVarFp.retrieveAll23(officeId, staffId, externalId, name, underHierarchy, paged, offset, limit, orderBy, sortOrder, meetingDate, dateFormat, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * An example of how a savings summary for a Center can be provided. This is requested in a specific use case of the reference application.  It is quite reasonable to add resources like this to simplify User Interface development.    Example Requests:    centers/9/accounts
         * @summary Retrieve Center accounts overview
         * @param {number} centerId centerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGroupAccount(centerId: number, options?: any): AxiosPromise<GetCentersCenterIdAccountsResponse> {
            return localVarFp.retrieveGroupAccount(centerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Center  Example Requests:    centers/1    centers/1?associations=groupMembers
         * @summary Retrieve a Center
         * @param {number} centerId centerId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne13(centerId: number, staffInSelectedOfficeOnly?: boolean, options?: any): AxiosPromise<GetCentersCenterIdResponse> {
            return localVarFp.retrieveOne13(centerId, staffInSelectedOfficeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Center Template  Example Requests:    centers/template    centers/template?officeId=2
         * @summary Retrieve a Center Template
         * @param {string} [command] command
         * @param {number} [officeId] officeId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate6(command?: string, officeId?: number, staffInSelectedOfficeOnly?: boolean, options?: any): AxiosPromise<GetCentersTemplateResponse> {
            return localVarFp.retrieveTemplate6(command, officeId, staffInSelectedOfficeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Center
         * @summary Update a Center
         * @param {number} centerId centerId
         * @param {PutCentersCenterIdRequest} putCentersCenterIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update11(centerId: number, putCentersCenterIdRequest: PutCentersCenterIdRequest, options?: any): AxiosPromise<PutCentersCenterIdResponse> {
            return localVarFp.update11(centerId, putCentersCenterIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CentersApi - object-oriented interface
 * @export
 * @class CentersApi
 * @extends {BaseAPI}
 */
export class CentersApi extends BaseAPI {
    /**
     * Activate a Center:  Centers can be created in a Pending state. This API exists to enable center activation. If the center happens to be already active, this API will result in an error.  Close a Center:  Centers can be closed if they don\'t have any non-closed groups or saving accounts. If the Center has any active groups or savings accounts, this API will result in an error.  Associate Groups:  This API allows associating existing groups to a center. The groups are listed from the office to which the center is associated. If group(s) is already associated with a center, this API will result in an error.  Disassociate Groups:  This API allows to disassociate groups from a center.  Generate Collection Sheet:  This Api retrieves repayment details of all jlg loans under a center as on a specified meeting date.  Save Collection Sheet:  This Api allows the loan officer to perform bulk repayments of JLG loans for a center on a given meeting date.  Showing Request/Response for Close a Center
     * @summary Activate a Center | Generate Collection Sheet | Save Collection Sheet | Close a Center | Associate Groups | Disassociate Groups
     * @param {number} centerId centerId
     * @param {PostCentersCenterIdRequest} postCentersCenterIdRequest 
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public activate2(centerId: number, postCentersCenterIdRequest: PostCentersCenterIdRequest, command?: string, options?: any) {
        return CentersApiFp(this.configuration).activate2(centerId, postCentersCenterIdRequest, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Center  Mandatory Fields: name, officeId, active, activationDate (if active=true)  Optional Fields: externalId, staffId, groupMembers
     * @summary Create a Center
     * @param {PostCentersRequest} postCentersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public create7(postCentersRequest: PostCentersRequest, options?: any) {
        return CentersApiFp(this.configuration).create7(postCentersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A Center can be deleted if it is in pending state and has no association - groups, loans or savings
     * @summary Delete a Center
     * @param {number} centerId centerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public delete10(centerId: number, options?: any) {
        return CentersApiFp(this.configuration).delete10(centerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [officeId] 
     * @param {number} [staffId] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public getCentersTemplate(officeId?: number, staffId?: number, dateFormat?: string, options?: any) {
        return CentersApiFp(this.configuration).getCentersTemplate(officeId, staffId, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormDataContentDisposition} [file] 
     * @param {string} [locale] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public postCentersTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any) {
        return CentersApiFp(this.configuration).postCentersTemplate(file, locale, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The default implementation supports pagination and sorting with the default pagination size set to 200 records. The parameter limit with description -1 will return all entries.  Example Requests:    centers    centers?fields=name,officeName,joinedDate    centers?offset=10&limit=50    centers?orderBy=name&sortOrder=DESC
     * @summary List Centers
     * @param {number} [officeId] officeId
     * @param {number} [staffId] staffId
     * @param {string} [externalId] externalId
     * @param {string} [name] name
     * @param {string} [underHierarchy] underHierarchy
     * @param {boolean} [paged] paged
     * @param {number} [offset] offset
     * @param {number} [limit] limit
     * @param {string} [orderBy] orderBy
     * @param {string} [sortOrder] sortOrder
     * @param {object} [meetingDate] meetingDate
     * @param {string} [dateFormat] dateFormat
     * @param {string} [locale] locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public retrieveAll23(officeId?: number, staffId?: number, externalId?: string, name?: string, underHierarchy?: string, paged?: boolean, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, meetingDate?: object, dateFormat?: string, locale?: string, options?: any) {
        return CentersApiFp(this.configuration).retrieveAll23(officeId, staffId, externalId, name, underHierarchy, paged, offset, limit, orderBy, sortOrder, meetingDate, dateFormat, locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An example of how a savings summary for a Center can be provided. This is requested in a specific use case of the reference application.  It is quite reasonable to add resources like this to simplify User Interface development.    Example Requests:    centers/9/accounts
     * @summary Retrieve Center accounts overview
     * @param {number} centerId centerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public retrieveGroupAccount(centerId: number, options?: any) {
        return CentersApiFp(this.configuration).retrieveGroupAccount(centerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Center  Example Requests:    centers/1    centers/1?associations=groupMembers
     * @summary Retrieve a Center
     * @param {number} centerId centerId
     * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public retrieveOne13(centerId: number, staffInSelectedOfficeOnly?: boolean, options?: any) {
        return CentersApiFp(this.configuration).retrieveOne13(centerId, staffInSelectedOfficeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Center Template  Example Requests:    centers/template    centers/template?officeId=2
     * @summary Retrieve a Center Template
     * @param {string} [command] command
     * @param {number} [officeId] officeId
     * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public retrieveTemplate6(command?: string, officeId?: number, staffInSelectedOfficeOnly?: boolean, options?: any) {
        return CentersApiFp(this.configuration).retrieveTemplate6(command, officeId, staffInSelectedOfficeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Center
     * @summary Update a Center
     * @param {number} centerId centerId
     * @param {PutCentersCenterIdRequest} putCentersCenterIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CentersApi
     */
    public update11(centerId: number, putCentersCenterIdRequest: PutCentersCenterIdRequest, options?: any) {
        return CentersApiFp(this.configuration).update11(centerId, putCentersCenterIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
