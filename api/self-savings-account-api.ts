/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetSelfSavingsAccountsAccountIdChargesResponse } from '../models';
// @ts-ignore
import { GetSelfSavingsAccountsAccountIdChargesSavingsAccountChargeIdResponse } from '../models';
// @ts-ignore
import { GetSelfSavingsAccountsAccountIdTransactionsTransactionIdResponse } from '../models';
// @ts-ignore
import { GetSelfSavingsAccountsResponse } from '../models';
/**
 * SelfSavingsAccountApi - axios parameter creator
 * @export
 */
export const SelfSavingsAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} accountId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifySavingsAccountApplication: async (accountId: number, command?: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('modifySavingsAccountApplication', 'accountId', accountId)
            const localVarPath = `/self/savingsaccounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Savings Charges  Example Requests:  self/savingsaccounts/1/charges  self/savingsaccounts/1/charges?chargeStatus=inactive  self/savingsaccounts/1/charges?fields=name,amountOrPercentage
         * @summary List Savings Charges
         * @param {number} accountId accountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllSavingsAccountCharges1: async (accountId: number, chargeStatus?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('retrieveAllSavingsAccountCharges1', 'accountId', accountId)
            const localVarPath = `/self/savingsaccounts/{accountId}/charges`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (chargeStatus !== undefined) {
                localVarQueryParameter['chargeStatus'] = chargeStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a savings account  Example Requests :  self/savingsaccounts/1   self/savingsaccounts/1?associations=transactions
         * @summary Retrieve a savings account
         * @param {number} accountId accountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavings: async (accountId: number, chargeStatus?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('retrieveSavings', 'accountId', accountId)
            const localVarPath = `/self/savingsaccounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (chargeStatus !== undefined) {
                localVarQueryParameter['chargeStatus'] = chargeStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Savings account Charge  Example Requests:  self/savingsaccounts/1/charges/5   self/savingsaccounts/1/charges/5?fields=name,amountOrPercentage
         * @summary Retrieve a Savings account Charge
         * @param {number} accountId accountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccountCharge1: async (accountId: number, savingsAccountChargeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('retrieveSavingsAccountCharge1', 'accountId', accountId)
            // verify required parameter 'savingsAccountChargeId' is not null or undefined
            assertParamExists('retrieveSavingsAccountCharge1', 'savingsAccountChargeId', savingsAccountChargeId)
            const localVarPath = `/self/savingsaccounts/{accountId}/charges/{savingsAccountChargeId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"savingsAccountChargeId"}}`, encodeURIComponent(String(savingsAccountChargeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Savings Account Transaction  Example Requests:  self/savingsaccounts/1/transactions/1
         * @summary Retrieve Savings Account Transaction
         * @param {number} accountId accountId
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsTransaction: async (accountId: number, transactionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('retrieveSavingsTransaction', 'accountId', accountId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('retrieveSavingsTransaction', 'transactionId', transactionId)
            const localVarPath = `/self/savingsaccounts/{accountId}/transactions/{transactionId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSavingsAccountApplication: async (command?: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/self/savingsaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [clientId] 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template18: async (clientId?: number, productId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/self/savingsaccounts/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SelfSavingsAccountApi - functional programming interface
 * @export
 */
export const SelfSavingsAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SelfSavingsAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} accountId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifySavingsAccountApplication(accountId: number, command?: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifySavingsAccountApplication(accountId, command, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists Savings Charges  Example Requests:  self/savingsaccounts/1/charges  self/savingsaccounts/1/charges?chargeStatus=inactive  self/savingsaccounts/1/charges?fields=name,amountOrPercentage
         * @summary List Savings Charges
         * @param {number} accountId accountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllSavingsAccountCharges1(accountId: number, chargeStatus?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSelfSavingsAccountsAccountIdChargesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllSavingsAccountCharges1(accountId, chargeStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a savings account  Example Requests :  self/savingsaccounts/1   self/savingsaccounts/1?associations=transactions
         * @summary Retrieve a savings account
         * @param {number} accountId accountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSavings(accountId: number, chargeStatus?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfSavingsAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSavings(accountId, chargeStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Savings account Charge  Example Requests:  self/savingsaccounts/1/charges/5   self/savingsaccounts/1/charges/5?fields=name,amountOrPercentage
         * @summary Retrieve a Savings account Charge
         * @param {number} accountId accountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSavingsAccountCharge1(accountId: number, savingsAccountChargeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfSavingsAccountsAccountIdChargesSavingsAccountChargeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSavingsAccountCharge1(accountId, savingsAccountChargeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves Savings Account Transaction  Example Requests:  self/savingsaccounts/1/transactions/1
         * @summary Retrieve Savings Account Transaction
         * @param {number} accountId accountId
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSavingsTransaction(accountId: number, transactionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfSavingsAccountsAccountIdTransactionsTransactionIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSavingsTransaction(accountId, transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitSavingsAccountApplication(command?: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitSavingsAccountApplication(command, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [clientId] 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async template18(clientId?: number, productId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.template18(clientId, productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SelfSavingsAccountApi - factory interface
 * @export
 */
export const SelfSavingsAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SelfSavingsAccountApiFp(configuration)
    return {
        /**
         * 
         * @param {number} accountId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifySavingsAccountApplication(accountId: number, command?: string, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.modifySavingsAccountApplication(accountId, command, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Savings Charges  Example Requests:  self/savingsaccounts/1/charges  self/savingsaccounts/1/charges?chargeStatus=inactive  self/savingsaccounts/1/charges?fields=name,amountOrPercentage
         * @summary List Savings Charges
         * @param {number} accountId accountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllSavingsAccountCharges1(accountId: number, chargeStatus?: string, options?: any): AxiosPromise<Array<GetSelfSavingsAccountsAccountIdChargesResponse>> {
            return localVarFp.retrieveAllSavingsAccountCharges1(accountId, chargeStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a savings account  Example Requests :  self/savingsaccounts/1   self/savingsaccounts/1?associations=transactions
         * @summary Retrieve a savings account
         * @param {number} accountId accountId
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavings(accountId: number, chargeStatus?: string, options?: any): AxiosPromise<GetSelfSavingsAccountsResponse> {
            return localVarFp.retrieveSavings(accountId, chargeStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Savings account Charge  Example Requests:  self/savingsaccounts/1/charges/5   self/savingsaccounts/1/charges/5?fields=name,amountOrPercentage
         * @summary Retrieve a Savings account Charge
         * @param {number} accountId accountId
         * @param {number} savingsAccountChargeId savingsAccountChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccountCharge1(accountId: number, savingsAccountChargeId: number, options?: any): AxiosPromise<GetSelfSavingsAccountsAccountIdChargesSavingsAccountChargeIdResponse> {
            return localVarFp.retrieveSavingsAccountCharge1(accountId, savingsAccountChargeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Savings Account Transaction  Example Requests:  self/savingsaccounts/1/transactions/1
         * @summary Retrieve Savings Account Transaction
         * @param {number} accountId accountId
         * @param {number} transactionId transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsTransaction(accountId: number, transactionId: number, options?: any): AxiosPromise<GetSelfSavingsAccountsAccountIdTransactionsTransactionIdResponse> {
            return localVarFp.retrieveSavingsTransaction(accountId, transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSavingsAccountApplication(command?: string, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.submitSavingsAccountApplication(command, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [clientId] 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template18(clientId?: number, productId?: number, options?: any): AxiosPromise<string> {
            return localVarFp.template18(clientId, productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SelfSavingsAccountApi - object-oriented interface
 * @export
 * @class SelfSavingsAccountApi
 * @extends {BaseAPI}
 */
export class SelfSavingsAccountApi extends BaseAPI {
    /**
     * 
     * @param {number} accountId 
     * @param {string} [command] 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfSavingsAccountApi
     */
    public modifySavingsAccountApplication(accountId: number, command?: string, body?: string, options?: any) {
        return SelfSavingsAccountApiFp(this.configuration).modifySavingsAccountApplication(accountId, command, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists Savings Charges  Example Requests:  self/savingsaccounts/1/charges  self/savingsaccounts/1/charges?chargeStatus=inactive  self/savingsaccounts/1/charges?fields=name,amountOrPercentage
     * @summary List Savings Charges
     * @param {number} accountId accountId
     * @param {string} [chargeStatus] chargeStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfSavingsAccountApi
     */
    public retrieveAllSavingsAccountCharges1(accountId: number, chargeStatus?: string, options?: any) {
        return SelfSavingsAccountApiFp(this.configuration).retrieveAllSavingsAccountCharges1(accountId, chargeStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a savings account  Example Requests :  self/savingsaccounts/1   self/savingsaccounts/1?associations=transactions
     * @summary Retrieve a savings account
     * @param {number} accountId accountId
     * @param {string} [chargeStatus] chargeStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfSavingsAccountApi
     */
    public retrieveSavings(accountId: number, chargeStatus?: string, options?: any) {
        return SelfSavingsAccountApiFp(this.configuration).retrieveSavings(accountId, chargeStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Savings account Charge  Example Requests:  self/savingsaccounts/1/charges/5   self/savingsaccounts/1/charges/5?fields=name,amountOrPercentage
     * @summary Retrieve a Savings account Charge
     * @param {number} accountId accountId
     * @param {number} savingsAccountChargeId savingsAccountChargeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfSavingsAccountApi
     */
    public retrieveSavingsAccountCharge1(accountId: number, savingsAccountChargeId: number, options?: any) {
        return SelfSavingsAccountApiFp(this.configuration).retrieveSavingsAccountCharge1(accountId, savingsAccountChargeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Savings Account Transaction  Example Requests:  self/savingsaccounts/1/transactions/1
     * @summary Retrieve Savings Account Transaction
     * @param {number} accountId accountId
     * @param {number} transactionId transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfSavingsAccountApi
     */
    public retrieveSavingsTransaction(accountId: number, transactionId: number, options?: any) {
        return SelfSavingsAccountApiFp(this.configuration).retrieveSavingsTransaction(accountId, transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [command] 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfSavingsAccountApi
     */
    public submitSavingsAccountApplication(command?: string, body?: string, options?: any) {
        return SelfSavingsAccountApiFp(this.configuration).submitSavingsAccountApplication(command, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [clientId] 
     * @param {number} [productId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfSavingsAccountApi
     */
    public template18(clientId?: number, productId?: number, options?: any) {
        return SelfSavingsAccountApiFp(this.configuration).template18(clientId, productId, options).then((request) => request(this.axios, this.basePath));
    }
}
