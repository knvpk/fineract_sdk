/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteReportsResponse } from '../models';
// @ts-ignore
import { GetReportsResponse } from '../models';
// @ts-ignore
import { GetReportsTemplateResponse } from '../models';
// @ts-ignore
import { PostReportsResponse } from '../models';
// @ts-ignore
import { PostRepostRequest } from '../models';
// @ts-ignore
import { PutReportRequest } from '../models';
// @ts-ignore
import { PutReportResponse } from '../models';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Report
         * @param {PostRepostRequest} postRepostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (postRepostRequest: PostRepostRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRepostRequest' is not null or undefined
            assertParamExists('createReport', 'postRepostRequest', postRepostRequest)
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRepostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Only non-core reports can be deleted.
         * @summary Delete a Report
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReport', 'id', id)
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists  Example Request :   reports/template
         * @summary Retrieve Report Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOfficeTemplate: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  reports/1   reports/1?template=true
         * @summary Retrieve a Report 
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReport: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveReport', 'id', id)
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all reports and their parameters.  Example Request:  reports
         * @summary List Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReportList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Only the useReport description can be updated for core reports.
         * @summary Update a Report
         * @param {number} id id
         * @param {PutReportRequest} putReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: async (id: number, putReportRequest: PutReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateReport', 'id', id)
            // verify required parameter 'putReportRequest' is not null or undefined
            assertParamExists('updateReport', 'putReportRequest', putReportRequest)
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Report
         * @param {PostRepostRequest} postRepostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(postRepostRequest: PostRepostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(postRepostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Only non-core reports can be deleted.
         * @summary Delete a Report
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReport(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists  Example Request :   reports/template
         * @summary Retrieve Report Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOfficeTemplate(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportsTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOfficeTemplate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  reports/1   reports/1?template=true
         * @summary Retrieve a Report 
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveReport(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveReport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all reports and their parameters.  Example Request:  reports
         * @summary List Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveReportList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetReportsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveReportList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Only the useReport description can be updated for core reports.
         * @summary Update a Report
         * @param {number} id id
         * @param {PutReportRequest} putReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReport(id: number, putReportRequest: PutReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReport(id, putReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Report
         * @param {PostRepostRequest} postRepostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(postRepostRequest: PostRepostRequest, options?: any): AxiosPromise<PostReportsResponse> {
            return localVarFp.createReport(postRepostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Only non-core reports can be deleted.
         * @summary Delete a Report
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport(id: number, options?: any): AxiosPromise<DeleteReportsResponse> {
            return localVarFp.deleteReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists  Example Request :   reports/template
         * @summary Retrieve Report Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOfficeTemplate(options?: any): AxiosPromise<GetReportsTemplateResponse> {
            return localVarFp.retrieveOfficeTemplate(options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  reports/1   reports/1?template=true
         * @summary Retrieve a Report 
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReport(id: number, options?: any): AxiosPromise<GetReportsResponse> {
            return localVarFp.retrieveReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all reports and their parameters.  Example Request:  reports
         * @summary List Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReportList(options?: any): AxiosPromise<Array<GetReportsResponse>> {
            return localVarFp.retrieveReportList(options).then((request) => request(axios, basePath));
        },
        /**
         * Only the useReport description can be updated for core reports.
         * @summary Update a Report
         * @param {number} id id
         * @param {PutReportRequest} putReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport(id: number, putReportRequest: PutReportRequest, options?: any): AxiosPromise<PutReportResponse> {
            return localVarFp.updateReport(id, putReportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * 
     * @summary Create a Report
     * @param {PostRepostRequest} postRepostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public createReport(postRepostRequest: PostRepostRequest, options?: any) {
        return ReportsApiFp(this.configuration).createReport(postRepostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Only non-core reports can be deleted.
     * @summary Delete a Report
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public deleteReport(id: number, options?: any) {
        return ReportsApiFp(this.configuration).deleteReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists  Example Request :   reports/template
     * @summary Retrieve Report Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public retrieveOfficeTemplate(options?: any) {
        return ReportsApiFp(this.configuration).retrieveOfficeTemplate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  reports/1   reports/1?template=true
     * @summary Retrieve a Report 
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public retrieveReport(id: number, options?: any) {
        return ReportsApiFp(this.configuration).retrieveReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all reports and their parameters.  Example Request:  reports
     * @summary List Reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public retrieveReportList(options?: any) {
        return ReportsApiFp(this.configuration).retrieveReportList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Only the useReport description can be updated for core reports.
     * @summary Update a Report
     * @param {number} id id
     * @param {PutReportRequest} putReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public updateReport(id: number, putReportRequest: PutReportRequest, options?: any) {
        return ReportsApiFp(this.configuration).updateReport(id, putReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
