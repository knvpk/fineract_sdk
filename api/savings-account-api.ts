/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteSavingsAccountsAccountIdResponse } from '../models';
// @ts-ignore
import { FormDataContentDisposition } from '../models';
// @ts-ignore
import { GetSavingsAccountsAccountIdResponse } from '../models';
// @ts-ignore
import { GetSavingsAccountsResponse } from '../models';
// @ts-ignore
import { GetSavingsAccountsTemplateResponse } from '../models';
// @ts-ignore
import { PostSavingsAccountsAccountIdRequest } from '../models';
// @ts-ignore
import { PostSavingsAccountsAccountIdResponse } from '../models';
// @ts-ignore
import { PostSavingsAccountsRequest } from '../models';
// @ts-ignore
import { PostSavingsAccountsResponse } from '../models';
// @ts-ignore
import { PutSavingsAccountsAccountIdRequest } from '../models';
// @ts-ignore
import { PutSavingsAccountsAccountIdResponse } from '../models';
/**
 * SavingsAccountApi - axios parameter creator
 * @export
 */
export const SavingsAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * At present we support hard delete of savings application so long as its in \'Submitted and pending approval\' state. One the application is moves past this state, it is not possible to do a \'hard\' delete of the application or the account. An API endpoint will be added to close/de-activate the savings account.
         * @summary Delete a savings application
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavingsAccount: async (accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteSavingsAccount', 'accountId', accountId)
            const localVarPath = `/savingsaccounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  savingsaccounts/template?clientId=1   savingsaccounts/template?clientId=1&productId=1
         * @summary Retrieve Savings Account Template
         * @param {number} [clientId] clientId
         * @param {number} [groupId] groupId
         * @param {number} [productId] productId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavingsAccountTemplate: async (clientId?: number, groupId?: number, productId?: number, staffInSelectedOfficeOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/savingsaccounts/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (staffInSelectedOfficeOnly !== undefined) {
                localVarQueryParameter['staffInSelectedOfficeOnly'] = staffInSelectedOfficeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [staffId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavingsTemplate: async (officeId?: number, staffId?: number, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/savingsaccounts/downloadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (staffId !== undefined) {
                localVarQueryParameter['staffId'] = staffId;
            }

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavingsTransactionTemplate: async (officeId?: number, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/savingsaccounts/transactions/downloadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (dateFormat !== undefined) {
                localVarQueryParameter['dateFormat'] = dateFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} parentAccountId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleGSIMCommands: async (parentAccountId: number, command?: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentAccountId' is not null or undefined
            assertParamExists('handleGSIMCommands', 'parentAccountId', parentAccountId)
            const localVarPath = `/savingsaccounts/gsimcommands/{parentAccountId}`
                .replace(`{${"parentAccountId"}}`, encodeURIComponent(String(parentAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Approve savings application:  Approves savings application so long as its in \'Submitted and pending approval\' state.  Undo approval savings application:  Will move \'approved\' savings application back to \'Submitted and pending approval\' state.  Assign Savings Officer:  Allows you to assign Savings Officer for existing Savings Account.  Unassign Savings Officer:  Allows you to unassign the Savings Officer.  Reject savings application:  Rejects savings application so long as its in \'Submitted and pending approval\' state.  Withdraw savings application:  Used when an applicant withdraws from the savings application. It must be in \'Submitted and pending approval\' state.  Activate a savings account:  Results in an approved savings application being converted into an \'active\' savings account.  Close a savings account:  Results in an Activated savings application being converted into an \'closed\' savings account.  closedOnDate is closure date of savings account  withdrawBalance is a boolean description, true value of this field performs a withdrawal transaction with account\'s running balance.  Mandatory Fields: dateFormat,locale,closedOnDate  Optional Fields: note, withdrawBalance, paymentTypeId, accountNumber, checkNumber, routingCode, receiptNumber, bankNumber  Calculate Interest on Savings Account:  Calculates interest earned on a savings account based on todays date. It does not attempt to post or credit the interest on the account. That is responsibility of the Post Interest API that will likely be called by overnight process.  Post Interest on Savings Account:  Calculates and Posts interest earned on a savings account based on today\'s date and whether an interest posting or crediting event is due.  Block Savings Account:  Blocks Savings account from all types of credit and debit transactions  Unblock Savings Account:  Unblock a blocked account. On unblocking account, user can perform debit and credit transactions  Block Savings Account Credit transactions:  Savings account will be blocked from all types of credit transactions.  Unblock Savings Account Credit transactions:  It unblocks the Saving account\'s credit operations. Now all types of credits can be transacted to Savings account  Block Savings Account Debit transactions:  All types of debit operations from Savings account wil be blocked  Unblock Savings Account debit transactions:  It unblocks the Saving account\'s debit operations. Now all types of debits can be transacted from Savings account  Showing request/response for \'Unassign Savings Officer\'
         * @summary Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
         * @param {number} accountId accountId
         * @param {PostSavingsAccountsAccountIdRequest} postSavingsAccountsAccountIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSavingsAccount: async (accountId: number, postSavingsAccountsAccountIdRequest: PostSavingsAccountsAccountIdRequest, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('manageSavingsAccount', 'accountId', accountId)
            // verify required parameter 'postSavingsAccountsAccountIdRequest' is not null or undefined
            assertParamExists('manageSavingsAccount', 'postSavingsAccountsAccountIdRequest', postSavingsAccountsAccountIdRequest)
            const localVarPath = `/savingsaccounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSavingsAccountsAccountIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSavingsTemplate: async (file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/savingsaccounts/uploadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
            if (locale !== undefined) { 
                localVarFormParams.append('locale', locale as any);
            }
    
            if (dateFormat !== undefined) { 
                localVarFormParams.append('dateFormat', dateFormat as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSavingsTransactionTemplate: async (file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/savingsaccounts/transactions/uploadtemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
            if (locale !== undefined) { 
                localVarFormParams.append('locale', locale as any);
            }
    
            if (dateFormat !== undefined) { 
                localVarFormParams.append('dateFormat', dateFormat as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a savings application/account  Example Requests :  savingsaccounts/1   savingsaccounts/1?associations=all
         * @summary Retrieve a savings application/account
         * @param {number} accountId accountId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccount: async (accountId: number, staffInSelectedOfficeOnly?: boolean, chargeStatus?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('retrieveSavingsAccount', 'accountId', accountId)
            const localVarPath = `/savingsaccounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (staffInSelectedOfficeOnly !== undefined) {
                localVarQueryParameter['staffInSelectedOfficeOnly'] = staffInSelectedOfficeOnly;
            }

            if (chargeStatus !== undefined) {
                localVarQueryParameter['chargeStatus'] = chargeStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists savings applications/accounts  Example Requests:  savingsaccounts   savingsaccounts?fields=name
         * @summary List savings applications/accounts
         * @param {string} [sqlSearch] sqlSearch
         * @param {string} [externalId] externalId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccounts: async (sqlSearch?: string, externalId?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/savingsaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (sqlSearch !== undefined) {
                localVarQueryParameter['sqlSearch'] = sqlSearch;
            }

            if (externalId !== undefined) {
                localVarQueryParameter['externalId'] = externalId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitGSIMApplication: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/savingsaccounts/gsim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits new savings application  Mandatory Fields: clientId or groupId, productId, submittedOnDate  Optional Fields: accountNo, externalId, fieldOfficerId  Inherited from Product (if not provided): nominalAnnualInterestRate, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minRequiredOpeningBalance, lockinPeriodFrequency, lockinPeriodFrequencyType, withdrawalFeeForTransfers, allowOverdraft, overdraftLimit, withHoldTax  Additional Mandatory Field if Entity-Datatable Check is enabled for the entity of type Savings: datatables
         * @summary Submit new savings application
         * @param {PostSavingsAccountsRequest} postSavingsAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSavingsAccountsApplication: async (postSavingsAccountsRequest: PostSavingsAccountsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postSavingsAccountsRequest' is not null or undefined
            assertParamExists('submitSavingsAccountsApplication', 'postSavingsAccountsRequest', postSavingsAccountsRequest)
            const localVarPath = `/savingsaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSavingsAccountsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} parentAccountId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGsim: async (parentAccountId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentAccountId' is not null or undefined
            assertParamExists('updateGsim', 'parentAccountId', parentAccountId)
            const localVarPath = `/savingsaccounts/gsim/{parentAccountId}`
                .replace(`{${"parentAccountId"}}`, encodeURIComponent(String(parentAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a savings application:  Savings application can only be modified when in \'Submitted and pending approval\' state. Once the application is approved, the details cannot be changed using this method. Specific api endpoints will be created to allow change of interest detail such as rate, compounding period, posting period etc  Modify savings account withhold tax applicability:  Savings application\'s withhold tax can be modified when in \'Active\' state. Once the application is activated, can modify the account withhold tax to post tax or vice-versaShowing request/response for \'Modify a savings application\'
         * @summary Modify a savings application | Modify savings account withhold tax applicability
         * @param {number} accountId accountId
         * @param {PutSavingsAccountsAccountIdRequest} putSavingsAccountsAccountIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavingsAccount: async (accountId: number, putSavingsAccountsAccountIdRequest: PutSavingsAccountsAccountIdRequest, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateSavingsAccount', 'accountId', accountId)
            // verify required parameter 'putSavingsAccountsAccountIdRequest' is not null or undefined
            assertParamExists('updateSavingsAccount', 'putSavingsAccountsAccountIdRequest', putSavingsAccountsAccountIdRequest)
            const localVarPath = `/savingsaccounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putSavingsAccountsAccountIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SavingsAccountApi - functional programming interface
 * @export
 */
export const SavingsAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SavingsAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * At present we support hard delete of savings application so long as its in \'Submitted and pending approval\' state. One the application is moves past this state, it is not possible to do a \'hard\' delete of the application or the account. An API endpoint will be added to close/de-activate the savings account.
         * @summary Delete a savings application
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSavingsAccount(accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSavingsAccountsAccountIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSavingsAccount(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  savingsaccounts/template?clientId=1   savingsaccounts/template?clientId=1&productId=1
         * @summary Retrieve Savings Account Template
         * @param {number} [clientId] clientId
         * @param {number} [groupId] groupId
         * @param {number} [productId] productId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavingsAccountTemplate(clientId?: number, groupId?: number, productId?: number, staffInSelectedOfficeOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSavingsAccountsTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavingsAccountTemplate(clientId, groupId, productId, staffInSelectedOfficeOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [staffId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavingsTemplate(officeId?: number, staffId?: number, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavingsTemplate(officeId, staffId, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavingsTransactionTemplate(officeId?: number, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavingsTransactionTemplate(officeId, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} parentAccountId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleGSIMCommands(parentAccountId: number, command?: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleGSIMCommands(parentAccountId, command, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Approve savings application:  Approves savings application so long as its in \'Submitted and pending approval\' state.  Undo approval savings application:  Will move \'approved\' savings application back to \'Submitted and pending approval\' state.  Assign Savings Officer:  Allows you to assign Savings Officer for existing Savings Account.  Unassign Savings Officer:  Allows you to unassign the Savings Officer.  Reject savings application:  Rejects savings application so long as its in \'Submitted and pending approval\' state.  Withdraw savings application:  Used when an applicant withdraws from the savings application. It must be in \'Submitted and pending approval\' state.  Activate a savings account:  Results in an approved savings application being converted into an \'active\' savings account.  Close a savings account:  Results in an Activated savings application being converted into an \'closed\' savings account.  closedOnDate is closure date of savings account  withdrawBalance is a boolean description, true value of this field performs a withdrawal transaction with account\'s running balance.  Mandatory Fields: dateFormat,locale,closedOnDate  Optional Fields: note, withdrawBalance, paymentTypeId, accountNumber, checkNumber, routingCode, receiptNumber, bankNumber  Calculate Interest on Savings Account:  Calculates interest earned on a savings account based on todays date. It does not attempt to post or credit the interest on the account. That is responsibility of the Post Interest API that will likely be called by overnight process.  Post Interest on Savings Account:  Calculates and Posts interest earned on a savings account based on today\'s date and whether an interest posting or crediting event is due.  Block Savings Account:  Blocks Savings account from all types of credit and debit transactions  Unblock Savings Account:  Unblock a blocked account. On unblocking account, user can perform debit and credit transactions  Block Savings Account Credit transactions:  Savings account will be blocked from all types of credit transactions.  Unblock Savings Account Credit transactions:  It unblocks the Saving account\'s credit operations. Now all types of credits can be transacted to Savings account  Block Savings Account Debit transactions:  All types of debit operations from Savings account wil be blocked  Unblock Savings Account debit transactions:  It unblocks the Saving account\'s debit operations. Now all types of debits can be transacted from Savings account  Showing request/response for \'Unassign Savings Officer\'
         * @summary Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
         * @param {number} accountId accountId
         * @param {PostSavingsAccountsAccountIdRequest} postSavingsAccountsAccountIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageSavingsAccount(accountId: number, postSavingsAccountsAccountIdRequest: PostSavingsAccountsAccountIdRequest, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSavingsAccountsAccountIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageSavingsAccount(accountId, postSavingsAccountsAccountIdRequest, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSavingsTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSavingsTemplate(file, locale, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSavingsTransactionTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSavingsTransactionTemplate(file, locale, dateFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a savings application/account  Example Requests :  savingsaccounts/1   savingsaccounts/1?associations=all
         * @summary Retrieve a savings application/account
         * @param {number} accountId accountId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSavingsAccount(accountId: number, staffInSelectedOfficeOnly?: boolean, chargeStatus?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSavingsAccountsAccountIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSavingsAccount(accountId, staffInSelectedOfficeOnly, chargeStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists savings applications/accounts  Example Requests:  savingsaccounts   savingsaccounts?fields=name
         * @summary List savings applications/accounts
         * @param {string} [sqlSearch] sqlSearch
         * @param {string} [externalId] externalId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSavingsAccounts(sqlSearch?: string, externalId?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSavingsAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSavingsAccounts(sqlSearch, externalId, offset, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitGSIMApplication(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitGSIMApplication(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits new savings application  Mandatory Fields: clientId or groupId, productId, submittedOnDate  Optional Fields: accountNo, externalId, fieldOfficerId  Inherited from Product (if not provided): nominalAnnualInterestRate, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minRequiredOpeningBalance, lockinPeriodFrequency, lockinPeriodFrequencyType, withdrawalFeeForTransfers, allowOverdraft, overdraftLimit, withHoldTax  Additional Mandatory Field if Entity-Datatable Check is enabled for the entity of type Savings: datatables
         * @summary Submit new savings application
         * @param {PostSavingsAccountsRequest} postSavingsAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitSavingsAccountsApplication(postSavingsAccountsRequest: PostSavingsAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSavingsAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitSavingsAccountsApplication(postSavingsAccountsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} parentAccountId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGsim(parentAccountId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGsim(parentAccountId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify a savings application:  Savings application can only be modified when in \'Submitted and pending approval\' state. Once the application is approved, the details cannot be changed using this method. Specific api endpoints will be created to allow change of interest detail such as rate, compounding period, posting period etc  Modify savings account withhold tax applicability:  Savings application\'s withhold tax can be modified when in \'Active\' state. Once the application is activated, can modify the account withhold tax to post tax or vice-versaShowing request/response for \'Modify a savings application\'
         * @summary Modify a savings application | Modify savings account withhold tax applicability
         * @param {number} accountId accountId
         * @param {PutSavingsAccountsAccountIdRequest} putSavingsAccountsAccountIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavingsAccount(accountId: number, putSavingsAccountsAccountIdRequest: PutSavingsAccountsAccountIdRequest, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutSavingsAccountsAccountIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavingsAccount(accountId, putSavingsAccountsAccountIdRequest, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SavingsAccountApi - factory interface
 * @export
 */
export const SavingsAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SavingsAccountApiFp(configuration)
    return {
        /**
         * At present we support hard delete of savings application so long as its in \'Submitted and pending approval\' state. One the application is moves past this state, it is not possible to do a \'hard\' delete of the application or the account. An API endpoint will be added to close/de-activate the savings account.
         * @summary Delete a savings application
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavingsAccount(accountId: number, options?: any): AxiosPromise<DeleteSavingsAccountsAccountIdResponse> {
            return localVarFp.deleteSavingsAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  savingsaccounts/template?clientId=1   savingsaccounts/template?clientId=1&productId=1
         * @summary Retrieve Savings Account Template
         * @param {number} [clientId] clientId
         * @param {number} [groupId] groupId
         * @param {number} [productId] productId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavingsAccountTemplate(clientId?: number, groupId?: number, productId?: number, staffInSelectedOfficeOnly?: boolean, options?: any): AxiosPromise<GetSavingsAccountsTemplateResponse> {
            return localVarFp.getSavingsAccountTemplate(clientId, groupId, productId, staffInSelectedOfficeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {number} [staffId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavingsTemplate(officeId?: number, staffId?: number, dateFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getSavingsTemplate(officeId, staffId, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [officeId] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavingsTransactionTemplate(officeId?: number, dateFormat?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getSavingsTransactionTemplate(officeId, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} parentAccountId 
         * @param {string} [command] 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleGSIMCommands(parentAccountId: number, command?: string, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.handleGSIMCommands(parentAccountId, command, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Approve savings application:  Approves savings application so long as its in \'Submitted and pending approval\' state.  Undo approval savings application:  Will move \'approved\' savings application back to \'Submitted and pending approval\' state.  Assign Savings Officer:  Allows you to assign Savings Officer for existing Savings Account.  Unassign Savings Officer:  Allows you to unassign the Savings Officer.  Reject savings application:  Rejects savings application so long as its in \'Submitted and pending approval\' state.  Withdraw savings application:  Used when an applicant withdraws from the savings application. It must be in \'Submitted and pending approval\' state.  Activate a savings account:  Results in an approved savings application being converted into an \'active\' savings account.  Close a savings account:  Results in an Activated savings application being converted into an \'closed\' savings account.  closedOnDate is closure date of savings account  withdrawBalance is a boolean description, true value of this field performs a withdrawal transaction with account\'s running balance.  Mandatory Fields: dateFormat,locale,closedOnDate  Optional Fields: note, withdrawBalance, paymentTypeId, accountNumber, checkNumber, routingCode, receiptNumber, bankNumber  Calculate Interest on Savings Account:  Calculates interest earned on a savings account based on todays date. It does not attempt to post or credit the interest on the account. That is responsibility of the Post Interest API that will likely be called by overnight process.  Post Interest on Savings Account:  Calculates and Posts interest earned on a savings account based on today\'s date and whether an interest posting or crediting event is due.  Block Savings Account:  Blocks Savings account from all types of credit and debit transactions  Unblock Savings Account:  Unblock a blocked account. On unblocking account, user can perform debit and credit transactions  Block Savings Account Credit transactions:  Savings account will be blocked from all types of credit transactions.  Unblock Savings Account Credit transactions:  It unblocks the Saving account\'s credit operations. Now all types of credits can be transacted to Savings account  Block Savings Account Debit transactions:  All types of debit operations from Savings account wil be blocked  Unblock Savings Account debit transactions:  It unblocks the Saving account\'s debit operations. Now all types of debits can be transacted from Savings account  Showing request/response for \'Unassign Savings Officer\'
         * @summary Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
         * @param {number} accountId accountId
         * @param {PostSavingsAccountsAccountIdRequest} postSavingsAccountsAccountIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSavingsAccount(accountId: number, postSavingsAccountsAccountIdRequest: PostSavingsAccountsAccountIdRequest, command?: string, options?: any): AxiosPromise<PostSavingsAccountsAccountIdResponse> {
            return localVarFp.manageSavingsAccount(accountId, postSavingsAccountsAccountIdRequest, command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSavingsTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): AxiosPromise<string> {
            return localVarFp.postSavingsTemplate(file, locale, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormDataContentDisposition} [file] 
         * @param {string} [locale] 
         * @param {string} [dateFormat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSavingsTransactionTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any): AxiosPromise<string> {
            return localVarFp.postSavingsTransactionTemplate(file, locale, dateFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a savings application/account  Example Requests :  savingsaccounts/1   savingsaccounts/1?associations=all
         * @summary Retrieve a savings application/account
         * @param {number} accountId accountId
         * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
         * @param {string} [chargeStatus] chargeStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccount(accountId: number, staffInSelectedOfficeOnly?: boolean, chargeStatus?: string, options?: any): AxiosPromise<GetSavingsAccountsAccountIdResponse> {
            return localVarFp.retrieveSavingsAccount(accountId, staffInSelectedOfficeOnly, chargeStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists savings applications/accounts  Example Requests:  savingsaccounts   savingsaccounts?fields=name
         * @summary List savings applications/accounts
         * @param {string} [sqlSearch] sqlSearch
         * @param {string} [externalId] externalId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSavingsAccounts(sqlSearch?: string, externalId?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<GetSavingsAccountsResponse> {
            return localVarFp.retrieveSavingsAccounts(sqlSearch, externalId, offset, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitGSIMApplication(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.submitGSIMApplication(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits new savings application  Mandatory Fields: clientId or groupId, productId, submittedOnDate  Optional Fields: accountNo, externalId, fieldOfficerId  Inherited from Product (if not provided): nominalAnnualInterestRate, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minRequiredOpeningBalance, lockinPeriodFrequency, lockinPeriodFrequencyType, withdrawalFeeForTransfers, allowOverdraft, overdraftLimit, withHoldTax  Additional Mandatory Field if Entity-Datatable Check is enabled for the entity of type Savings: datatables
         * @summary Submit new savings application
         * @param {PostSavingsAccountsRequest} postSavingsAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSavingsAccountsApplication(postSavingsAccountsRequest: PostSavingsAccountsRequest, options?: any): AxiosPromise<PostSavingsAccountsResponse> {
            return localVarFp.submitSavingsAccountsApplication(postSavingsAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} parentAccountId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGsim(parentAccountId: number, body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateGsim(parentAccountId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify a savings application:  Savings application can only be modified when in \'Submitted and pending approval\' state. Once the application is approved, the details cannot be changed using this method. Specific api endpoints will be created to allow change of interest detail such as rate, compounding period, posting period etc  Modify savings account withhold tax applicability:  Savings application\'s withhold tax can be modified when in \'Active\' state. Once the application is activated, can modify the account withhold tax to post tax or vice-versaShowing request/response for \'Modify a savings application\'
         * @summary Modify a savings application | Modify savings account withhold tax applicability
         * @param {number} accountId accountId
         * @param {PutSavingsAccountsAccountIdRequest} putSavingsAccountsAccountIdRequest 
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavingsAccount(accountId: number, putSavingsAccountsAccountIdRequest: PutSavingsAccountsAccountIdRequest, command?: string, options?: any): AxiosPromise<PutSavingsAccountsAccountIdResponse> {
            return localVarFp.updateSavingsAccount(accountId, putSavingsAccountsAccountIdRequest, command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SavingsAccountApi - object-oriented interface
 * @export
 * @class SavingsAccountApi
 * @extends {BaseAPI}
 */
export class SavingsAccountApi extends BaseAPI {
    /**
     * At present we support hard delete of savings application so long as its in \'Submitted and pending approval\' state. One the application is moves past this state, it is not possible to do a \'hard\' delete of the application or the account. An API endpoint will be added to close/de-activate the savings account.
     * @summary Delete a savings application
     * @param {number} accountId accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public deleteSavingsAccount(accountId: number, options?: any) {
        return SavingsAccountApiFp(this.configuration).deleteSavingsAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  savingsaccounts/template?clientId=1   savingsaccounts/template?clientId=1&productId=1
     * @summary Retrieve Savings Account Template
     * @param {number} [clientId] clientId
     * @param {number} [groupId] groupId
     * @param {number} [productId] productId
     * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public getSavingsAccountTemplate(clientId?: number, groupId?: number, productId?: number, staffInSelectedOfficeOnly?: boolean, options?: any) {
        return SavingsAccountApiFp(this.configuration).getSavingsAccountTemplate(clientId, groupId, productId, staffInSelectedOfficeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [officeId] 
     * @param {number} [staffId] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public getSavingsTemplate(officeId?: number, staffId?: number, dateFormat?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).getSavingsTemplate(officeId, staffId, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [officeId] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public getSavingsTransactionTemplate(officeId?: number, dateFormat?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).getSavingsTransactionTemplate(officeId, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} parentAccountId 
     * @param {string} [command] 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public handleGSIMCommands(parentAccountId: number, command?: string, body?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).handleGSIMCommands(parentAccountId, command, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Approve savings application:  Approves savings application so long as its in \'Submitted and pending approval\' state.  Undo approval savings application:  Will move \'approved\' savings application back to \'Submitted and pending approval\' state.  Assign Savings Officer:  Allows you to assign Savings Officer for existing Savings Account.  Unassign Savings Officer:  Allows you to unassign the Savings Officer.  Reject savings application:  Rejects savings application so long as its in \'Submitted and pending approval\' state.  Withdraw savings application:  Used when an applicant withdraws from the savings application. It must be in \'Submitted and pending approval\' state.  Activate a savings account:  Results in an approved savings application being converted into an \'active\' savings account.  Close a savings account:  Results in an Activated savings application being converted into an \'closed\' savings account.  closedOnDate is closure date of savings account  withdrawBalance is a boolean description, true value of this field performs a withdrawal transaction with account\'s running balance.  Mandatory Fields: dateFormat,locale,closedOnDate  Optional Fields: note, withdrawBalance, paymentTypeId, accountNumber, checkNumber, routingCode, receiptNumber, bankNumber  Calculate Interest on Savings Account:  Calculates interest earned on a savings account based on todays date. It does not attempt to post or credit the interest on the account. That is responsibility of the Post Interest API that will likely be called by overnight process.  Post Interest on Savings Account:  Calculates and Posts interest earned on a savings account based on today\'s date and whether an interest posting or crediting event is due.  Block Savings Account:  Blocks Savings account from all types of credit and debit transactions  Unblock Savings Account:  Unblock a blocked account. On unblocking account, user can perform debit and credit transactions  Block Savings Account Credit transactions:  Savings account will be blocked from all types of credit transactions.  Unblock Savings Account Credit transactions:  It unblocks the Saving account\'s credit operations. Now all types of credits can be transacted to Savings account  Block Savings Account Debit transactions:  All types of debit operations from Savings account wil be blocked  Unblock Savings Account debit transactions:  It unblocks the Saving account\'s debit operations. Now all types of debits can be transacted from Savings account  Showing request/response for \'Unassign Savings Officer\'
     * @summary Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
     * @param {number} accountId accountId
     * @param {PostSavingsAccountsAccountIdRequest} postSavingsAccountsAccountIdRequest 
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public manageSavingsAccount(accountId: number, postSavingsAccountsAccountIdRequest: PostSavingsAccountsAccountIdRequest, command?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).manageSavingsAccount(accountId, postSavingsAccountsAccountIdRequest, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormDataContentDisposition} [file] 
     * @param {string} [locale] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public postSavingsTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).postSavingsTemplate(file, locale, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormDataContentDisposition} [file] 
     * @param {string} [locale] 
     * @param {string} [dateFormat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public postSavingsTransactionTemplate(file?: FormDataContentDisposition, locale?: string, dateFormat?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).postSavingsTransactionTemplate(file, locale, dateFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a savings application/account  Example Requests :  savingsaccounts/1   savingsaccounts/1?associations=all
     * @summary Retrieve a savings application/account
     * @param {number} accountId accountId
     * @param {boolean} [staffInSelectedOfficeOnly] staffInSelectedOfficeOnly
     * @param {string} [chargeStatus] chargeStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public retrieveSavingsAccount(accountId: number, staffInSelectedOfficeOnly?: boolean, chargeStatus?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).retrieveSavingsAccount(accountId, staffInSelectedOfficeOnly, chargeStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists savings applications/accounts  Example Requests:  savingsaccounts   savingsaccounts?fields=name
     * @summary List savings applications/accounts
     * @param {string} [sqlSearch] sqlSearch
     * @param {string} [externalId] externalId
     * @param {number} [offset] offset
     * @param {number} [limit] limit
     * @param {string} [orderBy] orderBy
     * @param {string} [sortOrder] sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public retrieveSavingsAccounts(sqlSearch?: string, externalId?: string, offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).retrieveSavingsAccounts(sqlSearch, externalId, offset, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public submitGSIMApplication(body?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).submitGSIMApplication(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits new savings application  Mandatory Fields: clientId or groupId, productId, submittedOnDate  Optional Fields: accountNo, externalId, fieldOfficerId  Inherited from Product (if not provided): nominalAnnualInterestRate, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minRequiredOpeningBalance, lockinPeriodFrequency, lockinPeriodFrequencyType, withdrawalFeeForTransfers, allowOverdraft, overdraftLimit, withHoldTax  Additional Mandatory Field if Entity-Datatable Check is enabled for the entity of type Savings: datatables
     * @summary Submit new savings application
     * @param {PostSavingsAccountsRequest} postSavingsAccountsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public submitSavingsAccountsApplication(postSavingsAccountsRequest: PostSavingsAccountsRequest, options?: any) {
        return SavingsAccountApiFp(this.configuration).submitSavingsAccountsApplication(postSavingsAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} parentAccountId 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public updateGsim(parentAccountId: number, body?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).updateGsim(parentAccountId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify a savings application:  Savings application can only be modified when in \'Submitted and pending approval\' state. Once the application is approved, the details cannot be changed using this method. Specific api endpoints will be created to allow change of interest detail such as rate, compounding period, posting period etc  Modify savings account withhold tax applicability:  Savings application\'s withhold tax can be modified when in \'Active\' state. Once the application is activated, can modify the account withhold tax to post tax or vice-versaShowing request/response for \'Modify a savings application\'
     * @summary Modify a savings application | Modify savings account withhold tax applicability
     * @param {number} accountId accountId
     * @param {PutSavingsAccountsAccountIdRequest} putSavingsAccountsAccountIdRequest 
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsAccountApi
     */
    public updateSavingsAccount(accountId: number, putSavingsAccountsAccountIdRequest: PutSavingsAccountsAccountIdRequest, command?: string, options?: any) {
        return SavingsAccountApiFp(this.configuration).updateSavingsAccount(accountId, putSavingsAccountsAccountIdRequest, command, options).then((request) => request(this.axios, this.basePath));
    }
}
