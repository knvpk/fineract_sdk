/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountingRuleData } from '../models';
// @ts-ignore
import { DeleteAccountingRulesResponse } from '../models';
// @ts-ignore
import { GetAccountRulesResponse } from '../models';
// @ts-ignore
import { GetAccountRulesTemplateResponse } from '../models';
// @ts-ignore
import { PostAccountingRulesRequest } from '../models';
// @ts-ignore
import { PostAccountingRulesResponse } from '../models';
// @ts-ignore
import { PutAccountingRulesRequest } from '../models';
// @ts-ignore
import { PutAccountingRulesResponse } from '../models';
/**
 * AccountingRulesApi - axios parameter creator
 * @export
 */
export const AccountingRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Define a new Accounting rule.  Mandatory Fields name, officeId, accountToDebit OR debitTags, accountToCredit OR creditTags.  Optional Fields description
         * @summary Create/Define a Accounting rule
         * @param {PostAccountingRulesRequest} [postAccountingRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountingRule: async (postAccountingRulesRequest?: PostAccountingRulesRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accountingrules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAccountingRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Accounting rule.
         * @summary Delete a Accounting Rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountingRule: async (accountingRuleId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountingRuleId' is not null or undefined
            assertParamExists('deleteAccountingRule', 'accountingRuleId', accountingRuleId)
            const localVarPath = `/accountingrules/{accountingRuleId}`
                .replace(`{${"accountingRuleId"}}`, encodeURIComponent(String(accountingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a defined Accounting rule.  Example Requests:  accountingrules/1
         * @summary Retrieve a Accounting rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveAccountingRule: async (accountingRuleId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountingRuleId' is not null or undefined
            assertParamExists('retreiveAccountingRule', 'accountingRuleId', accountingRuleId)
            const localVarPath = `/accountingrules/{accountingRuleId}`
                .replace(`{${"accountingRuleId"}}`, encodeURIComponent(String(accountingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of defined accounting rules.  Example Requests:  accountingrules
         * @summary Retrieve Accounting Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllAccountingRules: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accountingrules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  accountingrules/template
         * @summary Retrieve Accounting Rule Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accountingrules/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of a Accounting rule.
         * @summary Update a Accounting Rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {PutAccountingRulesRequest} [putAccountingRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountingRule: async (accountingRuleId: number, putAccountingRulesRequest?: PutAccountingRulesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountingRuleId' is not null or undefined
            assertParamExists('updateAccountingRule', 'accountingRuleId', accountingRuleId)
            const localVarPath = `/accountingrules/{accountingRuleId}`
                .replace(`{${"accountingRuleId"}}`, encodeURIComponent(String(accountingRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putAccountingRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountingRulesApi - functional programming interface
 * @export
 */
export const AccountingRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountingRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Define a new Accounting rule.  Mandatory Fields name, officeId, accountToDebit OR debitTags, accountToCredit OR creditTags.  Optional Fields description
         * @summary Create/Define a Accounting rule
         * @param {PostAccountingRulesRequest} [postAccountingRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountingRule(postAccountingRulesRequest?: PostAccountingRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAccountingRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountingRule(postAccountingRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Accounting rule.
         * @summary Delete a Accounting Rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountingRule(accountingRuleId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAccountingRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccountingRule(accountingRuleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a defined Accounting rule.  Example Requests:  accountingrules/1
         * @summary Retrieve a Accounting rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retreiveAccountingRule(accountingRuleId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountingRuleData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retreiveAccountingRule(accountingRuleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the list of defined accounting rules.  Example Requests:  accountingrules
         * @summary Retrieve Accounting Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllAccountingRules(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAccountRulesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllAccountingRules(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  accountingrules/template
         * @summary Retrieve Accounting Rule Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTemplate1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountRulesTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTemplate1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the details of a Accounting rule.
         * @summary Update a Accounting Rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {PutAccountingRulesRequest} [putAccountingRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountingRule(accountingRuleId: number, putAccountingRulesRequest?: PutAccountingRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutAccountingRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountingRule(accountingRuleId, putAccountingRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountingRulesApi - factory interface
 * @export
 */
export const AccountingRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountingRulesApiFp(configuration)
    return {
        /**
         * Define a new Accounting rule.  Mandatory Fields name, officeId, accountToDebit OR debitTags, accountToCredit OR creditTags.  Optional Fields description
         * @summary Create/Define a Accounting rule
         * @param {PostAccountingRulesRequest} [postAccountingRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountingRule(postAccountingRulesRequest?: PostAccountingRulesRequest, options?: any): AxiosPromise<PostAccountingRulesResponse> {
            return localVarFp.createAccountingRule(postAccountingRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Accounting rule.
         * @summary Delete a Accounting Rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountingRule(accountingRuleId: number, options?: any): AxiosPromise<DeleteAccountingRulesResponse> {
            return localVarFp.deleteAccountingRule(accountingRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a defined Accounting rule.  Example Requests:  accountingrules/1
         * @summary Retrieve a Accounting rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retreiveAccountingRule(accountingRuleId: number, options?: any): AxiosPromise<AccountingRuleData> {
            return localVarFp.retreiveAccountingRule(accountingRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of defined accounting rules.  Example Requests:  accountingrules
         * @summary Retrieve Accounting Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllAccountingRules(options?: any): AxiosPromise<Array<GetAccountRulesResponse>> {
            return localVarFp.retrieveAllAccountingRules(options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  accountingrules/template
         * @summary Retrieve Accounting Rule Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate1(options?: any): AxiosPromise<GetAccountRulesTemplateResponse> {
            return localVarFp.retrieveTemplate1(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of a Accounting rule.
         * @summary Update a Accounting Rule
         * @param {number} accountingRuleId accountingRuleId
         * @param {PutAccountingRulesRequest} [putAccountingRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountingRule(accountingRuleId: number, putAccountingRulesRequest?: PutAccountingRulesRequest, options?: any): AxiosPromise<PutAccountingRulesResponse> {
            return localVarFp.updateAccountingRule(accountingRuleId, putAccountingRulesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountingRulesApi - object-oriented interface
 * @export
 * @class AccountingRulesApi
 * @extends {BaseAPI}
 */
export class AccountingRulesApi extends BaseAPI {
    /**
     * Define a new Accounting rule.  Mandatory Fields name, officeId, accountToDebit OR debitTags, accountToCredit OR creditTags.  Optional Fields description
     * @summary Create/Define a Accounting rule
     * @param {PostAccountingRulesRequest} [postAccountingRulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingRulesApi
     */
    public createAccountingRule(postAccountingRulesRequest?: PostAccountingRulesRequest, options?: any) {
        return AccountingRulesApiFp(this.configuration).createAccountingRule(postAccountingRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Accounting rule.
     * @summary Delete a Accounting Rule
     * @param {number} accountingRuleId accountingRuleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingRulesApi
     */
    public deleteAccountingRule(accountingRuleId: number, options?: any) {
        return AccountingRulesApiFp(this.configuration).deleteAccountingRule(accountingRuleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a defined Accounting rule.  Example Requests:  accountingrules/1
     * @summary Retrieve a Accounting rule
     * @param {number} accountingRuleId accountingRuleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingRulesApi
     */
    public retreiveAccountingRule(accountingRuleId: number, options?: any) {
        return AccountingRulesApiFp(this.configuration).retreiveAccountingRule(accountingRuleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of defined accounting rules.  Example Requests:  accountingrules
     * @summary Retrieve Accounting Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingRulesApi
     */
    public retrieveAllAccountingRules(options?: any) {
        return AccountingRulesApiFp(this.configuration).retrieveAllAccountingRules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  accountingrules/template
     * @summary Retrieve Accounting Rule Details Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingRulesApi
     */
    public retrieveTemplate1(options?: any) {
        return AccountingRulesApiFp(this.configuration).retrieveTemplate1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of a Accounting rule.
     * @summary Update a Accounting Rule
     * @param {number} accountingRuleId accountingRuleId
     * @param {PutAccountingRulesRequest} [putAccountingRulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingRulesApi
     */
    public updateAccountingRule(accountingRuleId: number, putAccountingRulesRequest?: PutAccountingRulesRequest, options?: any) {
        return AccountingRulesApiFp(this.configuration).updateAccountingRule(accountingRuleId, putAccountingRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
