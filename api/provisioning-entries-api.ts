/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LoanProductProvisioningEntryData } from '../models';
// @ts-ignore
import { PostProvisioningEntriesRequest } from '../models';
// @ts-ignore
import { PostProvisioningEntriesResponse } from '../models';
// @ts-ignore
import { ProvisioningEntryData } from '../models';
// @ts-ignore
import { PutProvisioningEntriesRequest } from '../models';
// @ts-ignore
import { PutProvisioningEntriesResponse } from '../models';
/**
 * ProvisioningEntriesApi - axios parameter creator
 * @export
 */
export const ProvisioningEntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Provisioning Entries  Mandatory Fields date dateFormat locale Optional Fields createjournalentries
         * @summary Create new Provisioning Entries
         * @param {PostProvisioningEntriesRequest} [postProvisioningEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvisioningEntries: async (postProvisioningEntriesRequest?: PostProvisioningEntriesRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/provisioningentries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProvisioningEntriesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Recreates Provisioning Entry | createjournalentry.
         * @summary Recreates Provisioning Entry
         * @param {number} entryId entryId
         * @param {string} [command] command&#x3D;createjournalentry command&#x3D;recreateprovisioningentry
         * @param {PutProvisioningEntriesRequest} [putProvisioningEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProvisioningEntry: async (entryId: number, command?: string, putProvisioningEntriesRequest?: PutProvisioningEntriesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('modifyProvisioningEntry', 'entryId', entryId)
            const localVarPath = `/provisioningentries/{entryId}`
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProvisioningEntriesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Provisioning Entries
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllProvisioningEntries: async (offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/provisioningentries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [entryId] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {number} [officeId] 
         * @param {number} [productId] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProviioningEntries: async (entryId?: number, offset?: number, limit?: number, officeId?: number, productId?: number, categoryId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/provisioningentries/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (entryId !== undefined) {
                localVarQueryParameter['entryId'] = entryId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a generated Provisioning Entry.
         * @summary Retrieves a Provisioning Entry
         * @param {number} entryId entryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProvisioningEntry: async (entryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('retrieveProvisioningEntry', 'entryId', entryId)
            const localVarPath = `/provisioningentries/{entryId}`
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningEntriesApi - functional programming interface
 * @export
 */
export const ProvisioningEntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningEntriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new Provisioning Entries  Mandatory Fields date dateFormat locale Optional Fields createjournalentries
         * @summary Create new Provisioning Entries
         * @param {PostProvisioningEntriesRequest} [postProvisioningEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProvisioningEntries(postProvisioningEntriesRequest?: PostProvisioningEntriesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostProvisioningEntriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProvisioningEntries(postProvisioningEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Recreates Provisioning Entry | createjournalentry.
         * @summary Recreates Provisioning Entry
         * @param {number} entryId entryId
         * @param {string} [command] command&#x3D;createjournalentry command&#x3D;recreateprovisioningentry
         * @param {PutProvisioningEntriesRequest} [putProvisioningEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProvisioningEntry(entryId: number, command?: string, putProvisioningEntriesRequest?: PutProvisioningEntriesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutProvisioningEntriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyProvisioningEntry(entryId, command, putProvisioningEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Provisioning Entries
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllProvisioningEntries(offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProvisioningEntryData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllProvisioningEntries(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [entryId] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {number} [officeId] 
         * @param {number} [productId] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveProviioningEntries(entryId?: number, offset?: number, limit?: number, officeId?: number, productId?: number, categoryId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoanProductProvisioningEntryData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveProviioningEntries(entryId, offset, limit, officeId, productId, categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a generated Provisioning Entry.
         * @summary Retrieves a Provisioning Entry
         * @param {number} entryId entryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveProvisioningEntry(entryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningEntryData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveProvisioningEntry(entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningEntriesApi - factory interface
 * @export
 */
export const ProvisioningEntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningEntriesApiFp(configuration)
    return {
        /**
         * Creates a new Provisioning Entries  Mandatory Fields date dateFormat locale Optional Fields createjournalentries
         * @summary Create new Provisioning Entries
         * @param {PostProvisioningEntriesRequest} [postProvisioningEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvisioningEntries(postProvisioningEntriesRequest?: PostProvisioningEntriesRequest, options?: any): AxiosPromise<PostProvisioningEntriesResponse> {
            return localVarFp.createProvisioningEntries(postProvisioningEntriesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Recreates Provisioning Entry | createjournalentry.
         * @summary Recreates Provisioning Entry
         * @param {number} entryId entryId
         * @param {string} [command] command&#x3D;createjournalentry command&#x3D;recreateprovisioningentry
         * @param {PutProvisioningEntriesRequest} [putProvisioningEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProvisioningEntry(entryId: number, command?: string, putProvisioningEntriesRequest?: PutProvisioningEntriesRequest, options?: any): AxiosPromise<PutProvisioningEntriesResponse> {
            return localVarFp.modifyProvisioningEntry(entryId, command, putProvisioningEntriesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Provisioning Entries
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllProvisioningEntries(offset?: number, limit?: number, options?: any): AxiosPromise<Array<ProvisioningEntryData>> {
            return localVarFp.retrieveAllProvisioningEntries(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [entryId] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {number} [officeId] 
         * @param {number} [productId] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProviioningEntries(entryId?: number, offset?: number, limit?: number, officeId?: number, productId?: number, categoryId?: number, options?: any): AxiosPromise<LoanProductProvisioningEntryData> {
            return localVarFp.retrieveProviioningEntries(entryId, offset, limit, officeId, productId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a generated Provisioning Entry.
         * @summary Retrieves a Provisioning Entry
         * @param {number} entryId entryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProvisioningEntry(entryId: number, options?: any): AxiosPromise<ProvisioningEntryData> {
            return localVarFp.retrieveProvisioningEntry(entryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisioningEntriesApi - object-oriented interface
 * @export
 * @class ProvisioningEntriesApi
 * @extends {BaseAPI}
 */
export class ProvisioningEntriesApi extends BaseAPI {
    /**
     * Creates a new Provisioning Entries  Mandatory Fields date dateFormat locale Optional Fields createjournalentries
     * @summary Create new Provisioning Entries
     * @param {PostProvisioningEntriesRequest} [postProvisioningEntriesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningEntriesApi
     */
    public createProvisioningEntries(postProvisioningEntriesRequest?: PostProvisioningEntriesRequest, options?: any) {
        return ProvisioningEntriesApiFp(this.configuration).createProvisioningEntries(postProvisioningEntriesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Recreates Provisioning Entry | createjournalentry.
     * @summary Recreates Provisioning Entry
     * @param {number} entryId entryId
     * @param {string} [command] command&#x3D;createjournalentry command&#x3D;recreateprovisioningentry
     * @param {PutProvisioningEntriesRequest} [putProvisioningEntriesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningEntriesApi
     */
    public modifyProvisioningEntry(entryId: number, command?: string, putProvisioningEntriesRequest?: PutProvisioningEntriesRequest, options?: any) {
        return ProvisioningEntriesApiFp(this.configuration).modifyProvisioningEntry(entryId, command, putProvisioningEntriesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Provisioning Entries
     * @param {number} [offset] offset
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningEntriesApi
     */
    public retrieveAllProvisioningEntries(offset?: number, limit?: number, options?: any) {
        return ProvisioningEntriesApiFp(this.configuration).retrieveAllProvisioningEntries(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [entryId] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {number} [officeId] 
     * @param {number} [productId] 
     * @param {number} [categoryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningEntriesApi
     */
    public retrieveProviioningEntries(entryId?: number, offset?: number, limit?: number, officeId?: number, productId?: number, categoryId?: number, options?: any) {
        return ProvisioningEntriesApiFp(this.configuration).retrieveProviioningEntries(entryId, offset, limit, officeId, productId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a generated Provisioning Entry.
     * @summary Retrieves a Provisioning Entry
     * @param {number} entryId entryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningEntriesApi
     */
    public retrieveProvisioningEntry(entryId: number, options?: any) {
        return ProvisioningEntriesApiFp(this.configuration).retrieveProvisioningEntry(entryId, options).then((request) => request(this.axios, this.basePath));
    }
}
