/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteReportMailingJobsResponse } from '../models';
// @ts-ignore
import { GetReportMailingJobsResponse } from '../models';
// @ts-ignore
import { GetReportMailingJobsTemplate } from '../models';
// @ts-ignore
import { PostReportMailingJobsRequest } from '../models';
// @ts-ignore
import { PostReportMailingJobsResponse } from '../models';
// @ts-ignore
import { PutReportMailingJobsRequest } from '../models';
// @ts-ignore
import { PutReportMailingJobsResponse } from '../models';
/**
 * ReportMailingJobsApi - axios parameter creator
 * @export
 */
export const ReportMailingJobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mandatory Fields: name, startDateTime, stretchyReportId, emailRecipients, emailSubject, emailMessage, emailAttachmentFileFormatId, recurrence, isActive  Optional Fields: description, stretchyReportParamMap
         * @summary Create a Report Mailing Job
         * @param {PostReportMailingJobsRequest} postReportMailingJobsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReportMailingJob: async (postReportMailingJobsRequest: PostReportMailingJobsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postReportMailingJobsRequest' is not null or undefined
            assertParamExists('createReportMailingJob', 'postReportMailingJobsRequest', postReportMailingJobsRequest)
            const localVarPath = `/reportmailingjobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postReportMailingJobsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Report Mailing Job
         * @param {number} entityId entityId
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportMailingJob: async (entityId: number, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('deleteReportMailingJob', 'entityId', entityId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deleteReportMailingJob', 'body', body)
            const localVarPath = `/reportmailingjobs/{entityId}`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  reportmailingjobs
         * @summary List Report Mailing Jobs
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllReportMailingJobs: async (offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/reportmailingjobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  reportmailingjobs/1   reportmailingjobs/1?template=true
         * @summary Retrieve a Report Mailing Job
         * @param {number} entityId entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReportMailingJob: async (entityId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('retrieveReportMailingJob', 'entityId', entityId)
            const localVarPath = `/reportmailingjobs/{entityId}`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for report mailing job applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  reportmailingjobs/template
         * @summary Retrieve Report Mailing Job Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReportMailingJobTemplate: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/reportmailingjobs/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Report Mailing Job 
         * @param {number} entityId entityId
         * @param {PutReportMailingJobsRequest} putReportMailingJobsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportMailingJob: async (entityId: number, putReportMailingJobsRequest: PutReportMailingJobsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('updateReportMailingJob', 'entityId', entityId)
            // verify required parameter 'putReportMailingJobsRequest' is not null or undefined
            assertParamExists('updateReportMailingJob', 'putReportMailingJobsRequest', putReportMailingJobsRequest)
            const localVarPath = `/reportmailingjobs/{entityId}`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putReportMailingJobsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportMailingJobsApi - functional programming interface
 * @export
 */
export const ReportMailingJobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportMailingJobsApiAxiosParamCreator(configuration)
    return {
        /**
         * Mandatory Fields: name, startDateTime, stretchyReportId, emailRecipients, emailSubject, emailMessage, emailAttachmentFileFormatId, recurrence, isActive  Optional Fields: description, stretchyReportParamMap
         * @summary Create a Report Mailing Job
         * @param {PostReportMailingJobsRequest} postReportMailingJobsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReportMailingJob(postReportMailingJobsRequest: PostReportMailingJobsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostReportMailingJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReportMailingJob(postReportMailingJobsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Report Mailing Job
         * @param {number} entityId entityId
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReportMailingJob(entityId: number, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteReportMailingJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReportMailingJob(entityId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  reportmailingjobs
         * @summary List Report Mailing Jobs
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllReportMailingJobs(offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetReportMailingJobsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllReportMailingJobs(offset, limit, orderBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  reportmailingjobs/1   reportmailingjobs/1?template=true
         * @summary Retrieve a Report Mailing Job
         * @param {number} entityId entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveReportMailingJob(entityId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportMailingJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveReportMailingJob(entityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for report mailing job applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  reportmailingjobs/template
         * @summary Retrieve Report Mailing Job Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveReportMailingJobTemplate(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportMailingJobsTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveReportMailingJobTemplate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Report Mailing Job 
         * @param {number} entityId entityId
         * @param {PutReportMailingJobsRequest} putReportMailingJobsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReportMailingJob(entityId: number, putReportMailingJobsRequest: PutReportMailingJobsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutReportMailingJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReportMailingJob(entityId, putReportMailingJobsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportMailingJobsApi - factory interface
 * @export
 */
export const ReportMailingJobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportMailingJobsApiFp(configuration)
    return {
        /**
         * Mandatory Fields: name, startDateTime, stretchyReportId, emailRecipients, emailSubject, emailMessage, emailAttachmentFileFormatId, recurrence, isActive  Optional Fields: description, stretchyReportParamMap
         * @summary Create a Report Mailing Job
         * @param {PostReportMailingJobsRequest} postReportMailingJobsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReportMailingJob(postReportMailingJobsRequest: PostReportMailingJobsRequest, options?: any): AxiosPromise<PostReportMailingJobsResponse> {
            return localVarFp.createReportMailingJob(postReportMailingJobsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Report Mailing Job
         * @param {number} entityId entityId
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportMailingJob(entityId: number, body: object, options?: any): AxiosPromise<DeleteReportMailingJobsResponse> {
            return localVarFp.deleteReportMailingJob(entityId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  reportmailingjobs
         * @summary List Report Mailing Jobs
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {string} [orderBy] orderBy
         * @param {string} [sortOrder] sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllReportMailingJobs(offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any): AxiosPromise<Array<GetReportMailingJobsResponse>> {
            return localVarFp.retrieveAllReportMailingJobs(offset, limit, orderBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  reportmailingjobs/1   reportmailingjobs/1?template=true
         * @summary Retrieve a Report Mailing Job
         * @param {number} entityId entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReportMailingJob(entityId: number, options?: any): AxiosPromise<GetReportMailingJobsResponse> {
            return localVarFp.retrieveReportMailingJob(entityId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for report mailing job applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  reportmailingjobs/template
         * @summary Retrieve Report Mailing Job Details Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReportMailingJobTemplate(options?: any): AxiosPromise<GetReportMailingJobsTemplate> {
            return localVarFp.retrieveReportMailingJobTemplate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Report Mailing Job 
         * @param {number} entityId entityId
         * @param {PutReportMailingJobsRequest} putReportMailingJobsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportMailingJob(entityId: number, putReportMailingJobsRequest: PutReportMailingJobsRequest, options?: any): AxiosPromise<PutReportMailingJobsResponse> {
            return localVarFp.updateReportMailingJob(entityId, putReportMailingJobsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportMailingJobsApi - object-oriented interface
 * @export
 * @class ReportMailingJobsApi
 * @extends {BaseAPI}
 */
export class ReportMailingJobsApi extends BaseAPI {
    /**
     * Mandatory Fields: name, startDateTime, stretchyReportId, emailRecipients, emailSubject, emailMessage, emailAttachmentFileFormatId, recurrence, isActive  Optional Fields: description, stretchyReportParamMap
     * @summary Create a Report Mailing Job
     * @param {PostReportMailingJobsRequest} postReportMailingJobsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportMailingJobsApi
     */
    public createReportMailingJob(postReportMailingJobsRequest: PostReportMailingJobsRequest, options?: any) {
        return ReportMailingJobsApiFp(this.configuration).createReportMailingJob(postReportMailingJobsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Report Mailing Job
     * @param {number} entityId entityId
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportMailingJobsApi
     */
    public deleteReportMailingJob(entityId: number, body: object, options?: any) {
        return ReportMailingJobsApiFp(this.configuration).deleteReportMailingJob(entityId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  reportmailingjobs
     * @summary List Report Mailing Jobs
     * @param {number} [offset] offset
     * @param {number} [limit] limit
     * @param {string} [orderBy] orderBy
     * @param {string} [sortOrder] sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportMailingJobsApi
     */
    public retrieveAllReportMailingJobs(offset?: number, limit?: number, orderBy?: string, sortOrder?: string, options?: any) {
        return ReportMailingJobsApiFp(this.configuration).retrieveAllReportMailingJobs(offset, limit, orderBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  reportmailingjobs/1   reportmailingjobs/1?template=true
     * @summary Retrieve a Report Mailing Job
     * @param {number} entityId entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportMailingJobsApi
     */
    public retrieveReportMailingJob(entityId: number, options?: any) {
        return ReportMailingJobsApiFp(this.configuration).retrieveReportMailingJob(entityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for report mailing job applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  reportmailingjobs/template
     * @summary Retrieve Report Mailing Job Details Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportMailingJobsApi
     */
    public retrieveReportMailingJobTemplate(options?: any) {
        return ReportMailingJobsApiFp(this.configuration).retrieveReportMailingJobTemplate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Report Mailing Job 
     * @param {number} entityId entityId
     * @param {PutReportMailingJobsRequest} putReportMailingJobsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportMailingJobsApi
     */
    public updateReportMailingJob(entityId: number, putReportMailingJobsRequest: PutReportMailingJobsRequest, options?: any) {
        return ReportMailingJobsApiFp(this.configuration).updateReportMailingJob(entityId, putReportMailingJobsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
