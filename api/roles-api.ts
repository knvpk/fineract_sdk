/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteRolesRoleIdResponse } from '../models';
// @ts-ignore
import { GetRolesResponse } from '../models';
// @ts-ignore
import { GetRolesRoleIdPermissionsResponse } from '../models';
// @ts-ignore
import { GetRolesRoleIdResponse } from '../models';
// @ts-ignore
import { PostRolesRequest } from '../models';
// @ts-ignore
import { PostRolesResponse } from '../models';
// @ts-ignore
import { PostRolesRoleIdResponse } from '../models';
// @ts-ignore
import { PutRolesRoleIdPermissionsRequest } from '../models';
// @ts-ignore
import { PutRolesRoleIdPermissionsResponse } from '../models';
// @ts-ignore
import { PutRolesRoleIdRequest } from '../models';
// @ts-ignore
import { PutRolesRoleIdResponse } from '../models';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Description : Enable role in case role is disabled. | Disable the role in case role is not associated with any users.      Example Request:   https://DomainName/api/v1/roles/{roleId}?command=enable      https://DomainName/api/v1/roles/{roleId}?command=disable
         * @summary Enable Role | Disable Role
         * @param {number} roleId roleId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionsOnRoles: async (roleId: number, command?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('actionsOnRoles', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (command !== undefined) {
                localVarQueryParameter['command'] = command;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mandatory Fields name, description
         * @summary Create a New Role
         * @param {PostRolesRequest} postRolesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (postRolesRequest: PostRolesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRolesRequest' is not null or undefined
            assertParamExists('createRole', 'postRolesRequest', postRolesRequest)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRolesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Description : Delete the role in case role is not associated with any users.
         * @summary Delete a Role
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (roleId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteRole', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  roles   roles?fields=name
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllRoles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  roles/1   roles/1?fields=name
         * @summary Retrieve a Role
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRole: async (roleId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('retrieveRole', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  roles/1/permissions
         * @summary Retrieve a Role\'s Permissions
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRolePermissions: async (roleId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('retrieveRolePermissions', 'roleId', roleId)
            const localVarPath = `/roles/{roleId}/permissions`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Role
         * @param {number} roleId roleId
         * @param {PutRolesRoleIdRequest} putRolesRoleIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (roleId: number, putRolesRoleIdRequest: PutRolesRoleIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('updateRole', 'roleId', roleId)
            // verify required parameter 'putRolesRoleIdRequest' is not null or undefined
            assertParamExists('updateRole', 'putRolesRoleIdRequest', putRolesRoleIdRequest)
            const localVarPath = `/roles/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRolesRoleIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Role\'s Permissions
         * @param {number} roleId roleId
         * @param {PutRolesRoleIdPermissionsRequest} putRolesRoleIdPermissionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRolePermissions: async (roleId: number, putRolesRoleIdPermissionsRequest: PutRolesRoleIdPermissionsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('updateRolePermissions', 'roleId', roleId)
            // verify required parameter 'putRolesRoleIdPermissionsRequest' is not null or undefined
            assertParamExists('updateRolePermissions', 'putRolesRoleIdPermissionsRequest', putRolesRoleIdPermissionsRequest)
            const localVarPath = `/roles/{roleId}/permissions`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRolesRoleIdPermissionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * Description : Enable role in case role is disabled. | Disable the role in case role is not associated with any users.      Example Request:   https://DomainName/api/v1/roles/{roleId}?command=enable      https://DomainName/api/v1/roles/{roleId}?command=disable
         * @summary Enable Role | Disable Role
         * @param {number} roleId roleId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async actionsOnRoles(roleId: number, command?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRolesRoleIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.actionsOnRoles(roleId, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mandatory Fields name, description
         * @summary Create a New Role
         * @param {PostRolesRequest} postRolesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(postRolesRequest: PostRolesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRolesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(postRolesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Description : Delete the role in case role is not associated with any users.
         * @summary Delete a Role
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(roleId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteRolesRoleIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  roles   roles?fields=name
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllRoles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRolesResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  roles/1   roles/1?fields=name
         * @summary Retrieve a Role
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveRole(roleId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRolesRoleIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRole(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  roles/1/permissions
         * @summary Retrieve a Role\'s Permissions
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveRolePermissions(roleId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRolesRoleIdPermissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRolePermissions(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Role
         * @param {number} roleId roleId
         * @param {PutRolesRoleIdRequest} putRolesRoleIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(roleId: number, putRolesRoleIdRequest: PutRolesRoleIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutRolesRoleIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(roleId, putRolesRoleIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Role\'s Permissions
         * @param {number} roleId roleId
         * @param {PutRolesRoleIdPermissionsRequest} putRolesRoleIdPermissionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRolePermissions(roleId: number, putRolesRoleIdPermissionsRequest: PutRolesRoleIdPermissionsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutRolesRoleIdPermissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRolePermissions(roleId, putRolesRoleIdPermissionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * Description : Enable role in case role is disabled. | Disable the role in case role is not associated with any users.      Example Request:   https://DomainName/api/v1/roles/{roleId}?command=enable      https://DomainName/api/v1/roles/{roleId}?command=disable
         * @summary Enable Role | Disable Role
         * @param {number} roleId roleId
         * @param {string} [command] command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionsOnRoles(roleId: number, command?: string, options?: any): AxiosPromise<PostRolesRoleIdResponse> {
            return localVarFp.actionsOnRoles(roleId, command, options).then((request) => request(axios, basePath));
        },
        /**
         * Mandatory Fields name, description
         * @summary Create a New Role
         * @param {PostRolesRequest} postRolesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(postRolesRequest: PostRolesRequest, options?: any): AxiosPromise<PostRolesResponse> {
            return localVarFp.createRole(postRolesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Description : Delete the role in case role is not associated with any users.
         * @summary Delete a Role
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(roleId: number, options?: any): AxiosPromise<DeleteRolesRoleIdResponse> {
            return localVarFp.deleteRole(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  roles   roles?fields=name
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllRoles(options?: any): AxiosPromise<Array<GetRolesResponse>> {
            return localVarFp.retrieveAllRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  roles/1   roles/1?fields=name
         * @summary Retrieve a Role
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRole(roleId: number, options?: any): AxiosPromise<GetRolesRoleIdResponse> {
            return localVarFp.retrieveRole(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  roles/1/permissions
         * @summary Retrieve a Role\'s Permissions
         * @param {number} roleId roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRolePermissions(roleId: number, options?: any): AxiosPromise<GetRolesRoleIdPermissionsResponse> {
            return localVarFp.retrieveRolePermissions(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Role
         * @param {number} roleId roleId
         * @param {PutRolesRoleIdRequest} putRolesRoleIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(roleId: number, putRolesRoleIdRequest: PutRolesRoleIdRequest, options?: any): AxiosPromise<PutRolesRoleIdResponse> {
            return localVarFp.updateRole(roleId, putRolesRoleIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Role\'s Permissions
         * @param {number} roleId roleId
         * @param {PutRolesRoleIdPermissionsRequest} putRolesRoleIdPermissionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRolePermissions(roleId: number, putRolesRoleIdPermissionsRequest: PutRolesRoleIdPermissionsRequest, options?: any): AxiosPromise<PutRolesRoleIdPermissionsResponse> {
            return localVarFp.updateRolePermissions(roleId, putRolesRoleIdPermissionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * Description : Enable role in case role is disabled. | Disable the role in case role is not associated with any users.      Example Request:   https://DomainName/api/v1/roles/{roleId}?command=enable      https://DomainName/api/v1/roles/{roleId}?command=disable
     * @summary Enable Role | Disable Role
     * @param {number} roleId roleId
     * @param {string} [command] command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public actionsOnRoles(roleId: number, command?: string, options?: any) {
        return RolesApiFp(this.configuration).actionsOnRoles(roleId, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mandatory Fields name, description
     * @summary Create a New Role
     * @param {PostRolesRequest} postRolesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public createRole(postRolesRequest: PostRolesRequest, options?: any) {
        return RolesApiFp(this.configuration).createRole(postRolesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Description : Delete the role in case role is not associated with any users.
     * @summary Delete a Role
     * @param {number} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteRole(roleId: number, options?: any) {
        return RolesApiFp(this.configuration).deleteRole(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  roles   roles?fields=name
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public retrieveAllRoles(options?: any) {
        return RolesApiFp(this.configuration).retrieveAllRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  roles/1   roles/1?fields=name
     * @summary Retrieve a Role
     * @param {number} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public retrieveRole(roleId: number, options?: any) {
        return RolesApiFp(this.configuration).retrieveRole(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  roles/1/permissions
     * @summary Retrieve a Role\'s Permissions
     * @param {number} roleId roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public retrieveRolePermissions(roleId: number, options?: any) {
        return RolesApiFp(this.configuration).retrieveRolePermissions(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Role
     * @param {number} roleId roleId
     * @param {PutRolesRoleIdRequest} putRolesRoleIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public updateRole(roleId: number, putRolesRoleIdRequest: PutRolesRoleIdRequest, options?: any) {
        return RolesApiFp(this.configuration).updateRole(roleId, putRolesRoleIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Role\'s Permissions
     * @param {number} roleId roleId
     * @param {PutRolesRoleIdPermissionsRequest} putRolesRoleIdPermissionsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public updateRolePermissions(roleId: number, putRolesRoleIdPermissionsRequest: PutRolesRoleIdPermissionsRequest, options?: any) {
        return RolesApiFp(this.configuration).updateRolePermissions(roleId, putRolesRoleIdPermissionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
