/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteRecurringDepositProductsProductIdResponse } from '../models';
// @ts-ignore
import { GetRecurringDepositProductsProductIdResponse } from '../models';
// @ts-ignore
import { GetRecurringDepositProductsResponse } from '../models';
// @ts-ignore
import { PostRecurringDepositProductsRequest } from '../models';
// @ts-ignore
import { PostRecurringDepositProductsResponse } from '../models';
// @ts-ignore
import { PutRecurringDepositProductsRequest } from '../models';
// @ts-ignore
import { PutRecurringDepositProductsResponse } from '../models';
/**
 * RecurringDepositProductApi - axios parameter creator
 * @export
 */
export const RecurringDepositProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Recurring Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, recurringDepositFrequency, recurringDepositFrequencyTypeId, accountingRule, depositAmount  Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, minDepositAmount, maxDepositAmount, withHoldTax, taxGroupId
         * @summary Create a Recurring Deposit Product
         * @param {PostRecurringDepositProductsRequest} postRecurringDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create12: async (postRecurringDepositProductsRequest: PostRecurringDepositProductsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRecurringDepositProductsRequest' is not null or undefined
            assertParamExists('create12', 'postRecurringDepositProductsRequest', postRecurringDepositProductsRequest)
            const localVarPath = `/recurringdepositproducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRecurringDepositProductsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Recurring Deposit Product
         * @summary Delete a Recurring Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete17: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('delete17', 'productId', productId)
            const localVarPath = `/recurringdepositproducts/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Recuring Deposit Products  Example Requests:  recurringdepositproducts   recurringdepositproducts?fields=name
         * @summary List Recuring Deposit Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll32: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/recurringdepositproducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Recurring Deposit Product  Example Requests:  recurringdepositproducts/1   recurringdepositproducts/1?template=true   recurringdepositproducts/1?fields=name,description
         * @summary Retrieve a Recurring Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne22: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('retrieveOne22', 'productId', productId)
            const localVarPath = `/recurringdepositproducts/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate16: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/recurringdepositproducts/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Recurring Deposit Product
         * @summary Update a Recurring Deposit Product
         * @param {number} productId productId
         * @param {PutRecurringDepositProductsRequest} putRecurringDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update18: async (productId: number, putRecurringDepositProductsRequest: PutRecurringDepositProductsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('update18', 'productId', productId)
            // verify required parameter 'putRecurringDepositProductsRequest' is not null or undefined
            assertParamExists('update18', 'putRecurringDepositProductsRequest', putRecurringDepositProductsRequest)
            const localVarPath = `/recurringdepositproducts/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRecurringDepositProductsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecurringDepositProductApi - functional programming interface
 * @export
 */
export const RecurringDepositProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecurringDepositProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Recurring Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, recurringDepositFrequency, recurringDepositFrequencyTypeId, accountingRule, depositAmount  Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, minDepositAmount, maxDepositAmount, withHoldTax, taxGroupId
         * @summary Create a Recurring Deposit Product
         * @param {PostRecurringDepositProductsRequest} postRecurringDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create12(postRecurringDepositProductsRequest: PostRecurringDepositProductsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRecurringDepositProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create12(postRecurringDepositProductsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Recurring Deposit Product
         * @summary Delete a Recurring Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete17(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteRecurringDepositProductsProductIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete17(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists Recuring Deposit Products  Example Requests:  recurringdepositproducts   recurringdepositproducts?fields=name
         * @summary List Recuring Deposit Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll32(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRecurringDepositProductsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll32(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Recurring Deposit Product  Example Requests:  recurringdepositproducts/1   recurringdepositproducts/1?template=true   recurringdepositproducts/1?fields=name,description
         * @summary Retrieve a Recurring Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne22(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRecurringDepositProductsProductIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne22(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTemplate16(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTemplate16(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Recurring Deposit Product
         * @summary Update a Recurring Deposit Product
         * @param {number} productId productId
         * @param {PutRecurringDepositProductsRequest} putRecurringDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update18(productId: number, putRecurringDepositProductsRequest: PutRecurringDepositProductsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutRecurringDepositProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update18(productId, putRecurringDepositProductsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecurringDepositProductApi - factory interface
 * @export
 */
export const RecurringDepositProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecurringDepositProductApiFp(configuration)
    return {
        /**
         * Creates a Recurring Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, recurringDepositFrequency, recurringDepositFrequencyTypeId, accountingRule, depositAmount  Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, minDepositAmount, maxDepositAmount, withHoldTax, taxGroupId
         * @summary Create a Recurring Deposit Product
         * @param {PostRecurringDepositProductsRequest} postRecurringDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create12(postRecurringDepositProductsRequest: PostRecurringDepositProductsRequest, options?: any): AxiosPromise<PostRecurringDepositProductsResponse> {
            return localVarFp.create12(postRecurringDepositProductsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Recurring Deposit Product
         * @summary Delete a Recurring Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete17(productId: number, options?: any): AxiosPromise<DeleteRecurringDepositProductsProductIdResponse> {
            return localVarFp.delete17(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Recuring Deposit Products  Example Requests:  recurringdepositproducts   recurringdepositproducts?fields=name
         * @summary List Recuring Deposit Products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll32(options?: any): AxiosPromise<Array<GetRecurringDepositProductsResponse>> {
            return localVarFp.retrieveAll32(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Recurring Deposit Product  Example Requests:  recurringdepositproducts/1   recurringdepositproducts/1?template=true   recurringdepositproducts/1?fields=name,description
         * @summary Retrieve a Recurring Deposit Product
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne22(productId: number, options?: any): AxiosPromise<GetRecurringDepositProductsProductIdResponse> {
            return localVarFp.retrieveOne22(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate16(options?: any): AxiosPromise<string> {
            return localVarFp.retrieveTemplate16(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Recurring Deposit Product
         * @summary Update a Recurring Deposit Product
         * @param {number} productId productId
         * @param {PutRecurringDepositProductsRequest} putRecurringDepositProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update18(productId: number, putRecurringDepositProductsRequest: PutRecurringDepositProductsRequest, options?: any): AxiosPromise<PutRecurringDepositProductsResponse> {
            return localVarFp.update18(productId, putRecurringDepositProductsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecurringDepositProductApi - object-oriented interface
 * @export
 * @class RecurringDepositProductApi
 * @extends {BaseAPI}
 */
export class RecurringDepositProductApi extends BaseAPI {
    /**
     * Creates a Recurring Deposit Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, interestCompoundingPeriodType, interestCalculationType, interestCalculationDaysInYearType, minDepositTerm, minDepositTermTypeId, recurringDepositFrequency, recurringDepositFrequencyTypeId, accountingRule, depositAmount  Mandatory Fields for Cash based accounting (accountingRule = 2): savingsReferenceAccountId, savingsControlAccountId, interestOnSavingsAccountId, incomeFromFeeAccountId, transfersInSuspenseAccountId, incomeFromPenaltyAccountId  Optional Fields: lockinPeriodFrequency, lockinPeriodFrequencyType, maxDepositTerm, maxDepositTermTypeId, inMultiplesOfDepositTerm, inMultiplesOfDepositTermTypeId, preClosurePenalApplicable, preClosurePenalInterest, preClosurePenalInterestOnTypeId, feeToIncomeAccountMappings, penaltyToIncomeAccountMappings, charges, charts, minDepositAmount, maxDepositAmount, withHoldTax, taxGroupId
     * @summary Create a Recurring Deposit Product
     * @param {PostRecurringDepositProductsRequest} postRecurringDepositProductsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringDepositProductApi
     */
    public create12(postRecurringDepositProductsRequest: PostRecurringDepositProductsRequest, options?: any) {
        return RecurringDepositProductApiFp(this.configuration).create12(postRecurringDepositProductsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Recurring Deposit Product
     * @summary Delete a Recurring Deposit Product
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringDepositProductApi
     */
    public delete17(productId: number, options?: any) {
        return RecurringDepositProductApiFp(this.configuration).delete17(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists Recuring Deposit Products  Example Requests:  recurringdepositproducts   recurringdepositproducts?fields=name
     * @summary List Recuring Deposit Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringDepositProductApi
     */
    public retrieveAll32(options?: any) {
        return RecurringDepositProductApiFp(this.configuration).retrieveAll32(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Recurring Deposit Product  Example Requests:  recurringdepositproducts/1   recurringdepositproducts/1?template=true   recurringdepositproducts/1?fields=name,description
     * @summary Retrieve a Recurring Deposit Product
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringDepositProductApi
     */
    public retrieveOne22(productId: number, options?: any) {
        return RecurringDepositProductApiFp(this.configuration).retrieveOne22(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringDepositProductApi
     */
    public retrieveTemplate16(options?: any) {
        return RecurringDepositProductApiFp(this.configuration).retrieveTemplate16(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Recurring Deposit Product
     * @summary Update a Recurring Deposit Product
     * @param {number} productId productId
     * @param {PutRecurringDepositProductsRequest} putRecurringDepositProductsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringDepositProductApi
     */
    public update18(productId: number, putRecurringDepositProductsRequest: PutRecurringDepositProductsRequest, options?: any) {
        return RecurringDepositProductApiFp(this.configuration).update18(productId, putRecurringDepositProductsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
