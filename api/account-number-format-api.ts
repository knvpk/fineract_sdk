/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteAccountNumberFormatsResponse } from '../models';
// @ts-ignore
import { GetAccountNumberFormatsIdResponse } from '../models';
// @ts-ignore
import { GetAccountNumberFormatsResponseTemplate } from '../models';
// @ts-ignore
import { PostAccountNumberFormatsRequest } from '../models';
// @ts-ignore
import { PostAccountNumberFormatsResponse } from '../models';
// @ts-ignore
import { PutAccountNumberFormatsRequest } from '../models';
// @ts-ignore
import { PutAccountNumberFormatsResponse } from '../models';
/**
 * AccountNumberFormatApi - axios parameter creator
 * @export
 */
export const AccountNumberFormatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Note: Account numbers created while this format was active would remain unchanged.
         * @summary Delete an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (accountNumberFormatId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountNumberFormatId' is not null or undefined
            assertParamExists('_delete', 'accountNumberFormatId', accountNumberFormatId)
            const localVarPath = `/accountnumberformats/{accountNumberFormatId}`
                .replace(`{${"accountNumberFormatId"}}`, encodeURIComponent(String(accountNumberFormatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: You may associate a single Account number format for a given account type Mandatory Fields for Account number formats accountType
         * @summary Create an Account number format
         * @param {PostAccountNumberFormatsRequest} [postAccountNumberFormatsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (postAccountNumberFormatsRequest?: PostAccountNumberFormatsRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accountnumberformats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAccountNumberFormatsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  accountnumberformats   accountnumberformats?fields=accountType,prefixType
         * @summary List Account number formats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll3: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accountnumberformats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests:  accountnumberformats/1   accountnumberformats/1?template=true   accountnumberformats/1?fields=accountType,prefixType
         * @summary Retrieve an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne: async (accountNumberFormatId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountNumberFormatId' is not null or undefined
            assertParamExists('retrieveOne', 'accountNumberFormatId', accountNumberFormatId)
            const localVarPath = `/accountnumberformats/{accountNumberFormatId}`
                .replace(`{${"accountNumberFormatId"}}`, encodeURIComponent(String(accountNumberFormatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Request:  accountnumberformats/template
         * @summary Retrieve Account number format Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accountnumberformats/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {PutAccountNumberFormatsRequest} putAccountNumberFormatsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (accountNumberFormatId: number, putAccountNumberFormatsRequest: PutAccountNumberFormatsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountNumberFormatId' is not null or undefined
            assertParamExists('update1', 'accountNumberFormatId', accountNumberFormatId)
            // verify required parameter 'putAccountNumberFormatsRequest' is not null or undefined
            assertParamExists('update1', 'putAccountNumberFormatsRequest', putAccountNumberFormatsRequest)
            const localVarPath = `/accountnumberformats/{accountNumberFormatId}`
                .replace(`{${"accountNumberFormatId"}}`, encodeURIComponent(String(accountNumberFormatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putAccountNumberFormatsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountNumberFormatApi - functional programming interface
 * @export
 */
export const AccountNumberFormatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountNumberFormatApiAxiosParamCreator(configuration)
    return {
        /**
         * Note: Account numbers created while this format was active would remain unchanged.
         * @summary Delete an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(accountNumberFormatId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAccountNumberFormatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(accountNumberFormatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: You may associate a single Account number format for a given account type Mandatory Fields for Account number formats accountType
         * @summary Create an Account number format
         * @param {PostAccountNumberFormatsRequest} [postAccountNumberFormatsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(postAccountNumberFormatsRequest?: PostAccountNumberFormatsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAccountNumberFormatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(postAccountNumberFormatsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  accountnumberformats   accountnumberformats?fields=accountType,prefixType
         * @summary List Account number formats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAccountNumberFormatsIdResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll3(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests:  accountnumberformats/1   accountnumberformats/1?template=true   accountnumberformats/1?fields=accountType,prefixType
         * @summary Retrieve an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne(accountNumberFormatId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountNumberFormatsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne(accountNumberFormatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Request:  accountnumberformats/template
         * @summary Retrieve Account number format Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTemplate2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountNumberFormatsResponseTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTemplate2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {PutAccountNumberFormatsRequest} putAccountNumberFormatsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(accountNumberFormatId: number, putAccountNumberFormatsRequest: PutAccountNumberFormatsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutAccountNumberFormatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(accountNumberFormatId, putAccountNumberFormatsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountNumberFormatApi - factory interface
 * @export
 */
export const AccountNumberFormatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountNumberFormatApiFp(configuration)
    return {
        /**
         * Note: Account numbers created while this format was active would remain unchanged.
         * @summary Delete an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(accountNumberFormatId: number, options?: any): AxiosPromise<DeleteAccountNumberFormatsResponse> {
            return localVarFp._delete(accountNumberFormatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: You may associate a single Account number format for a given account type Mandatory Fields for Account number formats accountType
         * @summary Create an Account number format
         * @param {PostAccountNumberFormatsRequest} [postAccountNumberFormatsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(postAccountNumberFormatsRequest?: PostAccountNumberFormatsRequest, options?: any): AxiosPromise<PostAccountNumberFormatsResponse> {
            return localVarFp.create(postAccountNumberFormatsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  accountnumberformats   accountnumberformats?fields=accountType,prefixType
         * @summary List Account number formats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll3(options?: any): AxiosPromise<Array<GetAccountNumberFormatsIdResponse>> {
            return localVarFp.retrieveAll3(options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests:  accountnumberformats/1   accountnumberformats/1?template=true   accountnumberformats/1?fields=accountType,prefixType
         * @summary Retrieve an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne(accountNumberFormatId: number, options?: any): AxiosPromise<GetAccountNumberFormatsIdResponse> {
            return localVarFp.retrieveOne(accountNumberFormatId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Request:  accountnumberformats/template
         * @summary Retrieve Account number format Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplate2(options?: any): AxiosPromise<GetAccountNumberFormatsResponseTemplate> {
            return localVarFp.retrieveTemplate2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an Account number format
         * @param {number} accountNumberFormatId accountNumberFormatId
         * @param {PutAccountNumberFormatsRequest} putAccountNumberFormatsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(accountNumberFormatId: number, putAccountNumberFormatsRequest: PutAccountNumberFormatsRequest, options?: any): AxiosPromise<PutAccountNumberFormatsResponse> {
            return localVarFp.update1(accountNumberFormatId, putAccountNumberFormatsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountNumberFormatApi - object-oriented interface
 * @export
 * @class AccountNumberFormatApi
 * @extends {BaseAPI}
 */
export class AccountNumberFormatApi extends BaseAPI {
    /**
     * Note: Account numbers created while this format was active would remain unchanged.
     * @summary Delete an Account number format
     * @param {number} accountNumberFormatId accountNumberFormatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountNumberFormatApi
     */
    public _delete(accountNumberFormatId: number, options?: any) {
        return AccountNumberFormatApiFp(this.configuration)._delete(accountNumberFormatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: You may associate a single Account number format for a given account type Mandatory Fields for Account number formats accountType
     * @summary Create an Account number format
     * @param {PostAccountNumberFormatsRequest} [postAccountNumberFormatsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountNumberFormatApi
     */
    public create(postAccountNumberFormatsRequest?: PostAccountNumberFormatsRequest, options?: any) {
        return AccountNumberFormatApiFp(this.configuration).create(postAccountNumberFormatsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  accountnumberformats   accountnumberformats?fields=accountType,prefixType
     * @summary List Account number formats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountNumberFormatApi
     */
    public retrieveAll3(options?: any) {
        return AccountNumberFormatApiFp(this.configuration).retrieveAll3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests:  accountnumberformats/1   accountnumberformats/1?template=true   accountnumberformats/1?fields=accountType,prefixType
     * @summary Retrieve an Account number format
     * @param {number} accountNumberFormatId accountNumberFormatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountNumberFormatApi
     */
    public retrieveOne(accountNumberFormatId: number, options?: any) {
        return AccountNumberFormatApiFp(this.configuration).retrieveOne(accountNumberFormatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Request:  accountnumberformats/template
     * @summary Retrieve Account number format Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountNumberFormatApi
     */
    public retrieveTemplate2(options?: any) {
        return AccountNumberFormatApiFp(this.configuration).retrieveTemplate2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an Account number format
     * @param {number} accountNumberFormatId accountNumberFormatId
     * @param {PutAccountNumberFormatsRequest} putAccountNumberFormatsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountNumberFormatApi
     */
    public update1(accountNumberFormatId: number, putAccountNumberFormatsRequest: PutAccountNumberFormatsRequest, options?: any) {
        return AccountNumberFormatApiFp(this.configuration).update1(accountNumberFormatId, putAccountNumberFormatsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
