/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteClientsClientIdIdentifiersIdentifierIdResponse } from '../models';
// @ts-ignore
import { GetClientsClientIdIdentifiersResponse } from '../models';
// @ts-ignore
import { GetClientsClientIdIdentifiersTemplateResponse } from '../models';
// @ts-ignore
import { PostClientsClientIdIdentifiersRequest } from '../models';
// @ts-ignore
import { PostClientsClientIdIdentifiersResponse } from '../models';
// @ts-ignore
import { PutClientsClientIdIdentifiersIdentifierIdRequest } from '../models';
// @ts-ignore
import { PutClientsClientIdIdentifiersIdentifierIdResponse } from '../models';
/**
 * ClientIdentifierApi - axios parameter creator
 * @export
 */
export const ClientIdentifierApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mandatory Fields documentKey, documentTypeId 
         * @summary Create an Identifier for a Client
         * @param {number} clientId clientId
         * @param {PostClientsClientIdIdentifiersRequest} postClientsClientIdIdentifiersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClientIdentifier: async (clientId: number, postClientsClientIdIdentifiersRequest: PostClientsClientIdIdentifiersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('createClientIdentifier', 'clientId', clientId)
            // verify required parameter 'postClientsClientIdIdentifiersRequest' is not null or undefined
            assertParamExists('createClientIdentifier', 'postClientsClientIdIdentifiersRequest', postClientsClientIdIdentifiersRequest)
            const localVarPath = `/clients/{clientId}/identifiers`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postClientsClientIdIdentifiersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Client Identifier
         * @summary Delete a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientIdentifier: async (clientId: number, identifierId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('deleteClientIdentifier', 'clientId', clientId)
            // verify required parameter 'identifierId' is not null or undefined
            assertParamExists('deleteClientIdentifier', 'identifierId', identifierId)
            const localVarPath = `/clients/{clientId}/identifiers/{identifierId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"identifierId"}}`, encodeURIComponent(String(identifierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource useful for building maintenance user interface screens for client applications. The template data returned consists of any or all of:   Field Defaults  Allowed description Lists   Example Request: clients/1/identifiers/template
         * @summary Retrieve Client Identifier Details Template
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newClientIdentifierDetails: async (clientId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('newClientIdentifierDetails', 'clientId', clientId)
            const localVarPath = `/clients/{clientId}/identifiers/template`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests: clients/1/identifiers   clients/1/identifiers?fields=documentKey,documentType,description
         * @summary List all Identifiers for a Client
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClientIdentifiers: async (clientId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveAllClientIdentifiers', 'clientId', clientId)
            const localVarPath = `/clients/{clientId}/identifiers`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Example Requests: clients/1/identifier/2   clients/1/identifier/2?template=true  clients/1/identifiers/2?fields=documentKey,documentType,description
         * @summary Retrieve a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveClientIdentifiers: async (clientId: number, identifierId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('retrieveClientIdentifiers', 'clientId', clientId)
            // verify required parameter 'identifierId' is not null or undefined
            assertParamExists('retrieveClientIdentifiers', 'identifierId', identifierId)
            const localVarPath = `/clients/{clientId}/identifiers/{identifierId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"identifierId"}}`, encodeURIComponent(String(identifierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Client Identifier
         * @summary Update a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {PutClientsClientIdIdentifiersIdentifierIdRequest} putClientsClientIdIdentifiersIdentifierIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientIdentifer: async (clientId: number, identifierId: number, putClientsClientIdIdentifiersIdentifierIdRequest: PutClientsClientIdIdentifiersIdentifierIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('updateClientIdentifer', 'clientId', clientId)
            // verify required parameter 'identifierId' is not null or undefined
            assertParamExists('updateClientIdentifer', 'identifierId', identifierId)
            // verify required parameter 'putClientsClientIdIdentifiersIdentifierIdRequest' is not null or undefined
            assertParamExists('updateClientIdentifer', 'putClientsClientIdIdentifiersIdentifierIdRequest', putClientsClientIdIdentifiersIdentifierIdRequest)
            const localVarPath = `/clients/{clientId}/identifiers/{identifierId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"identifierId"}}`, encodeURIComponent(String(identifierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putClientsClientIdIdentifiersIdentifierIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientIdentifierApi - functional programming interface
 * @export
 */
export const ClientIdentifierApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientIdentifierApiAxiosParamCreator(configuration)
    return {
        /**
         * Mandatory Fields documentKey, documentTypeId 
         * @summary Create an Identifier for a Client
         * @param {number} clientId clientId
         * @param {PostClientsClientIdIdentifiersRequest} postClientsClientIdIdentifiersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClientIdentifier(clientId: number, postClientsClientIdIdentifiersRequest: PostClientsClientIdIdentifiersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostClientsClientIdIdentifiersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClientIdentifier(clientId, postClientsClientIdIdentifiersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Client Identifier
         * @summary Delete a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientIdentifier(clientId: number, identifierId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteClientsClientIdIdentifiersIdentifierIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientIdentifier(clientId, identifierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource useful for building maintenance user interface screens for client applications. The template data returned consists of any or all of:   Field Defaults  Allowed description Lists   Example Request: clients/1/identifiers/template
         * @summary Retrieve Client Identifier Details Template
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newClientIdentifierDetails(clientId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientsClientIdIdentifiersTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newClientIdentifierDetails(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests: clients/1/identifiers   clients/1/identifiers?fields=documentKey,documentType,description
         * @summary List all Identifiers for a Client
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAllClientIdentifiers(clientId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetClientsClientIdIdentifiersResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAllClientIdentifiers(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Example Requests: clients/1/identifier/2   clients/1/identifier/2?template=true  clients/1/identifiers/2?fields=documentKey,documentType,description
         * @summary Retrieve a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveClientIdentifiers(clientId: number, identifierId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientsClientIdIdentifiersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveClientIdentifiers(clientId, identifierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Client Identifier
         * @summary Update a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {PutClientsClientIdIdentifiersIdentifierIdRequest} putClientsClientIdIdentifiersIdentifierIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientIdentifer(clientId: number, identifierId: number, putClientsClientIdIdentifiersIdentifierIdRequest: PutClientsClientIdIdentifiersIdentifierIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutClientsClientIdIdentifiersIdentifierIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientIdentifer(clientId, identifierId, putClientsClientIdIdentifiersIdentifierIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientIdentifierApi - factory interface
 * @export
 */
export const ClientIdentifierApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientIdentifierApiFp(configuration)
    return {
        /**
         * Mandatory Fields documentKey, documentTypeId 
         * @summary Create an Identifier for a Client
         * @param {number} clientId clientId
         * @param {PostClientsClientIdIdentifiersRequest} postClientsClientIdIdentifiersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClientIdentifier(clientId: number, postClientsClientIdIdentifiersRequest: PostClientsClientIdIdentifiersRequest, options?: any): AxiosPromise<PostClientsClientIdIdentifiersResponse> {
            return localVarFp.createClientIdentifier(clientId, postClientsClientIdIdentifiersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Client Identifier
         * @summary Delete a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientIdentifier(clientId: number, identifierId: number, options?: any): AxiosPromise<DeleteClientsClientIdIdentifiersIdentifierIdResponse> {
            return localVarFp.deleteClientIdentifier(clientId, identifierId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource useful for building maintenance user interface screens for client applications. The template data returned consists of any or all of:   Field Defaults  Allowed description Lists   Example Request: clients/1/identifiers/template
         * @summary Retrieve Client Identifier Details Template
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newClientIdentifierDetails(clientId: number, options?: any): AxiosPromise<GetClientsClientIdIdentifiersTemplateResponse> {
            return localVarFp.newClientIdentifierDetails(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests: clients/1/identifiers   clients/1/identifiers?fields=documentKey,documentType,description
         * @summary List all Identifiers for a Client
         * @param {number} clientId clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAllClientIdentifiers(clientId: number, options?: any): AxiosPromise<Array<GetClientsClientIdIdentifiersResponse>> {
            return localVarFp.retrieveAllClientIdentifiers(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Example Requests: clients/1/identifier/2   clients/1/identifier/2?template=true  clients/1/identifiers/2?fields=documentKey,documentType,description
         * @summary Retrieve a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveClientIdentifiers(clientId: number, identifierId: number, options?: any): AxiosPromise<GetClientsClientIdIdentifiersResponse> {
            return localVarFp.retrieveClientIdentifiers(clientId, identifierId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Client Identifier
         * @summary Update a Client Identifier
         * @param {number} clientId clientId
         * @param {number} identifierId identifierId
         * @param {PutClientsClientIdIdentifiersIdentifierIdRequest} putClientsClientIdIdentifiersIdentifierIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientIdentifer(clientId: number, identifierId: number, putClientsClientIdIdentifiersIdentifierIdRequest: PutClientsClientIdIdentifiersIdentifierIdRequest, options?: any): AxiosPromise<PutClientsClientIdIdentifiersIdentifierIdResponse> {
            return localVarFp.updateClientIdentifer(clientId, identifierId, putClientsClientIdIdentifiersIdentifierIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientIdentifierApi - object-oriented interface
 * @export
 * @class ClientIdentifierApi
 * @extends {BaseAPI}
 */
export class ClientIdentifierApi extends BaseAPI {
    /**
     * Mandatory Fields documentKey, documentTypeId 
     * @summary Create an Identifier for a Client
     * @param {number} clientId clientId
     * @param {PostClientsClientIdIdentifiersRequest} postClientsClientIdIdentifiersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientIdentifierApi
     */
    public createClientIdentifier(clientId: number, postClientsClientIdIdentifiersRequest: PostClientsClientIdIdentifiersRequest, options?: any) {
        return ClientIdentifierApiFp(this.configuration).createClientIdentifier(clientId, postClientsClientIdIdentifiersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Client Identifier
     * @summary Delete a Client Identifier
     * @param {number} clientId clientId
     * @param {number} identifierId identifierId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientIdentifierApi
     */
    public deleteClientIdentifier(clientId: number, identifierId: number, options?: any) {
        return ClientIdentifierApiFp(this.configuration).deleteClientIdentifier(clientId, identifierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource useful for building maintenance user interface screens for client applications. The template data returned consists of any or all of:   Field Defaults  Allowed description Lists   Example Request: clients/1/identifiers/template
     * @summary Retrieve Client Identifier Details Template
     * @param {number} clientId clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientIdentifierApi
     */
    public newClientIdentifierDetails(clientId: number, options?: any) {
        return ClientIdentifierApiFp(this.configuration).newClientIdentifierDetails(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests: clients/1/identifiers   clients/1/identifiers?fields=documentKey,documentType,description
     * @summary List all Identifiers for a Client
     * @param {number} clientId clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientIdentifierApi
     */
    public retrieveAllClientIdentifiers(clientId: number, options?: any) {
        return ClientIdentifierApiFp(this.configuration).retrieveAllClientIdentifiers(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Example Requests: clients/1/identifier/2   clients/1/identifier/2?template=true  clients/1/identifiers/2?fields=documentKey,documentType,description
     * @summary Retrieve a Client Identifier
     * @param {number} clientId clientId
     * @param {number} identifierId identifierId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientIdentifierApi
     */
    public retrieveClientIdentifiers(clientId: number, identifierId: number, options?: any) {
        return ClientIdentifierApiFp(this.configuration).retrieveClientIdentifiers(clientId, identifierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Client Identifier
     * @summary Update a Client Identifier
     * @param {number} clientId clientId
     * @param {number} identifierId identifierId
     * @param {PutClientsClientIdIdentifiersIdentifierIdRequest} putClientsClientIdIdentifiersIdentifierIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientIdentifierApi
     */
    public updateClientIdentifer(clientId: number, identifierId: number, putClientsClientIdIdentifiersIdentifierIdRequest: PutClientsClientIdIdentifiersIdentifierIdRequest, options?: any) {
        return ClientIdentifierApiFp(this.configuration).updateClientIdentifer(clientId, identifierId, putClientsClientIdIdentifiersIdentifierIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
