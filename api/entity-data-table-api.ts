/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteEntityDatatableChecksTemplateResponse } from '../models';
// @ts-ignore
import { GetEntityDatatableChecksResponse } from '../models';
// @ts-ignore
import { GetEntityDatatableChecksTemplateResponse } from '../models';
// @ts-ignore
import { PostEntityDatatableChecksTemplateRequest } from '../models';
// @ts-ignore
import { PostEntityDatatableChecksTemplateResponse } from '../models';
/**
 * EntityDataTableApi - axios parameter creator
 * @export
 */
export const EntityDataTableApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mandatory Fields :  entity, status, datatableName  Non-Mandatory Fields :  productId
         * @summary Create Entity-Datatable Checks
         * @param {PostEntityDatatableChecksTemplateRequest} postEntityDatatableChecksTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDatatableCheck: async (postEntityDatatableChecksTemplateRequest: PostEntityDatatableChecksTemplateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postEntityDatatableChecksTemplateRequest' is not null or undefined
            assertParamExists('createEntityDatatableCheck', 'postEntityDatatableChecksTemplateRequest', postEntityDatatableChecksTemplateRequest)
            const localVarPath = `/entityDatatableChecks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postEntityDatatableChecksTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing Entity-Datatable Check
         * @summary Delete Entity-Datatable Checks
         * @param {number} entityDatatableCheckId entityDatatableCheckId
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatatable1: async (entityDatatableCheckId: number, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityDatatableCheckId' is not null or undefined
            assertParamExists('deleteDatatable1', 'entityDatatableCheckId', entityDatatableCheckId)
            const localVarPath = `/entityDatatableChecks/{entityDatatableCheckId}`
                .replace(`{${"entityDatatableCheckId"}}`, encodeURIComponent(String(entityDatatableCheckId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a convenience resource useful for building maintenance user interface screens for Entity-Datatable Checks applications. The template data returned consists of:  Allowed description Lists Example Request:  entityDatatableChecks/template
         * @summary Retrieve Entity-Datatable Checks Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/entityDatatableChecks/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The list capability of Entity-Datatable Checks can support pagination.  OPTIONAL ARGUMENTS offset Integer optional, defaults to 0 Indicates the result from which pagination startslimit Integer optional, defaults to 200 Restricts the size of results returned. To override the default and return all entries you must explicitly pass a non-positive integer value for limit e.g. limit=0, or limit=-1 Example Request:  entityDatatableChecks?offset=0&limit=15
         * @summary List Entity-Datatable Checks
         * @param {number} [status] status
         * @param {string} [entity] entity
         * @param {number} [productId] productId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll6: async (status?: number, entity?: string, productId?: number, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/entityDatatableChecks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (entity !== undefined) {
                localVarQueryParameter['entity'] = entity;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntityDataTableApi - functional programming interface
 * @export
 */
export const EntityDataTableApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntityDataTableApiAxiosParamCreator(configuration)
    return {
        /**
         * Mandatory Fields :  entity, status, datatableName  Non-Mandatory Fields :  productId
         * @summary Create Entity-Datatable Checks
         * @param {PostEntityDatatableChecksTemplateRequest} postEntityDatatableChecksTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityDatatableCheck(postEntityDatatableChecksTemplateRequest: PostEntityDatatableChecksTemplateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostEntityDatatableChecksTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityDatatableCheck(postEntityDatatableChecksTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an existing Entity-Datatable Check
         * @summary Delete Entity-Datatable Checks
         * @param {number} entityDatatableCheckId entityDatatableCheckId
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatatable1(entityDatatableCheckId: number, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteEntityDatatableChecksTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDatatable1(entityDatatableCheckId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a convenience resource useful for building maintenance user interface screens for Entity-Datatable Checks applications. The template data returned consists of:  Allowed description Lists Example Request:  entityDatatableChecks/template
         * @summary Retrieve Entity-Datatable Checks Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplate(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEntityDatatableChecksTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The list capability of Entity-Datatable Checks can support pagination.  OPTIONAL ARGUMENTS offset Integer optional, defaults to 0 Indicates the result from which pagination startslimit Integer optional, defaults to 200 Restricts the size of results returned. To override the default and return all entries you must explicitly pass a non-positive integer value for limit e.g. limit=0, or limit=-1 Example Request:  entityDatatableChecks?offset=0&limit=15
         * @summary List Entity-Datatable Checks
         * @param {number} [status] status
         * @param {string} [entity] entity
         * @param {number} [productId] productId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll6(status?: number, entity?: string, productId?: number, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetEntityDatatableChecksResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll6(status, entity, productId, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EntityDataTableApi - factory interface
 * @export
 */
export const EntityDataTableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntityDataTableApiFp(configuration)
    return {
        /**
         * Mandatory Fields :  entity, status, datatableName  Non-Mandatory Fields :  productId
         * @summary Create Entity-Datatable Checks
         * @param {PostEntityDatatableChecksTemplateRequest} postEntityDatatableChecksTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDatatableCheck(postEntityDatatableChecksTemplateRequest: PostEntityDatatableChecksTemplateRequest, options?: any): AxiosPromise<PostEntityDatatableChecksTemplateResponse> {
            return localVarFp.createEntityDatatableCheck(postEntityDatatableChecksTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing Entity-Datatable Check
         * @summary Delete Entity-Datatable Checks
         * @param {number} entityDatatableCheckId entityDatatableCheckId
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatatable1(entityDatatableCheckId: number, body?: string, options?: any): AxiosPromise<DeleteEntityDatatableChecksTemplateResponse> {
            return localVarFp.deleteDatatable1(entityDatatableCheckId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a convenience resource useful for building maintenance user interface screens for Entity-Datatable Checks applications. The template data returned consists of:  Allowed description Lists Example Request:  entityDatatableChecks/template
         * @summary Retrieve Entity-Datatable Checks Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate(options?: any): AxiosPromise<GetEntityDatatableChecksTemplateResponse> {
            return localVarFp.getTemplate(options).then((request) => request(axios, basePath));
        },
        /**
         * The list capability of Entity-Datatable Checks can support pagination.  OPTIONAL ARGUMENTS offset Integer optional, defaults to 0 Indicates the result from which pagination startslimit Integer optional, defaults to 200 Restricts the size of results returned. To override the default and return all entries you must explicitly pass a non-positive integer value for limit e.g. limit=0, or limit=-1 Example Request:  entityDatatableChecks?offset=0&limit=15
         * @summary List Entity-Datatable Checks
         * @param {number} [status] status
         * @param {string} [entity] entity
         * @param {number} [productId] productId
         * @param {number} [offset] offset
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll6(status?: number, entity?: string, productId?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Array<GetEntityDatatableChecksResponse>> {
            return localVarFp.retrieveAll6(status, entity, productId, offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EntityDataTableApi - object-oriented interface
 * @export
 * @class EntityDataTableApi
 * @extends {BaseAPI}
 */
export class EntityDataTableApi extends BaseAPI {
    /**
     * Mandatory Fields :  entity, status, datatableName  Non-Mandatory Fields :  productId
     * @summary Create Entity-Datatable Checks
     * @param {PostEntityDatatableChecksTemplateRequest} postEntityDatatableChecksTemplateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityDataTableApi
     */
    public createEntityDatatableCheck(postEntityDatatableChecksTemplateRequest: PostEntityDatatableChecksTemplateRequest, options?: any) {
        return EntityDataTableApiFp(this.configuration).createEntityDatatableCheck(postEntityDatatableChecksTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing Entity-Datatable Check
     * @summary Delete Entity-Datatable Checks
     * @param {number} entityDatatableCheckId entityDatatableCheckId
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityDataTableApi
     */
    public deleteDatatable1(entityDatatableCheckId: number, body?: string, options?: any) {
        return EntityDataTableApiFp(this.configuration).deleteDatatable1(entityDatatableCheckId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a convenience resource useful for building maintenance user interface screens for Entity-Datatable Checks applications. The template data returned consists of:  Allowed description Lists Example Request:  entityDatatableChecks/template
     * @summary Retrieve Entity-Datatable Checks Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityDataTableApi
     */
    public getTemplate(options?: any) {
        return EntityDataTableApiFp(this.configuration).getTemplate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The list capability of Entity-Datatable Checks can support pagination.  OPTIONAL ARGUMENTS offset Integer optional, defaults to 0 Indicates the result from which pagination startslimit Integer optional, defaults to 200 Restricts the size of results returned. To override the default and return all entries you must explicitly pass a non-positive integer value for limit e.g. limit=0, or limit=-1 Example Request:  entityDatatableChecks?offset=0&limit=15
     * @summary List Entity-Datatable Checks
     * @param {number} [status] status
     * @param {string} [entity] entity
     * @param {number} [productId] productId
     * @param {number} [offset] offset
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityDataTableApi
     */
    public retrieveAll6(status?: number, entity?: string, productId?: number, offset?: number, limit?: number, options?: any) {
        return EntityDataTableApiFp(this.configuration).retrieveAll6(status, entity, productId, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
