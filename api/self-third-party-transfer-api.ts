/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteSelfBeneficiariesTPTBeneficiaryIdResponse } from '../models';
// @ts-ignore
import { GetSelfBeneficiariesTPTResponse } from '../models';
// @ts-ignore
import { GetSelfBeneficiariesTPTTemplateResponse } from '../models';
// @ts-ignore
import { PostSelfBeneficiariesTPTRequest } from '../models';
// @ts-ignore
import { PostSelfBeneficiariesTPTResponse } from '../models';
// @ts-ignore
import { PutSelfBeneficiariesTPTBeneficiaryIdRequest } from '../models';
// @ts-ignore
import { PutSelfBeneficiariesTPTBeneficiaryIdResponse } from '../models';
/**
 * SelfThirdPartyTransferApi - axios parameter creator
 * @export
 */
export const SelfThirdPartyTransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Api to add third party beneficiary linked to current user.  Parameter Definitions  name : Nick name for beneficiary, should be unique for an self service user  officeName : Office Name of beneficiary(not id)  accountNumber : Account Number of beneficiary(not id)  transferLimit : Each transfer initiated to this account will not exceed this amount  Example Requests:  /self/beneficiaries/tpt  Mandatory Fields: name, officeName, accountNumber, accountType  Optional Fields: transferLimit
         * @summary Add TPT Beneficiary
         * @param {PostSelfBeneficiariesTPTRequest} postSelfBeneficiariesTPTRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (postSelfBeneficiariesTPTRequest: PostSelfBeneficiariesTPTRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postSelfBeneficiariesTPTRequest' is not null or undefined
            assertParamExists('add', 'postSelfBeneficiariesTPTRequest', postSelfBeneficiariesTPTRequest)
            const localVarPath = `/self/beneficiaries/tpt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSelfBeneficiariesTPTRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api to delete third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}
         * @summary Delete TPT Beneficiary
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete20: async (beneficiaryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('delete20', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/self/beneficiaries/tpt/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api to get all third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt
         * @summary Get All TPT Beneficiary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll35: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/self/beneficiaries/tpt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns Account Type enumerations. Self User is expected to know office name and account number to be able to add beneficiary.  Example Requests:  /self/beneficiaries/tpt/template
         * @summary Beneficiary Third Party Transfer Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template16: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/self/beneficiaries/tpt/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Api to update third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  Optional Fields: name, transferLimit
         * @summary Update TPT Beneficiary
         * @param {number} beneficiaryId beneficiaryId
         * @param {PutSelfBeneficiariesTPTBeneficiaryIdRequest} putSelfBeneficiariesTPTBeneficiaryIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update21: async (beneficiaryId: number, putSelfBeneficiariesTPTBeneficiaryIdRequest: PutSelfBeneficiariesTPTBeneficiaryIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('update21', 'beneficiaryId', beneficiaryId)
            // verify required parameter 'putSelfBeneficiariesTPTBeneficiaryIdRequest' is not null or undefined
            assertParamExists('update21', 'putSelfBeneficiariesTPTBeneficiaryIdRequest', putSelfBeneficiariesTPTBeneficiaryIdRequest)
            const localVarPath = `/self/beneficiaries/tpt/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putSelfBeneficiariesTPTBeneficiaryIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SelfThirdPartyTransferApi - functional programming interface
 * @export
 */
export const SelfThirdPartyTransferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SelfThirdPartyTransferApiAxiosParamCreator(configuration)
    return {
        /**
         * Api to add third party beneficiary linked to current user.  Parameter Definitions  name : Nick name for beneficiary, should be unique for an self service user  officeName : Office Name of beneficiary(not id)  accountNumber : Account Number of beneficiary(not id)  transferLimit : Each transfer initiated to this account will not exceed this amount  Example Requests:  /self/beneficiaries/tpt  Mandatory Fields: name, officeName, accountNumber, accountType  Optional Fields: transferLimit
         * @summary Add TPT Beneficiary
         * @param {PostSelfBeneficiariesTPTRequest} postSelfBeneficiariesTPTRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(postSelfBeneficiariesTPTRequest: PostSelfBeneficiariesTPTRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSelfBeneficiariesTPTResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(postSelfBeneficiariesTPTRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Api to delete third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}
         * @summary Delete TPT Beneficiary
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete20(beneficiaryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSelfBeneficiariesTPTBeneficiaryIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete20(beneficiaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Api to get all third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt
         * @summary Get All TPT Beneficiary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll35(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSelfBeneficiariesTPTResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll35(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns Account Type enumerations. Self User is expected to know office name and account number to be able to add beneficiary.  Example Requests:  /self/beneficiaries/tpt/template
         * @summary Beneficiary Third Party Transfer Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async template16(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfBeneficiariesTPTTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.template16(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Api to update third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  Optional Fields: name, transferLimit
         * @summary Update TPT Beneficiary
         * @param {number} beneficiaryId beneficiaryId
         * @param {PutSelfBeneficiariesTPTBeneficiaryIdRequest} putSelfBeneficiariesTPTBeneficiaryIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update21(beneficiaryId: number, putSelfBeneficiariesTPTBeneficiaryIdRequest: PutSelfBeneficiariesTPTBeneficiaryIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutSelfBeneficiariesTPTBeneficiaryIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update21(beneficiaryId, putSelfBeneficiariesTPTBeneficiaryIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SelfThirdPartyTransferApi - factory interface
 * @export
 */
export const SelfThirdPartyTransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SelfThirdPartyTransferApiFp(configuration)
    return {
        /**
         * Api to add third party beneficiary linked to current user.  Parameter Definitions  name : Nick name for beneficiary, should be unique for an self service user  officeName : Office Name of beneficiary(not id)  accountNumber : Account Number of beneficiary(not id)  transferLimit : Each transfer initiated to this account will not exceed this amount  Example Requests:  /self/beneficiaries/tpt  Mandatory Fields: name, officeName, accountNumber, accountType  Optional Fields: transferLimit
         * @summary Add TPT Beneficiary
         * @param {PostSelfBeneficiariesTPTRequest} postSelfBeneficiariesTPTRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(postSelfBeneficiariesTPTRequest: PostSelfBeneficiariesTPTRequest, options?: any): AxiosPromise<PostSelfBeneficiariesTPTResponse> {
            return localVarFp.add(postSelfBeneficiariesTPTRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Api to delete third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}
         * @summary Delete TPT Beneficiary
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete20(beneficiaryId: number, options?: any): AxiosPromise<DeleteSelfBeneficiariesTPTBeneficiaryIdResponse> {
            return localVarFp.delete20(beneficiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Api to get all third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt
         * @summary Get All TPT Beneficiary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll35(options?: any): AxiosPromise<Array<GetSelfBeneficiariesTPTResponse>> {
            return localVarFp.retrieveAll35(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns Account Type enumerations. Self User is expected to know office name and account number to be able to add beneficiary.  Example Requests:  /self/beneficiaries/tpt/template
         * @summary Beneficiary Third Party Transfer Template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template16(options?: any): AxiosPromise<GetSelfBeneficiariesTPTTemplateResponse> {
            return localVarFp.template16(options).then((request) => request(axios, basePath));
        },
        /**
         * Api to update third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  Optional Fields: name, transferLimit
         * @summary Update TPT Beneficiary
         * @param {number} beneficiaryId beneficiaryId
         * @param {PutSelfBeneficiariesTPTBeneficiaryIdRequest} putSelfBeneficiariesTPTBeneficiaryIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update21(beneficiaryId: number, putSelfBeneficiariesTPTBeneficiaryIdRequest: PutSelfBeneficiariesTPTBeneficiaryIdRequest, options?: any): AxiosPromise<PutSelfBeneficiariesTPTBeneficiaryIdResponse> {
            return localVarFp.update21(beneficiaryId, putSelfBeneficiariesTPTBeneficiaryIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SelfThirdPartyTransferApi - object-oriented interface
 * @export
 * @class SelfThirdPartyTransferApi
 * @extends {BaseAPI}
 */
export class SelfThirdPartyTransferApi extends BaseAPI {
    /**
     * Api to add third party beneficiary linked to current user.  Parameter Definitions  name : Nick name for beneficiary, should be unique for an self service user  officeName : Office Name of beneficiary(not id)  accountNumber : Account Number of beneficiary(not id)  transferLimit : Each transfer initiated to this account will not exceed this amount  Example Requests:  /self/beneficiaries/tpt  Mandatory Fields: name, officeName, accountNumber, accountType  Optional Fields: transferLimit
     * @summary Add TPT Beneficiary
     * @param {PostSelfBeneficiariesTPTRequest} postSelfBeneficiariesTPTRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfThirdPartyTransferApi
     */
    public add(postSelfBeneficiariesTPTRequest: PostSelfBeneficiariesTPTRequest, options?: any) {
        return SelfThirdPartyTransferApiFp(this.configuration).add(postSelfBeneficiariesTPTRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api to delete third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}
     * @summary Delete TPT Beneficiary
     * @param {number} beneficiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfThirdPartyTransferApi
     */
    public delete20(beneficiaryId: number, options?: any) {
        return SelfThirdPartyTransferApiFp(this.configuration).delete20(beneficiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api to get all third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt
     * @summary Get All TPT Beneficiary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfThirdPartyTransferApi
     */
    public retrieveAll35(options?: any) {
        return SelfThirdPartyTransferApiFp(this.configuration).retrieveAll35(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns Account Type enumerations. Self User is expected to know office name and account number to be able to add beneficiary.  Example Requests:  /self/beneficiaries/tpt/template
     * @summary Beneficiary Third Party Transfer Template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfThirdPartyTransferApi
     */
    public template16(options?: any) {
        return SelfThirdPartyTransferApiFp(this.configuration).template16(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Api to update third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  Optional Fields: name, transferLimit
     * @summary Update TPT Beneficiary
     * @param {number} beneficiaryId beneficiaryId
     * @param {PutSelfBeneficiariesTPTBeneficiaryIdRequest} putSelfBeneficiariesTPTBeneficiaryIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SelfThirdPartyTransferApi
     */
    public update21(beneficiaryId: number, putSelfBeneficiariesTPTBeneficiaryIdRequest: PutSelfBeneficiariesTPTBeneficiaryIdRequest, options?: any) {
        return SelfThirdPartyTransferApiFp(this.configuration).update21(beneficiaryId, putSelfBeneficiariesTPTBeneficiaryIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
