/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteInterestRateChartsChartIdChartSlabsResponse } from '../models';
// @ts-ignore
import { GetInterestRateChartsChartIdChartSlabsResponse } from '../models';
// @ts-ignore
import { PostInterestRateChartsChartIdChartSlabsRequest } from '../models';
// @ts-ignore
import { PostInterestRateChartsChartIdChartSlabsResponse } from '../models';
// @ts-ignore
import { PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest } from '../models';
// @ts-ignore
import { PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse } from '../models';
/**
 * InterestRateSlabAKAInterestBandsApi - axios parameter creator
 * @export
 */
export const InterestRateSlabAKAInterestBandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new interest rate slab for an interest rate chart. Mandatory Fields periodType, fromPeriod, annualInterestRate Optional Fields toPeriod and description Example Requests:  interestratecharts/1/chartslabs
         * @summary Create a Slab
         * @param {number} chartId chartId
         * @param {PostInterestRateChartsChartIdChartSlabsRequest} postInterestRateChartsChartIdChartSlabsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create9: async (chartId: number, postInterestRateChartsChartIdChartSlabsRequest: PostInterestRateChartsChartIdChartSlabsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chartId' is not null or undefined
            assertParamExists('create9', 'chartId', chartId)
            // verify required parameter 'postInterestRateChartsChartIdChartSlabsRequest' is not null or undefined
            assertParamExists('create9', 'postInterestRateChartsChartIdChartSlabsRequest', postInterestRateChartsChartIdChartSlabsRequest)
            const localVarPath = `/interestratecharts/{chartId}/chartslabs`
                .replace(`{${"chartId"}}`, encodeURIComponent(String(chartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postInterestRateChartsChartIdChartSlabsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Slab from a chart
         * @summary Delete a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete12: async (chartId: number, chartSlabId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chartId' is not null or undefined
            assertParamExists('delete12', 'chartId', chartId)
            // verify required parameter 'chartSlabId' is not null or undefined
            assertParamExists('delete12', 'chartSlabId', chartSlabId)
            const localVarPath = `/interestratecharts/{chartId}/chartslabs/{chartSlabId}`
                .replace(`{${"chartId"}}`, encodeURIComponent(String(chartId)))
                .replace(`{${"chartSlabId"}}`, encodeURIComponent(String(chartSlabId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve list of slabs associated with a chart  Example Requests:  interestratecharts/1/chartslabs
         * @summary Retrieve all Slabs
         * @param {number} chartId chartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll25: async (chartId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chartId' is not null or undefined
            assertParamExists('retrieveAll25', 'chartId', chartId)
            const localVarPath = `/interestratecharts/{chartId}/chartslabs`
                .replace(`{${"chartId"}}`, encodeURIComponent(String(chartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a slab associated with an Interest rate chart  Example Requests:  interestratecharts/1/chartslabs/1 
         * @summary Retrieve a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne15: async (chartId: number, chartSlabId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chartId' is not null or undefined
            assertParamExists('retrieveOne15', 'chartId', chartId)
            // verify required parameter 'chartSlabId' is not null or undefined
            assertParamExists('retrieveOne15', 'chartSlabId', chartSlabId)
            const localVarPath = `/interestratecharts/{chartId}/chartslabs/{chartSlabId}`
                .replace(`{${"chartId"}}`, encodeURIComponent(String(chartId)))
                .replace(`{${"chartSlabId"}}`, encodeURIComponent(String(chartSlabId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} chartId chartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template8: async (chartId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chartId' is not null or undefined
            assertParamExists('template8', 'chartId', chartId)
            const localVarPath = `/interestratecharts/{chartId}/chartslabs/template`
                .replace(`{${"chartId"}}`, encodeURIComponent(String(chartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * It updates the Slab from chart
         * @summary Update a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest} putInterestRateChartsChartIdChartSlabsChartSlabIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update13: async (chartId: number, chartSlabId: number, putInterestRateChartsChartIdChartSlabsChartSlabIdRequest: PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chartId' is not null or undefined
            assertParamExists('update13', 'chartId', chartId)
            // verify required parameter 'chartSlabId' is not null or undefined
            assertParamExists('update13', 'chartSlabId', chartSlabId)
            // verify required parameter 'putInterestRateChartsChartIdChartSlabsChartSlabIdRequest' is not null or undefined
            assertParamExists('update13', 'putInterestRateChartsChartIdChartSlabsChartSlabIdRequest', putInterestRateChartsChartIdChartSlabsChartSlabIdRequest)
            const localVarPath = `/interestratecharts/{chartId}/chartslabs/{chartSlabId}`
                .replace(`{${"chartId"}}`, encodeURIComponent(String(chartId)))
                .replace(`{${"chartSlabId"}}`, encodeURIComponent(String(chartSlabId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication tenantid required
            await setApiKeyToObject(localVarHeaderParameter, "fineract-platform-tenantid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putInterestRateChartsChartIdChartSlabsChartSlabIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InterestRateSlabAKAInterestBandsApi - functional programming interface
 * @export
 */
export const InterestRateSlabAKAInterestBandsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InterestRateSlabAKAInterestBandsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new interest rate slab for an interest rate chart. Mandatory Fields periodType, fromPeriod, annualInterestRate Optional Fields toPeriod and description Example Requests:  interestratecharts/1/chartslabs
         * @summary Create a Slab
         * @param {number} chartId chartId
         * @param {PostInterestRateChartsChartIdChartSlabsRequest} postInterestRateChartsChartIdChartSlabsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create9(chartId: number, postInterestRateChartsChartIdChartSlabsRequest: PostInterestRateChartsChartIdChartSlabsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostInterestRateChartsChartIdChartSlabsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create9(chartId, postInterestRateChartsChartIdChartSlabsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Slab from a chart
         * @summary Delete a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete12(chartId: number, chartSlabId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteInterestRateChartsChartIdChartSlabsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete12(chartId, chartSlabId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve list of slabs associated with a chart  Example Requests:  interestratecharts/1/chartslabs
         * @summary Retrieve all Slabs
         * @param {number} chartId chartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAll25(chartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetInterestRateChartsChartIdChartSlabsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAll25(chartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a slab associated with an Interest rate chart  Example Requests:  interestratecharts/1/chartslabs/1 
         * @summary Retrieve a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOne15(chartId: number, chartSlabId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInterestRateChartsChartIdChartSlabsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOne15(chartId, chartSlabId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} chartId chartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async template8(chartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.template8(chartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * It updates the Slab from chart
         * @summary Update a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest} putInterestRateChartsChartIdChartSlabsChartSlabIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update13(chartId: number, chartSlabId: number, putInterestRateChartsChartIdChartSlabsChartSlabIdRequest: PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update13(chartId, chartSlabId, putInterestRateChartsChartIdChartSlabsChartSlabIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InterestRateSlabAKAInterestBandsApi - factory interface
 * @export
 */
export const InterestRateSlabAKAInterestBandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InterestRateSlabAKAInterestBandsApiFp(configuration)
    return {
        /**
         * Creates a new interest rate slab for an interest rate chart. Mandatory Fields periodType, fromPeriod, annualInterestRate Optional Fields toPeriod and description Example Requests:  interestratecharts/1/chartslabs
         * @summary Create a Slab
         * @param {number} chartId chartId
         * @param {PostInterestRateChartsChartIdChartSlabsRequest} postInterestRateChartsChartIdChartSlabsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create9(chartId: number, postInterestRateChartsChartIdChartSlabsRequest: PostInterestRateChartsChartIdChartSlabsRequest, options?: any): AxiosPromise<PostInterestRateChartsChartIdChartSlabsResponse> {
            return localVarFp.create9(chartId, postInterestRateChartsChartIdChartSlabsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Slab from a chart
         * @summary Delete a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete12(chartId: number, chartSlabId: number, options?: any): AxiosPromise<DeleteInterestRateChartsChartIdChartSlabsResponse> {
            return localVarFp.delete12(chartId, chartSlabId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve list of slabs associated with a chart  Example Requests:  interestratecharts/1/chartslabs
         * @summary Retrieve all Slabs
         * @param {number} chartId chartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAll25(chartId: number, options?: any): AxiosPromise<Array<GetInterestRateChartsChartIdChartSlabsResponse>> {
            return localVarFp.retrieveAll25(chartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a slab associated with an Interest rate chart  Example Requests:  interestratecharts/1/chartslabs/1 
         * @summary Retrieve a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOne15(chartId: number, chartSlabId: number, options?: any): AxiosPromise<GetInterestRateChartsChartIdChartSlabsResponse> {
            return localVarFp.retrieveOne15(chartId, chartSlabId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} chartId chartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        template8(chartId: number, options?: any): AxiosPromise<string> {
            return localVarFp.template8(chartId, options).then((request) => request(axios, basePath));
        },
        /**
         * It updates the Slab from chart
         * @summary Update a Slab
         * @param {number} chartId chartId
         * @param {number} chartSlabId chartSlabId
         * @param {PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest} putInterestRateChartsChartIdChartSlabsChartSlabIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update13(chartId: number, chartSlabId: number, putInterestRateChartsChartIdChartSlabsChartSlabIdRequest: PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest, options?: any): AxiosPromise<PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse> {
            return localVarFp.update13(chartId, chartSlabId, putInterestRateChartsChartIdChartSlabsChartSlabIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InterestRateSlabAKAInterestBandsApi - object-oriented interface
 * @export
 * @class InterestRateSlabAKAInterestBandsApi
 * @extends {BaseAPI}
 */
export class InterestRateSlabAKAInterestBandsApi extends BaseAPI {
    /**
     * Creates a new interest rate slab for an interest rate chart. Mandatory Fields periodType, fromPeriod, annualInterestRate Optional Fields toPeriod and description Example Requests:  interestratecharts/1/chartslabs
     * @summary Create a Slab
     * @param {number} chartId chartId
     * @param {PostInterestRateChartsChartIdChartSlabsRequest} postInterestRateChartsChartIdChartSlabsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestRateSlabAKAInterestBandsApi
     */
    public create9(chartId: number, postInterestRateChartsChartIdChartSlabsRequest: PostInterestRateChartsChartIdChartSlabsRequest, options?: any) {
        return InterestRateSlabAKAInterestBandsApiFp(this.configuration).create9(chartId, postInterestRateChartsChartIdChartSlabsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Slab from a chart
     * @summary Delete a Slab
     * @param {number} chartId chartId
     * @param {number} chartSlabId chartSlabId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestRateSlabAKAInterestBandsApi
     */
    public delete12(chartId: number, chartSlabId: number, options?: any) {
        return InterestRateSlabAKAInterestBandsApiFp(this.configuration).delete12(chartId, chartSlabId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve list of slabs associated with a chart  Example Requests:  interestratecharts/1/chartslabs
     * @summary Retrieve all Slabs
     * @param {number} chartId chartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestRateSlabAKAInterestBandsApi
     */
    public retrieveAll25(chartId: number, options?: any) {
        return InterestRateSlabAKAInterestBandsApiFp(this.configuration).retrieveAll25(chartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a slab associated with an Interest rate chart  Example Requests:  interestratecharts/1/chartslabs/1 
     * @summary Retrieve a Slab
     * @param {number} chartId chartId
     * @param {number} chartSlabId chartSlabId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestRateSlabAKAInterestBandsApi
     */
    public retrieveOne15(chartId: number, chartSlabId: number, options?: any) {
        return InterestRateSlabAKAInterestBandsApiFp(this.configuration).retrieveOne15(chartId, chartSlabId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} chartId chartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestRateSlabAKAInterestBandsApi
     */
    public template8(chartId: number, options?: any) {
        return InterestRateSlabAKAInterestBandsApiFp(this.configuration).template8(chartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * It updates the Slab from chart
     * @summary Update a Slab
     * @param {number} chartId chartId
     * @param {number} chartSlabId chartSlabId
     * @param {PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest} putInterestRateChartsChartIdChartSlabsChartSlabIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestRateSlabAKAInterestBandsApi
     */
    public update13(chartId: number, chartSlabId: number, putInterestRateChartsChartIdChartSlabsChartSlabIdRequest: PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest, options?: any) {
        return InterestRateSlabAKAInterestBandsApiFp(this.configuration).update13(chartId, chartSlabId, putInterestRateChartsChartIdChartSlabsChartSlabIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
