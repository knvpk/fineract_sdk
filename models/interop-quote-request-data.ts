/* tslint:disable */
/* eslint-disable */
/**
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * The version of the OpenAPI document: 1.5.0-66-gffae7d4-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { ExtensionData } from './extension-data';
import { GeoCodeData } from './geo-code-data';
import { InteropTransactionTypeData } from './interop-transaction-type-data';
import { MoneyData } from './money-data';

/**
 * 
 * @export
 * @interface InteropQuoteRequestData
 */
export interface InteropQuoteRequestData {
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    transactionCode: string;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    requestCode?: string;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    accountId: string;
    /**
     * 
     * @type {MoneyData}
     * @memberof InteropQuoteRequestData
     */
    amount: MoneyData;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    transactionRole: InteropQuoteRequestDataTransactionRoleEnum;
    /**
     * 
     * @type {InteropTransactionTypeData}
     * @memberof InteropQuoteRequestData
     */
    transactionType?: InteropTransactionTypeData;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    note?: string;
    /**
     * 
     * @type {GeoCodeData}
     * @memberof InteropQuoteRequestData
     */
    geoCode?: GeoCodeData;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    expiration?: string;
    /**
     * 
     * @type {Array<ExtensionData>}
     * @memberof InteropQuoteRequestData
     */
    extensionList?: Array<ExtensionData>;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    quoteCode: string;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    amountType: InteropQuoteRequestDataAmountTypeEnum;
    /**
     * 
     * @type {MoneyData}
     * @memberof InteropQuoteRequestData
     */
    fees?: MoneyData;
    /**
     * 
     * @type {string}
     * @memberof InteropQuoteRequestData
     */
    expirationLocalDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InteropQuoteRequestDataTransactionRoleEnum {
    Payer = 'PAYER',
    Payee = 'PAYEE'
}
/**
    * @export
    * @enum {string}
    */
export enum InteropQuoteRequestDataAmountTypeEnum {
    Send = 'SEND',
    Receive = 'RECEIVE'
}



